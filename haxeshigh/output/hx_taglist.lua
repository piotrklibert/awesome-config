-- Generated by Haxe 4.3.0-rc.1
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length = (type(k) == "number" and k >= len and (k + 1)) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end


function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 15 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    if obj.value then
        _G.print("runtime error:\n " .. _hx_tostring(obj.value));
    else
        _G.print("runtime error:\n " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    res = {}
    idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local _hx_exports = _hx_exports or {}
_hx_exports["taglist"] = _hx_exports["taglist"] or _hx_e()
local Array = _hx_e()
local __lua_lib_luautf8_Utf8 = _G.require("lua-utf8")
local Lambda = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local Sys = _hx_e()
local __awful_Naughty = _G.require("naughty")
local __awful_Screen = _G.require("awful.screen")
local __awful_Tag = _G.require("awful.tag")
local __awful_Timer = _G.require("gears.timer")
local __awful_Widget = _G.require("awful.widget")
local __awful_Wibox = _G.require("wibox")
local __haxe_IMap = _hx_e()
local __haxe_EntryPoint = _hx_e()
local __haxe_Exception = _hx_e()
local __haxe_Log = _hx_e()
local __haxe_MainEvent = _hx_e()
local __haxe_MainLoop = _hx_e()
local __haxe_NativeStackTrace = _hx_e()
local __haxe_ValueException = _hx_e()
__haxe_ds_Option = _hx_e()
local __haxe_ds_StringMap = _hx_e()
local __haxe_iterators_ArrayIterator = _hx_e()
local __haxe_iterators_ArrayKeyValueIterator = _hx_e()
local __lib_Inspect = _G.require("inspect")
local __log_Log = _hx_e()
local __lua_Boot = _hx_e()
local __lua_Thread = _hx_e()
local __lua_UserData = _hx_e()
local __lua_lib_luv_Misc = _G.require("luv")
local __pkg_PackageDefinition = _hx_e()
local __pkg_PackageBase = _hx_e()
local __pkg_PackageManager = _hx_e()
local __safety_SafetyException = _hx_e()
local __safety_NullPointerException = _hx_e()
local __taglist_Pkg = _hx_e()
local __taglist_Tag = _G.require("awful.tag")
local __taglist_Switcher = _hx_e()
local __taglist_TaglistManager = _hx_e()
local __taglist_TaglistRow = _hx_e()
local __taglist_Taglist = _hx_e()
local __taglist_TaglistAnimator = _hx_e()
local __taglist_TaglistAnimatorImpl = _hx_e()
local __taglist_Timers = _hx_e()
local __tink_core_NamedWith = _hx_e()
local __utils_lua__LuaTools_LuaTable_Impl_ = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g1 = 0;
  while (_g1 < a.length) do 
    local i = a[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  while (_g_current < self.length) do 
    _g_current = _g_current + 1;
    _G.table.insert(tbl, Std.string(self[_g_current - 1]));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  self.length = self.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    if (self[_g - 1] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Lambda.new = {}
Lambda.__name__ = true
Lambda.has = function(it,elt) 
  local x = it:iterator();
  while (x:hasNext()) do 
    if (x:next() == elt) then 
      do return true end;
    end;
  end;
  do return false end;
end

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.__name__ = true
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.fields = function(o) 
  local _hx_continue_1 = false;
  while (true) do repeat 
    if (_G.type(o) == "string") then 
      o = String.prototype;
      break;
    else
      do return _hx_field_arr(o) end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
Reflect.copy = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o2 = _hx_e();
  local _g = 0;
  local _g1 = Reflect.fields(o);
  while (_g < _g1.length) do 
    local f = _g1[_g];
    _g = _g + 1;
    o2[f] = Reflect.field(o, f);
  end;
  do return o2 end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return __lua_lib_luautf8_Utf8.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.prototype.__oldindex(String, s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = __lua_lib_luautf8_Utf8.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return __lua_lib_luautf8_Utf8.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return __lua_lib_luautf8_Utf8.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return __lua_lib_luautf8_Utf8.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.prototype.indexOfEmpty(String, self, startIndex - 1) end;
  end;
  local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.prototype.indexOfEmpty(String, self, startIndex1 - 1);
    else
      local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(delimiter) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(self, delimiter, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(self)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(delimiter);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, __lua_lib_luautf8_Utf8.len(self)));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return __lua_lib_luautf8_Utf8.sub(self, endIndex + 1, startIndex) end;
  else
    do return __lua_lib_luautf8_Utf8.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(self)))) then 
    len = __lua_lib_luautf8_Utf8.len(self);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(self) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(self) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return __lua_lib_luautf8_Utf8.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local hexMatch = _G.string.match(x, "^[ \t\r\n]*([%-+]*0[xX][%da-fA-F]*)");
  if (hexMatch ~= nil) then 
    local sign;
    local _g = __lua_lib_luautf8_Utf8.byte(hexMatch, 1);
    if (_g) == 43 then 
      sign = 1;
    elseif (_g) == 45 then 
      sign = -1;else
    sign = 0; end;
    local pos = (function() 
      local _hx_1
      if (sign == 0) then 
      _hx_1 = 2; else 
      _hx_1 = 3; end
      return _hx_1
    end )();
    local len = nil;
    len = __lua_lib_luautf8_Utf8.len(hexMatch);
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(hexMatch) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return (function() 
      local _hx_2
      if (sign == -1) then 
      _hx_2 = -1; else 
      _hx_2 = 1; end
      return _hx_2
    end )() * _G.tonumber(__lua_lib_luautf8_Utf8.sub(hexMatch, pos + 1, pos + len), 16) end;
  else
    local intMatch = _G.string.match(x, "^ *[%-+]?%d*");
    if (intMatch ~= nil) then 
      do return _G.tonumber(intMatch) end;
    else
      do return nil end;
    end;
  end;
end

Sys.new = {}
Sys.__name__ = true
Sys.time = function() 
  local _hx_1_stamp_seconds, _hx_1_stamp_microseconds = __lua_lib_luv_Misc.gettimeofday();
  do return _hx_1_stamp_seconds + (_hx_1_stamp_microseconds / 1000000) end;
end

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true

__haxe_EntryPoint.new = {}
__haxe_EntryPoint.__name__ = true
__haxe_EntryPoint.processEvents = function() 
  while (true) do 
    local f = __haxe_EntryPoint.pending:shift();
    if (f == nil) then 
      break;
    end;
    f();
  end;
  local time = __haxe_MainLoop.tick();
  if (not __haxe_MainLoop.hasEvents() and (__haxe_EntryPoint.threadCount == 0)) then 
    do return -1 end;
  end;
  do return time end;
end
__haxe_EntryPoint.run = function() 
  while (true) do 
    local nextTick = __haxe_EntryPoint.processEvents();
    if (_hx_luv.loop_alive()) then 
      if (nextTick < 0) then 
        _hx_luv.run("once");
      else
        _hx_luv.run("nowait");
      end;
    else
      if (nextTick < 0) then 
        break;
      end;
      local tmp = nextTick > 0;
    end;
  end;
end

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.caught = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value end;
  else
    do return __haxe_ValueException.new(value, nil, value) end;
  end;
end
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.unwrap = function(self) 
  do return self.__nativeException end
end
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Log.new = {}
__haxe_Log.__name__ = true
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = infos.fileName .. ":" .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v = _g1[_g];
      _g = _g + 1;
      str = str .. (", " .. Std.string(v));
    end;
  end;
  do return pstr .. ": " .. str end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_MainEvent.new = function(f,p) 
  local self = _hx_new(__haxe_MainEvent.prototype)
  __haxe_MainEvent.super(self,f,p)
  return self
end
__haxe_MainEvent.super = function(self,f,p) 
  self.isBlocking = true;
  self.f = _hx_funcToField(f);
  self.priority = p;
  self.nextRun = -_G.math.huge;
end
__haxe_MainEvent.__name__ = true
__haxe_MainEvent.prototype = _hx_e();

__haxe_MainEvent.prototype.__class__ =  __haxe_MainEvent

__haxe_MainLoop.new = {}
__haxe_MainLoop.__name__ = true
__haxe_MainLoop.hasEvents = function() 
  local p = __haxe_MainLoop.pending;
  while (p ~= nil) do 
    if (p.isBlocking) then 
      do return true end;
    end;
    p = p.next;
  end;
  do return false end;
end
__haxe_MainLoop.sortEvents = function() 
  local list = __haxe_MainLoop.pending;
  if (list == nil) then 
    do return end;
  end;
  local insize = 1;
  local nmerges;
  local psize = 0;
  local qsize = 0;
  local p;
  local q;
  local e;
  local tail;
  while (true) do 
    p = list;
    list = nil;
    tail = nil;
    nmerges = 0;
    while (p ~= nil) do 
      nmerges = nmerges + 1;
      q = p;
      psize = 0;
      local _g = 0;
      local _g1 = insize;
      while (_g < _g1) do 
        _g = _g + 1;
        psize = psize + 1;
        q = q.next;
        if (q == nil) then 
          break;
        end;
      end;
      qsize = insize;
      while ((psize > 0) or ((qsize > 0) and (q ~= nil))) do 
        if (psize == 0) then 
          e = q;
          q = q.next;
          qsize = qsize - 1;
        else
          if (((qsize == 0) or (q == nil)) or ((p.priority > q.priority) or ((p.priority == q.priority) and (p.nextRun <= q.nextRun)))) then 
            e = p;
            p = p.next;
            psize = psize - 1;
          else
            e = q;
            q = q.next;
            qsize = qsize - 1;
          end;
        end;
        if (tail ~= nil) then 
          tail.next = e;
        else
          list = e;
        end;
        e.prev = tail;
        tail = e;
      end;
      p = q;
    end;
    tail.next = nil;
    if (nmerges <= 1) then 
      break;
    end;
    insize = insize * 2;
  end;
  list.prev = nil;
  __haxe_MainLoop.pending = list;
end
__haxe_MainLoop.tick = function() 
  __haxe_MainLoop.sortEvents();
  local e = __haxe_MainLoop.pending;
  local now = Sys.time();
  local wait = 1e9;
  while (e ~= nil) do 
    local next = e.next;
    local wt = e.nextRun - now;
    if (wt <= 0) then 
      wait = 0;
      if (e.f ~= nil) then 
        e:f();
      end;
    else
      if (wait > wt) then 
        wait = wt;
      end;
    end;
    e = next;
  end;
  do return wait end;
end

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len("\n") > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(_g, "\n", idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(_g)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(_g, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len("\n");
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(_g, idx, __lua_lib_luautf8_Utf8.len(_g)));
        idx = nil;
      end;
    end;
    do return ret:slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,Std.string(value),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();
__haxe_ValueException.prototype.unwrap = function(self) 
  do return self.value end
end

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})
_hxClasses["haxe.ds.Option"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Some","None"},2)}
__haxe_ds_Option = _hxClasses["haxe.ds.Option"];
__haxe_ds_Option.Some = function(v) local _x = _hx_tab_array({[0]="Some",0,v,__enum__=__haxe_ds_Option}, 3); return _x; end 
__haxe_ds_Option.None = _hx_tab_array({[0]="None",1,__enum__ = __haxe_ds_Option},2)


__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__log_Log.new = {}
__log_Log.__name__ = true
__log_Log.display = function(s,opts) 
  if (opts == nil) then 
    opts = _hx_e();
  end;
  local value = Reflect.copy(__log_Log.defaults);
  local defs;
  if (value == nil) then 
    _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
  else
    defs = value;
  end;
  local _g = 0;
  local _g1 = Reflect.fields(opts);
  while (_g < _g1.length) do 
    local f = _g1[_g];
    _g = _g + 1;
    defs[f] = Reflect.field(opts, f);
  end;
  defs.text = s;
  __awful_Naughty.notify(defs);
end
__log_Log.formatInfos = function(i) 
  if (i == nil) then 
    do return "    ERROR: no pos info!\n" end;
  else
    local i = i;
    do return _G.table.concat(({"    " .. i.fileName .. ":" .. Std.string(i.lineNumber),"    " .. i.className .. "." .. i.methodName}), "\n") end;
  end;
end
__log_Log.log = function(x,opts,infos) 
  local _hx_continue_1 = false;
  while (true) do repeat 
    if (opts == nil) then 
      opts = _hx_e();
    end;
    local _hx_tmp = (function() 
      local _hx_1
      if (__lua_Boot.__instanceof(x, String)) then 
      _hx_1 = _hx_tab_array({[0]=x}, 1); else 
      _hx_1 = _hx_tab_array({}, 0); end
      return _hx_1
    end )();
    if (_hx_tmp.length == 1) then 
      local s = _hx_tmp[0];
      local infos = __log_Log.formatInfos(infos);
      __log_Log.display("" .. infos .. "\n    -----------------------\n\n" .. s .. "\n", opts);
    else
      x = __lib_Inspect.inspect(x, ({depth = 2}));
      break;
    end;
    do return end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  while (true) do 
    if ((cl1 == nil) or (cl2 == nil)) then 
      do return false end;
    else
      if (cl1 == cl2) then 
        do return true end;
      else
        if (cl1.__interfaces__ ~= nil) then 
          local intf = cl1.__interfaces__;
          local _g = 1;
          local _g1 = _hx_table.maxn(intf) + 1;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
              do return true end;
            end;
          end;
        end;
      end;
    end;
    cl1 = cl1.__super__;
  end;
end

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__pkg_PackageDefinition.new = {}
__pkg_PackageDefinition.__name__ = true

__pkg_PackageBase.new = function() 
  local self = _hx_new(__pkg_PackageBase.prototype)
  __pkg_PackageBase.super(self)
  return self
end
__pkg_PackageBase.super = function(self) 
end
__pkg_PackageBase.__name__ = true
__pkg_PackageBase.prototype = _hx_e();

__pkg_PackageBase.prototype.__class__ =  __pkg_PackageBase

__pkg_PackageManager.new = function() 
  local self = _hx_new(__pkg_PackageManager.prototype)
  __pkg_PackageManager.super(self)
  return self
end
__pkg_PackageManager.super = function(self) 
end
__pkg_PackageManager.__name__ = true
__pkg_PackageManager.prototype = _hx_e();
__pkg_PackageManager.prototype.toString = function(self) 
  do return "<PackageManager>" end
end

__pkg_PackageManager.prototype.__class__ =  __pkg_PackageManager

__safety_SafetyException.new = function(message,previous,native) 
  local self = _hx_new(__safety_SafetyException.prototype)
  __safety_SafetyException.super(self,message,previous,native)
  return self
end
__safety_SafetyException.super = function(self,message,previous,native) 
  __haxe_Exception.super(self,message,previous,native);
end
__safety_SafetyException.__name__ = true
__safety_SafetyException.prototype = _hx_e();

__safety_SafetyException.prototype.__class__ =  __safety_SafetyException
__safety_SafetyException.__super__ = __haxe_Exception
setmetatable(__safety_SafetyException.prototype,{__index=__haxe_Exception.prototype})

__safety_NullPointerException.new = function(message,previous,native) 
  local self = _hx_new(__safety_NullPointerException.prototype)
  __safety_NullPointerException.super(self,message,previous,native)
  return self
end
__safety_NullPointerException.super = function(self,message,previous,native) 
  __safety_SafetyException.super(self,message,previous,native);
end
__safety_NullPointerException.__name__ = true
__safety_NullPointerException.prototype = _hx_e();

__safety_NullPointerException.prototype.__class__ =  __safety_NullPointerException
__safety_NullPointerException.__super__ = __safety_SafetyException
setmetatable(__safety_NullPointerException.prototype,{__index=__safety_SafetyException.prototype})

__taglist_Pkg.new = function() 
  local self = _hx_new(__taglist_Pkg.prototype)
  __taglist_Pkg.super(self)
  return self
end
__taglist_Pkg.super = function(self) 
  self.name = "taglist";
  __pkg_PackageBase.super(self);
end
_hx_exports["taglist"]["Pkg"] = __taglist_Pkg
__taglist_Pkg.__name__ = true
__taglist_Pkg.__interfaces__ = {__pkg_PackageDefinition}
__taglist_Pkg.main = function() 
end
__taglist_Pkg.instance = function() 
  do return __taglist_Pkg.new() end;
end
__taglist_Pkg.prototype = _hx_e();
__taglist_Pkg.prototype.start = function(self) 
end
__taglist_Pkg.prototype.stop = function(self) 
end
__taglist_Pkg.prototype.load = function(self) 
  local _hx_status, _hx_result = pcall(function() 
  
      _G.Taglist = __taglist_TaglistManager.enable() local app = _G.Taglist;
      app:autoHide(4);
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    __log_Log.log("Error loading taglist module: " .. Std.string(__haxe_Exception.caught(_g):unwrap()), nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/taglist/Pkg.hx",lineNumber=34,className="taglist.Pkg",methodName="load"}));
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
end
__taglist_Pkg.prototype.unload = function(self) 
  __taglist_TaglistManager.disable();
  _G.Taglist = nil;
end

__taglist_Pkg.prototype.__class__ =  __taglist_Pkg
__taglist_Pkg.__super__ = __pkg_PackageBase
setmetatable(__taglist_Pkg.prototype,{__index=__pkg_PackageBase.prototype})

__taglist_Switcher.new = {}
_hx_exports["taglist"]["Switcher"] = __taglist_Switcher
__taglist_Switcher.__name__ = true
__taglist_Switcher.tag_up = function() 
  __taglist_Switcher.move(3);
end
__taglist_Switcher.tag_down = function() 
  __taglist_Switcher.move(-3);
end
__taglist_Switcher.tag_left = function() 
  local value = Std.parseInt(__taglist_Tag.selected().name);
  if (value == nil) then 
    _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
  end;
  if (_hx_tab_array({[0]=1, 4, 7}, 3):contains(value)) then 
    __taglist_Switcher.move(2);
  else
    __taglist_Switcher.move(-1);
  end;
end
__taglist_Switcher.tag_right = function() 
  local value = Std.parseInt(__taglist_Tag.selected().name);
  if (value == nil) then 
    _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
  end;
  if (_hx_tab_array({[0]=3, 6, 9}, 3):contains(value)) then 
    __taglist_Switcher.move(-2);
  else
    __taglist_Switcher.move(1);
  end;
end
__taglist_Switcher.move = function(dest) 
  local value = _G.Taglist.animator;
  local animator;
  local animator1 = value[1];
  if (animator1) == 0 then 
    animator = value[2];
  elseif (animator1) == 1 then 
    _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
  animator:show();
  __taglist_Tag.viewidx(dest);
  animator:autoHide(4);
end

__taglist_TaglistManager.new = {}
_hx_exports["taglist"]["TaglistManager"] = __taglist_TaglistManager
__taglist_TaglistManager.__name__ = true
__taglist_TaglistManager.enable = function() 
  local _g = __taglist_TaglistManager.taglist;
  local tmp = _g[1];
  if (tmp) == 0 then 
    __taglist_TaglistManager.taglist = __haxe_ds_Option.Some(_g[2]:enable());
  elseif (tmp) == 1 then 
    __taglist_TaglistManager.taglist = __haxe_ds_Option.Some(__taglist_Taglist.new():enable()); end;
  local value = __taglist_TaglistManager.taglist;
  local tmp = value[1];
  if (tmp) == 0 then 
    do return value[2] end;
  elseif (tmp) == 1 then 
    _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
end
__taglist_TaglistManager.disable = function() 
  local _g = __taglist_TaglistManager.taglist;
  local tmp = _g[1];
  if (tmp) == 0 then 
    _g[2]:disable();
    __taglist_TaglistManager.taglist = __haxe_ds_Option.None;
  elseif (tmp) == 1 then 
    _G.error(__haxe_Exception.thrown("TaglistManager: Tried to call .disable(), but .enable() was not called before"),0); end;
end

__taglist_TaglistRow.new = function(tags) 
  local self = _hx_new(__taglist_TaglistRow.prototype)
  __taglist_TaglistRow.super(self,tags)
  return self
end
__taglist_TaglistRow.super = function(self,tags) 
  self.tags = tags;
end
__taglist_TaglistRow.__name__ = true
__taglist_TaglistRow.prototype = _hx_e();
__taglist_TaglistRow.prototype.toLua = function(self,s) 
  do return self:makeTaglist(s) end
end
__taglist_TaglistRow.prototype.makeTaglist = function(self,s) 
  local button = awful.button(_hx_e(), 1, function(x) 
    __haxe_Log.trace("asdasda", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/taglist/Taglist.hx",lineNumber=57,className="taglist.TaglistRow",methodName="makeTaglist"}));
    local sel = __awful_Screen.focused().selected_tag;
    __awful_Tag.viewtoggle(x);
    __awful_Tag.viewtoggle(sel);
  end);
  local conf = ({screen = s, filter = self:makeFilterFun(), buttons = ({button})});
  do return __awful_Widget.taglist(conf) end
end
__taglist_TaglistRow.prototype.makeFilterFun = function(self) 
  local _gthis = self;
  do return function(tag) 
    do return Lambda.has(_gthis.tags, tag.name) end;
  end end
end

__taglist_TaglistRow.prototype.__class__ =  __taglist_TaglistRow

__taglist_Taglist.new = function() 
  local self = _hx_new(__taglist_Taglist.prototype)
  __taglist_Taglist.super(self)
  return self
end
__taglist_Taglist.super = function(self) 
  self.animator = __haxe_ds_Option.None;
  self.tagListBox = __haxe_ds_Option.None;
end
_hx_exports["taglist"]["Taglist"] = __taglist_Taglist
__taglist_Taglist.__name__ = true
__taglist_Taglist.mkWidget = function(s) 
  local rows = _hx_tab_array({[0]=__taglist_TaglistRow.new(_hx_tab_array({[0]="7", "8", "9"}, 3)), __taglist_TaglistRow.new(_hx_tab_array({[0]="4", "5", "6"}, 3)), __taglist_TaglistRow.new(_hx_tab_array({[0]="1", "2", "3"}, 3))}, 3);
  local ret = ({id = "grid", spacing = 6, layout = __awful_Wibox.layout.fixed.vertical});
  local _g = 0;
  while (_g < rows.length) do 
    local row = rows[_g];
    _g = _g + 1;
    _G.table.insert(ret, row:toLua(s));
  end;
  do return __awful_Wibox.widget(ret) end;
end
__taglist_Taglist.prototype = _hx_e();
__taglist_Taglist.prototype.autoHide = function(self) 
  local value = self.animator;
  local tmp;
  local tmp1 = value[1];
  if (tmp1) == 0 then 
    tmp = value[2];
  elseif (tmp1) == 1 then 
    _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
  tmp:autoHide(4);
end
__taglist_Taglist.prototype.show = function(self) 
  local value = self.animator;
  local tmp;
  local tmp1 = value[1];
  if (tmp1) == 0 then 
    tmp = value[2];
  elseif (tmp1) == 1 then 
    _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
  tmp:show();
end
__taglist_Taglist.prototype.enable = function(self) 
  if (self.tagListBox == __haxe_ds_Option.None) then 
    self.tagListBox = __haxe_ds_Option.Some(__awful_Wibox(__utils_lua__LuaTools_LuaTable_Impl_.fromObject(__taglist_Taglist.wiboxConfig)));
  end;
  local value = self.tagListBox;
  local tmp;
  local tmp1 = value[1];
  if (tmp1) == 0 then 
    tmp = value[2];
  elseif (tmp1) == 1 then 
    _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
  self:setup(tmp, __taglist_Taglist.mkWidget(__awful_Screen.focused()));
  do return self end
end
__taglist_Taglist.prototype.disable = function(self) 
  self.animator = __haxe_ds_Option.None;
  local value = self.tagListBox;
  local wb;
  local wb1 = value[1];
  if (wb1) == 0 then 
    wb = value[2];
  elseif (wb1) == 1 then 
    _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
  wb.visible = false;
  self.tagListBox = __haxe_ds_Option.None;
  do return self end
end
__taglist_Taglist.prototype.setup = function(self,wibox,widget) 
  local _gthis = self;
  local _tmp_0 = ({widget});
  _tmp_0.margins = 15;
  _tmp_0.layout = __awful_Wibox.container.margin;
  local widgetTable = _tmp_0;
  local _tmp_1 = ({widgetTable});
  _tmp_1.id = "bg";
  _tmp_1.border_color = "#919191";
  _tmp_1.border_width = 1;
  _tmp_1.border_strategy = "inner";
  _tmp_1.widget = __awful_Wibox.container.background;
  local setupTable = _tmp_1;
  self.animator = __haxe_ds_Option.Some(__taglist_TaglistAnimatorImpl.new(self));
  wibox:setup(setupTable);
  wibox:connect_signal("mouse::enter", function() 
    local value = _gthis.animator;
    local tmp;
    local tmp1 = value[1];
    if (tmp1) == 0 then 
      local val = value[2];
      tmp = val;
    elseif (tmp1) == 1 then 
      _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
    tmp:show();
  end);
  wibox:connect_signal("mouse::leave", function() 
    local value = _gthis.animator;
    local tmp;
    local tmp1 = value[1];
    if (tmp1) == 0 then 
      local val = value[2];
      tmp = val;
    elseif (tmp1) == 1 then 
      _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
    tmp:slide("out");
  end);
  wibox.visible = true;
  do return wibox end
end

__taglist_Taglist.prototype.__class__ =  __taglist_Taglist

__taglist_TaglistAnimator.new = {}
__taglist_TaglistAnimator.__name__ = true
__taglist_TaglistAnimator.prototype = _hx_e();

__taglist_TaglistAnimator.prototype.__class__ =  __taglist_TaglistAnimator

__taglist_TaglistAnimatorImpl.new = function(t) 
  local self = _hx_new(__taglist_TaglistAnimatorImpl.prototype)
  __taglist_TaglistAnimatorImpl.super(self,t)
  return self
end
__taglist_TaglistAnimatorImpl.super = function(self,t) 
  self.timers = __taglist_Timers.new();
  self.taglist = t;
end
__taglist_TaglistAnimatorImpl.__name__ = true
__taglist_TaglistAnimatorImpl.__interfaces__ = {__taglist_TaglistAnimator}
__taglist_TaglistAnimatorImpl.prototype = _hx_e();
__taglist_TaglistAnimatorImpl.prototype.get_tagListBox = function(self) 
  local _g = self.taglist.tagListBox;
  local tmp = _g[1];
  if (tmp) == 0 then 
    do return _g[2] end;
  elseif (tmp) == 1 then 
    _G.error(__haxe_Exception.thrown("Cannot animate nonexistent widget"),0); end;
end
__taglist_TaglistAnimatorImpl.prototype.disable = function(self) 
end
__taglist_TaglistAnimatorImpl.prototype.autoHide = function(self,n) 
  local _gthis = self;
  if (self.timers.hide_timer ~= __haxe_ds_Option.None) then 
    local value = self.timers.hide_timer;
    local tmp;
    local tmp1 = value[1];
    if (tmp1) == 0 then 
      tmp = value[2];
    elseif (tmp1) == 1 then 
      _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
    self:resetTimer(tmp);
    self.timers.hide_timer = __haxe_ds_Option.None;
  end;
  local f = function() 
    _gthis:slide("out");
  end;
  local tmp = function(_) 
    f();
  end;
  self.timers.hide_timer = __haxe_ds_Option.Some(__awful_Timer.new(_hx_o({__fields__={timeout=true,callback=true,autostart=true,single_shot=true},timeout=4,callback=tmp,autostart=true,single_shot=true})));
end
__taglist_TaglistAnimatorImpl.prototype.show = function(self) 
  if (self.timers.slide_timer ~= __haxe_ds_Option.None) then 
    local value = self.timers.slide_timer;
    local tmp;
    local tmp1 = value[1];
    if (tmp1) == 0 then 
      tmp = value[2];
    elseif (tmp1) == 1 then 
      _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
    self:resetTimer(tmp);
  end;
  self:get_tagListBox():geometry(_hx_o({__fields__={x=true},x=__taglist_TaglistAnimatorImpl.slideConf.init}));
end
__taglist_TaglistAnimatorImpl.prototype.slideOut = function(self,timer) 
  local start = self:get_tagListBox().x;
  local iterator_x_cur = 0;
  local iterator_x_max = _G.math.ceil((__taglist_TaglistAnimatorImpl.slideConf.last - start) / 2);
  while (iterator_x_cur < iterator_x_max) do 
    iterator_x_cur = iterator_x_cur + 1;
    self:get_tagListBox():geometry(_hx_o({__fields__={x=true},x=start + ((iterator_x_cur - 1) * 2)}));
    _G.coroutine.yield();
  end;
  self:resetTimer(timer);
end
__taglist_TaglistAnimatorImpl.prototype.slideIn = function(self,timer) 
  local start = self:get_tagListBox().x;
  local _end = __taglist_TaglistAnimatorImpl.slideConf.init;
  local iterator_x_cur = _G.math.ceil((start - _end) / 2);
  while (iterator_x_cur > 0) do 
    iterator_x_cur = iterator_x_cur - 1;
    self:get_tagListBox():geometry(_hx_o({__fields__={x=true},x=_end + (iterator_x_cur * 2)}));
    _G.coroutine.yield();
  end;
  self:resetTimer(timer);
end
__taglist_TaglistAnimatorImpl.prototype.resetTimer = function(self,timer) 
  if (timer.started) then 
    timer:stop();
  end;
end
__taglist_TaglistAnimatorImpl.prototype.slide = function(self,arg) 
  local _gthis = self;
  if (self.timers.slide_timer ~= __haxe_ds_Option.None) then 
    local value = self.timers.slide_timer;
    local tmp;
    local tmp1 = value[1];
    if (tmp1) == 0 then 
      tmp = value[2];
    elseif (tmp1) == 1 then 
      _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
    self:resetTimer(tmp);
    self.timers.slide_timer = __haxe_ds_Option.None;
  end;
  local generator = _G.coroutine.wrap((function() 
    local _hx_1
    if (arg == "in") then 
    _hx_1 = _hx_bind(self,self.slideIn); else 
    _hx_1 = _hx_bind(self,self.slideOut); end
    return _hx_1
  end )());
  local tmp = __awful_Timer.new(_hx_o({__fields__={timeout=true,callback=true,autostart=true,single_shot=true},timeout=__taglist_TaglistAnimatorImpl.slideConf.step_time,callback=function(t) 
    local generator = generator;
    local value = _gthis.timers.slide_timer;
    local tmp;
    local tmp1 = value[1];
    if (tmp1) == 0 then 
      tmp = value[2];
    elseif (tmp1) == 1 then 
      _G.error(__haxe_Exception.thrown("None in OptionTools.sure() call"),0); end;
    generator(tmp);
  end,autostart=true,single_shot=false}));
  self.timers.slide_timer = __haxe_ds_Option.Some(tmp);
end

__taglist_TaglistAnimatorImpl.prototype.__class__ =  __taglist_TaglistAnimatorImpl

__taglist_Timers.new = function() 
  local self = _hx_new(__taglist_Timers.prototype)
  __taglist_Timers.super(self)
  return self
end
__taglist_Timers.super = function(self) 
  self.hide_timer = __haxe_ds_Option.None;
  self.slide_timer = __haxe_ds_Option.None;
end
__taglist_Timers.__name__ = true
__taglist_Timers.prototype = _hx_e();

__taglist_Timers.prototype.__class__ =  __taglist_Timers

__tink_core_NamedWith.new = function(name,value) 
  local self = _hx_new(__tink_core_NamedWith.prototype)
  __tink_core_NamedWith.super(self,name,value)
  return self
end
__tink_core_NamedWith.super = function(self,name,value) 
  self.name = name;
  self.value = value;
end
__tink_core_NamedWith.__name__ = true
__tink_core_NamedWith.prototype = _hx_e();

__tink_core_NamedWith.prototype.__class__ =  __tink_core_NamedWith

__utils_lua__LuaTools_LuaTable_Impl_.new = {}
__utils_lua__LuaTools_LuaTable_Impl_.__name__ = true
__utils_lua__LuaTools_LuaTable_Impl_.fromObject = function(obj) 
  local _g = __haxe_ds_StringMap.new();
  local _g1 = 0;
  local _g2 = Reflect.fields(obj);
  while (_g1 < _g2.length) do 
    local f = _g2[_g1];
    _g1 = _g1 + 1;
    local value = Reflect.field(obj, f);
    if (value == nil) then 
      _g.h[f] = __haxe_ds_StringMap.tnull;
    else
      _g.h[f] = value;
    end;
  end;
  do return _g.h end;
end
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;
  _G.Switcher = __taglist_Switcher;__haxe_EntryPoint.pending = Array.new();
  
  __haxe_EntryPoint.threadCount = 0;
  
  __haxe_ds_StringMap.tnull = ({});
  
  __log_Log.res_path = "/home/cji/portless/lua/awesome-config/haxeshigh/res";
  
  __log_Log.defaults = _hx_o({__fields__={fg=true,bg=true,font=true,icon=true,width=true,position=true,timeout=true,hover_timeout=true},fg="black",bg="#96413F",font="mono 10",icon="" .. __log_Log.res_path .. "/bang2.png",width=720,position="bottom_right",timeout=12,hover_timeout=0.2});
  
  __taglist_Pkg.ver = "1663968800";
  
  __taglist_TaglistManager.taglist = __haxe_ds_Option.None;
  
  __taglist_Taglist.wiboxConfig = _hx_o({__fields__={x=true,y=true,height=true,width=true,ontop=true,opacity=true},x=1820,y=240,height=115,width=95,ontop=true,opacity=0.7});
  
  __taglist_TaglistAnimatorImpl.slideConf = _hx_o({__fields__={init=true,last=true,step_time=true},init=1820,last=1895,step_time=0.05});
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_hx_print = print or (function() end)

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
_G.xpcall(function() 
  __taglist_Pkg.main();
  __haxe_EntryPoint.run();
  _hx_luv.run();
end, _hx_error)
return _hx_exports
