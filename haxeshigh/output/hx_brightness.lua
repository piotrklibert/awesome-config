-- Generated by Haxe 4.3.0-rc.1
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length = (type(k) == "number" and k >= len and (k + 1)) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end


function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 15 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    if obj.value then
        _G.print("runtime error:\n " .. _hx_tostring(obj.value));
    else
        _G.print("runtime error:\n " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    res = {}
    idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local _hx_exports = _hx_exports or {}
_hx_exports["brightness"] = _hx_exports["brightness"] or _hx_e()
local Array = _hx_e()
local __lua_lib_luautf8_Utf8 = _G.require("lua-utf8")
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringTools = _hx_e()
local Sys = _hx_e()
local __awful_Naughty = _G.require("naughty")
local __awful_NativeSpawn = _G.require("awful.spawn")
local __awful_Wibox = _G.require("wibox")
__brightness_State = _hx_e()
local __sys_io_File = _hx_e()
local __haxe_Exception = _hx_e()
local __safety_SafetyException = _hx_e()
local __safety_NullPointerException = _hx_e()
local __haxe_NativeStackTrace = _hx_e()
local __brightness_BrightnessWidget = _hx_e()
local __brightness_PowerWidget = _hx_e()
local __pkg_PackageBase = _hx_e()
local __pkg_PackageDefinition = _hx_e()
local __brightness_Pkg = _hx_e()
local __haxe_IMap = _hx_e()
local __haxe_EntryPoint = _hx_e()
local __haxe_MainEvent = _hx_e()
local __haxe_MainLoop = _hx_e()
local __haxe_ValueException = _hx_e()
__haxe_ds_Either = _hx_e()
local __haxe_ds_StringMap = _hx_e()
local __haxe_iterators_ArrayIterator = _hx_e()
local __haxe_iterators_ArrayKeyValueIterator = _hx_e()
local __lib_Inspect = _G.require("inspect")
local __log_Log = _hx_e()
local __lua_Boot = _hx_e()
local __lua_UserData = _hx_e()
local __lua_Thread = _hx_e()
local __lua_lib_luv_Misc = _G.require("luv")
local __pkg_PackageManager = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g1 = 0;
  while (_g1 < a.length) do 
    local i = a[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  while (_g_current < self.length) do 
    _g_current = _g_current + 1;
    _G.table.insert(tbl, Std.string(self[_g_current - 1]));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  self.length = self.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    if (self[_g - 1] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.max = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.max(a, b) end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.__name__ = true
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.fields = function(o) 
  local _hx_continue_1 = false;
  while (true) do repeat 
    if (_G.type(o) == "string") then 
      o = String.prototype;
      break;
    else
      do return _hx_field_arr(o) end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
Reflect.copy = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o2 = _hx_e();
  local _g = 0;
  local _g1 = Reflect.fields(o);
  while (_g < _g1.length) do 
    local f = _g1[_g];
    _g = _g + 1;
    o2[f] = Reflect.field(o, f);
  end;
  do return o2 end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return __lua_lib_luautf8_Utf8.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.prototype.__oldindex(String, s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = __lua_lib_luautf8_Utf8.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return __lua_lib_luautf8_Utf8.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return __lua_lib_luautf8_Utf8.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return __lua_lib_luautf8_Utf8.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.prototype.indexOfEmpty(String, self, startIndex - 1) end;
  end;
  local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.prototype.indexOfEmpty(String, self, startIndex1 - 1);
    else
      local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(delimiter) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(self, delimiter, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(self)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(delimiter);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, __lua_lib_luautf8_Utf8.len(self)));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return __lua_lib_luautf8_Utf8.sub(self, endIndex + 1, startIndex) end;
  else
    do return __lua_lib_luautf8_Utf8.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(self)))) then 
    len = __lua_lib_luautf8_Utf8.len(self);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(self) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(self) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return __lua_lib_luautf8_Utf8.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local sign, numString = _G.string.match(x, "^%s*([%-+]?)0[xX]([%da-fA-F]*)");
  if (numString ~= nil) then 
    if (sign == "-") then 
      do return -_G.tonumber(numString, 16) end;
    else
      do return _G.tonumber(numString, 16) end;
    end;
  end;
  local intMatch = _G.string.match(x, "^%s*[%-+]?%d*");
  if (intMatch == nil) then 
    do return nil end;
  end;
  do return _G.tonumber(intMatch) end;
end

StringTools.new = {}
StringTools.__name__ = true
StringTools.isSpace = function(s,pos) 
  if (((__lua_lib_luautf8_Utf8.len(s) == 0) or (pos < 0)) or (pos >= __lua_lib_luautf8_Utf8.len(s))) then 
    do return false end;
  end;
  local c = __lua_lib_luautf8_Utf8.byte(s, pos + 1);
  if (not ((c > 8) and (c < 14))) then 
    do return c == 32 end;
  else
    do return true end;
  end;
end
StringTools.ltrim = function(s) 
  local l = __lua_lib_luautf8_Utf8.len(s);
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, r)) do 
    r = r + 1;
  end;
  if (r > 0) then 
    local pos = r;
    local len = l - r;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(s)))) then 
      len = __lua_lib_luautf8_Utf8.len(s);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(s) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(s) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return __lua_lib_luautf8_Utf8.sub(s, pos + 1, pos + len) end;
  else
    do return s end;
  end;
end
StringTools.rtrim = function(s) 
  local l = __lua_lib_luautf8_Utf8.len(s);
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, (l - r) - 1)) do 
    r = r + 1;
  end;
  if (r > 0) then 
    local len = l - r;
    if ((len == nil) or (len > __lua_lib_luautf8_Utf8.len(s))) then 
      len = __lua_lib_luautf8_Utf8.len(s);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(s) + len;
      end;
    end;
    do return __lua_lib_luautf8_Utf8.sub(s, 1, len) end;
  else
    do return s end;
  end;
end
StringTools.trim = function(s) 
  do return StringTools.ltrim(StringTools.rtrim(s)) end;
end

Sys.new = {}
Sys.__name__ = true
Sys.time = function() 
  local _hx_1_stamp_seconds, _hx_1_stamp_microseconds = __lua_lib_luv_Misc.gettimeofday();
  do return _hx_1_stamp_seconds + (_hx_1_stamp_microseconds / 1000000) end;
end
_hxClasses["brightness.State"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="InProgress","Ready"},2)}
__brightness_State = _hxClasses["brightness.State"];
__brightness_State.InProgress = function(val) local _x = _hx_tab_array({[0]="InProgress",0,val,__enum__=__brightness_State}, 3); return _x; end 
__brightness_State.Ready = function(val) local _x = _hx_tab_array({[0]="Ready",1,val,__enum__=__brightness_State}, 3); return _x; end 

__sys_io_File.new = {}
__sys_io_File.__name__ = true
__sys_io_File.getContent = function(path) 
  local f = _G.io.open(path, "r");
  if (f == nil) then 
    _G.error(__haxe_Exception.thrown("Invalid path : " .. path),0);
  end;
  local s = f:read("*all");
  f:close();
  do return s end;
end

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__safety_SafetyException.new = function(message,previous,native) 
  local self = _hx_new(__safety_SafetyException.prototype)
  __safety_SafetyException.super(self,message,previous,native)
  return self
end
__safety_SafetyException.super = function(self,message,previous,native) 
  __haxe_Exception.super(self,message,previous,native);
end
__safety_SafetyException.__name__ = true
__safety_SafetyException.prototype = _hx_e();

__safety_SafetyException.prototype.__class__ =  __safety_SafetyException
__safety_SafetyException.__super__ = __haxe_Exception
setmetatable(__safety_SafetyException.prototype,{__index=__haxe_Exception.prototype})

__safety_NullPointerException.new = function(message,previous,native) 
  local self = _hx_new(__safety_NullPointerException.prototype)
  __safety_NullPointerException.super(self,message,previous,native)
  return self
end
__safety_NullPointerException.super = function(self,message,previous,native) 
  __safety_SafetyException.super(self,message,previous,native);
end
__safety_NullPointerException.__name__ = true
__safety_NullPointerException.prototype = _hx_e();

__safety_NullPointerException.prototype.__class__ =  __safety_NullPointerException
__safety_NullPointerException.__super__ = __safety_SafetyException
setmetatable(__safety_NullPointerException.prototype,{__index=__safety_SafetyException.prototype})

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len("\n") > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(_g, "\n", idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(_g)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(_g, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len("\n");
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(_g, idx, __lua_lib_luautf8_Utf8.len(_g)));
        idx = nil;
      end;
    end;
    do return ret:slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__brightness_BrightnessWidget.new = function() 
  local self = _hx_new(__brightness_BrightnessWidget.prototype)
  __brightness_BrightnessWidget.super(self)
  return self
end
__brightness_BrightnessWidget.super = function(self) 
  self.state = __brightness_State.Ready(__brightness_BrightnessWidget.get_percent_brightness());
end
_hx_exports["brightness"]["BrightnessWidget"] = __brightness_BrightnessWidget
__brightness_BrightnessWidget.__name__ = true
__brightness_BrightnessWidget.get_max_brightness = function() 
  local value = Std.parseInt(StringTools.trim(__sys_io_File.getContent(__brightness_BrightnessWidget.MAX_BRIGHTNESS_PATH)));
  if (value == nil) then 
    _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
  else
    do return value end;
  end;
end
__brightness_BrightnessWidget.get_percent_brightness = function() 
  local value = Std.parseInt(StringTools.trim(__sys_io_File.getContent(__brightness_BrightnessWidget.BACKLIGHT_PATH)));
  if (value == nil) then 
    _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
  end;
  do return Std.int((value / __brightness_BrightnessWidget.max) * 100) end;
end
__brightness_BrightnessWidget.prototype = _hx_e();
__brightness_BrightnessWidget.prototype.set_brightness = function(self,percent) 
  local _gthis = self;
  if (not ((percent >= 0) and (percent <= 100))) then 
    do return -1 end;
  end;
  local val = Std.int((percent / 100) * __brightness_BrightnessWidget.max);
  self.state = __brightness_State.InProgress(percent);
  __awful_NativeSpawn.easy_async("sudo bash -c \"echo " .. Std.string(val) .. " >" .. __brightness_BrightnessWidget.BACKLIGHT_PATH .. "\"", function(_) 
    local tmp = __brightness_BrightnessWidget.get_percent_brightness();
    _gthis.state = __brightness_State.Ready(tmp);
  end);
  do return val end
end
__brightness_BrightnessWidget.prototype.makeText = function(self,txt) 
  do return ({widget = __awful_Wibox.widget.textbox, font = __brightness_BrightnessWidget.FONT, text = txt}) end
end
__brightness_BrightnessWidget.prototype.makeSeparator = function(self,thickness) 
  if (thickness == nil) then 
    thickness = 1;
  end;
  do return ({top = 3, bottom = 3, widget = __awful_Wibox.container.margin,({thickness = thickness, forced_width = 5, widget = __awful_Wibox.widget.separator})}) end
end
__brightness_BrightnessWidget.prototype.w = function(self) 
  local txt = " " .. Std.string(__brightness_BrightnessWidget.get_percent_brightness()) .. "%";
  local brightness_text = __awful_Wibox.widget(({widget = __awful_Wibox.widget.textbox, font = __brightness_BrightnessWidget.FONT, text = txt}));
  local brightnessIcon = ({widget = __awful_Wibox.widget.imagebox, image = __brightness_BrightnessWidget.PATH_TO_ICON, resize = false, forced_width = 25});
  self.brightnessWidget = ({layout = __awful_Wibox.layout.fixed.horizontal, forced_width = 85,({top = 5, widget = __awful_Wibox.container.margin,brightnessIcon}),brightness_text});
  self.widget = __awful_Wibox.widget(({widget = __awful_Wibox.layout.align.horizontal, id = "brightness",self.brightnessWidget,({top = 3, bottom = 3, widget = __awful_Wibox.container.margin,({thickness = 1, forced_width = 5, widget = __awful_Wibox.widget.separator})}),__brightness_PowerWidget.getWidget()}));
  local brightness_text = brightness_text;
  local _gthis = self;
  local value = self.widget;
  local tmp;
  if (value == nil) then 
    _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
  else
    tmp = value;
  end;
  tmp:connect_signal("button::press", function(_,_1,_2,button) 
    local percent = __brightness_BrightnessWidget.get_percent_brightness();
    local _g = _gthis.state;
    local tmp = _g[1];
    if (tmp) == 0 then 
      local _g = _g[2];
      do return end;
    elseif (tmp) == 1 then 
      local _g = _g[2];
      local button = button;
      if (button) == 4 then 
        brightness_text:set_text(" " .. Std.string(Math.min(percent + 5, 100)) .. "%");
        _gthis:set_brightness(Math.min(percent + 5, 100));
      elseif (button) == 5 then 
        brightness_text:set_text(" " .. Std.string(Math.max(percent - 5, 0)) .. "%");
        _gthis:set_brightness(Math.max(percent - 5, 0));else end; end;
  end);
  do return self.widget end
end

__brightness_BrightnessWidget.prototype.__class__ =  __brightness_BrightnessWidget

__brightness_PowerWidget.new = {}
__brightness_PowerWidget.__name__ = true
__brightness_PowerWidget.getWidget = function() 
  local power_widget = __awful_Wibox.widget(({color = "#777777", widget = __awful_Wibox.widget.textbox}));
  local short = _hx_tab_array({[0]="5/5", "PERF", "BAT"}, 3);
  local long = _hx_tab_array({[0]="balanced", "performance", "power-saver"}, 3);
  local state = long:indexOf(_G.io.popen("sudo powerprofilesctl get"):read());
  power_widget:set_text(short[state]);
  power_widget:connect_signal("button::press", function(_,_1,_2,button) 
    if (button ~= 1) then 
      do return end;
    end;
    state = state + 1;
    if (state > 2) then 
      state = 0;
    end;
    power_widget:set_text(short[state]);
    __awful_NativeSpawn.easy_async("sudo powerprofilesctl set " .. long[state], function(x) 
    end);
  end);
  do return ({left = 10, widget = __awful_Wibox.container.margin,power_widget}) end;
end

__pkg_PackageBase.new = function() 
  local self = _hx_new(__pkg_PackageBase.prototype)
  __pkg_PackageBase.super(self)
  return self
end
__pkg_PackageBase.super = function(self) 
end
__pkg_PackageBase.__name__ = true
__pkg_PackageBase.prototype = _hx_e();

__pkg_PackageBase.prototype.__class__ =  __pkg_PackageBase

__pkg_PackageDefinition.new = {}
__pkg_PackageDefinition.__name__ = true

__brightness_Pkg.new = function() 
  local self = _hx_new(__brightness_Pkg.prototype)
  __brightness_Pkg.super(self)
  return self
end
__brightness_Pkg.super = function(self) 
  self.widget = nil;
  self.name = "brightness";
  __pkg_PackageBase.super(self);
end
_hx_exports["brightness"]["Pkg"] = __brightness_Pkg
__brightness_Pkg.__name__ = true
__brightness_Pkg.__interfaces__ = {__pkg_PackageDefinition}
__brightness_Pkg.main = function() 
end
__brightness_Pkg.instance = function() 
  do return __brightness_Pkg.new() end;
end
__brightness_Pkg.prototype = _hx_e();
__brightness_Pkg.prototype.get_widget = function(self) 
  local value = self.widget;
  if (value == nil) then 
    _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
  end;
  do return value:w() end
end
__brightness_Pkg.prototype.start = function(self) 
  if (self.widget == nil) then 
    self.widget = __brightness_BrightnessWidget.new();
  end;
end
__brightness_Pkg.prototype.stop = function(self) 
  if (self.widget == nil) then 
    _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
  end;
  self.widget = nil;
end
__brightness_Pkg.prototype.unload = function(self) 
  local _hx_status, _hx_result = pcall(function() 
  
      self:stop();
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  local ret = __log_Log.backgrounds.h["Info"];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  __log_Log.log("BRIGHTNESS(): unload!", _hx_o({__fields__={bg=true,icon=true},bg=ret,icon="" .. __log_Log.res_path .. "/debug2.png"}), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/brightness/Pkg.hx",lineNumber=103,className="brightness.Pkg",methodName="unload"}));
end
__brightness_Pkg.prototype.load = function(self) 
  local ret = __log_Log.backgrounds.h["Info"];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  __log_Log.log("BRIGHTNESS() loaded!", _hx_o({__fields__={bg=true,icon=true},bg=ret,icon="" .. __log_Log.res_path .. "/debug2.png"}), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/brightness/Pkg.hx",lineNumber=107,className="brightness.Pkg",methodName="load"}));
end

__brightness_Pkg.prototype.__class__ =  __brightness_Pkg
__brightness_Pkg.__super__ = __pkg_PackageBase
setmetatable(__brightness_Pkg.prototype,{__index=__pkg_PackageBase.prototype})

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true

__haxe_EntryPoint.new = {}
__haxe_EntryPoint.__name__ = true
__haxe_EntryPoint.processEvents = function() 
  while (true) do 
    local f = __haxe_EntryPoint.pending:shift();
    if (f == nil) then 
      break;
    end;
    f();
  end;
  local time = __haxe_MainLoop.tick();
  if (not __haxe_MainLoop.hasEvents() and (__haxe_EntryPoint.threadCount == 0)) then 
    do return -1 end;
  end;
  do return time end;
end
__haxe_EntryPoint.run = function() 
  while (true) do 
    local nextTick = __haxe_EntryPoint.processEvents();
    if (_hx_luv.loop_alive()) then 
      if (nextTick < 0) then 
        _hx_luv.run("once");
      else
        _hx_luv.run("nowait");
      end;
    else
      if (nextTick < 0) then 
        break;
      end;
      local tmp = nextTick > 0;
    end;
  end;
end

__haxe_MainEvent.new = function(f,p) 
  local self = _hx_new(__haxe_MainEvent.prototype)
  __haxe_MainEvent.super(self,f,p)
  return self
end
__haxe_MainEvent.super = function(self,f,p) 
  self.isBlocking = true;
  self.f = _hx_funcToField(f);
  self.priority = p;
  self.nextRun = -_G.math.huge;
end
__haxe_MainEvent.__name__ = true
__haxe_MainEvent.prototype = _hx_e();

__haxe_MainEvent.prototype.__class__ =  __haxe_MainEvent

__haxe_MainLoop.new = {}
__haxe_MainLoop.__name__ = true
__haxe_MainLoop.hasEvents = function() 
  local p = __haxe_MainLoop.pending;
  while (p ~= nil) do 
    if (p.isBlocking) then 
      do return true end;
    end;
    p = p.next;
  end;
  do return false end;
end
__haxe_MainLoop.sortEvents = function() 
  local list = __haxe_MainLoop.pending;
  if (list == nil) then 
    do return end;
  end;
  local insize = 1;
  local nmerges;
  local psize = 0;
  local qsize = 0;
  local p;
  local q;
  local e;
  local tail;
  while (true) do 
    p = list;
    list = nil;
    tail = nil;
    nmerges = 0;
    while (p ~= nil) do 
      nmerges = nmerges + 1;
      q = p;
      psize = 0;
      local _g = 0;
      local _g1 = insize;
      while (_g < _g1) do 
        _g = _g + 1;
        psize = psize + 1;
        q = q.next;
        if (q == nil) then 
          break;
        end;
      end;
      qsize = insize;
      while ((psize > 0) or ((qsize > 0) and (q ~= nil))) do 
        if (psize == 0) then 
          e = q;
          q = q.next;
          qsize = qsize - 1;
        else
          if (((qsize == 0) or (q == nil)) or ((p.priority > q.priority) or ((p.priority == q.priority) and (p.nextRun <= q.nextRun)))) then 
            e = p;
            p = p.next;
            psize = psize - 1;
          else
            e = q;
            q = q.next;
            qsize = qsize - 1;
          end;
        end;
        if (tail ~= nil) then 
          tail.next = e;
        else
          list = e;
        end;
        e.prev = tail;
        tail = e;
      end;
      p = q;
    end;
    tail.next = nil;
    if (nmerges <= 1) then 
      break;
    end;
    insize = insize * 2;
  end;
  list.prev = nil;
  __haxe_MainLoop.pending = list;
end
__haxe_MainLoop.tick = function() 
  __haxe_MainLoop.sortEvents();
  local e = __haxe_MainLoop.pending;
  local now = Sys.time();
  local wait = 1e9;
  while (e ~= nil) do 
    local next = e.next;
    local wt = e.nextRun - now;
    if (wt <= 0) then 
      wait = 0;
      if (e.f ~= nil) then 
        e:f();
      end;
    else
      if (wait > wt) then 
        wait = wt;
      end;
    end;
    e = next;
  end;
  do return wait end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})
_hxClasses["haxe.ds.Either"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Left","Right"},2)}
__haxe_ds_Either = _hxClasses["haxe.ds.Either"];
__haxe_ds_Either.Left = function(v) local _x = _hx_tab_array({[0]="Left",0,v,__enum__=__haxe_ds_Either}, 3); return _x; end 
__haxe_ds_Either.Right = function(v) local _x = _hx_tab_array({[0]="Right",1,v,__enum__=__haxe_ds_Either}, 3); return _x; end 

__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__log_Log.new = {}
__log_Log.__name__ = true
__log_Log.display = function(s,opts) 
  if (opts == nil) then 
    opts = _hx_e();
  end;
  local value = Reflect.copy(__log_Log.defaults);
  local defs;
  if (value == nil) then 
    _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
  else
    defs = value;
  end;
  local _g = 0;
  local _g1 = Reflect.fields(opts);
  while (_g < _g1.length) do 
    local f = _g1[_g];
    _g = _g + 1;
    defs[f] = Reflect.field(opts, f);
  end;
  defs.text = s;
  __awful_Naughty.notify(defs);
end
__log_Log.formatInfos = function(i) 
  if (i == nil) then 
    do return "    ERROR: no pos info!\n" end;
  else
    local i = i;
    do return _G.table.concat(({"    " .. i.fileName .. ":" .. Std.string(i.lineNumber),"    " .. i.className .. "." .. i.methodName}), "\n") end;
  end;
end
__log_Log.log = function(x,opts,infos) 
  local _hx_continue_1 = false;
  while (true) do repeat 
    if (opts == nil) then 
      opts = _hx_e();
    end;
    local _hx_tmp = (function() 
      local _hx_1
      if (__lua_Boot.__instanceof(x, String)) then 
      _hx_1 = _hx_tab_array({[0]=x}, 1); else 
      _hx_1 = _hx_tab_array({}, 0); end
      return _hx_1
    end )();
    if (_hx_tmp.length == 1) then 
      local s = _hx_tmp[0];
      local infos = __log_Log.formatInfos(infos);
      __log_Log.display("" .. infos .. "\n    -----------------------\n\n" .. s .. "\n", opts);
    else
      x = __lib_Inspect.inspect(x, ({depth = 2}));
      break;
    end;
    do return end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  while (true) do 
    if ((cl1 == nil) or (cl2 == nil)) then 
      do return false end;
    else
      if (cl1 == cl2) then 
        do return true end;
      else
        if (cl1.__interfaces__ ~= nil) then 
          local intf = cl1.__interfaces__;
          local _g = 1;
          local _g1 = _hx_table.maxn(intf) + 1;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
              do return true end;
            end;
          end;
        end;
      end;
    end;
    cl1 = cl1.__super__;
  end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__pkg_PackageManager.new = function() 
  local self = _hx_new(__pkg_PackageManager.prototype)
  __pkg_PackageManager.super(self)
  return self
end
__pkg_PackageManager.super = function(self) 
end
__pkg_PackageManager.__name__ = true
__pkg_PackageManager.prototype = _hx_e();
__pkg_PackageManager.prototype.toString = function(self) 
  do return "<PackageManager>" end
end

__pkg_PackageManager.prototype.__class__ =  __pkg_PackageManager
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;__brightness_BrightnessWidget.FONT = "mono 12";
  
  __brightness_BrightnessWidget.PATH_TO_ICON = "/home/cji/.config/awesome/haxeshigh/res/br-wid-1.png";
  
  __brightness_BrightnessWidget.BACKLIGHT_PATH = "/sys/class/backlight/intel_backlight/brightness";
  
  __brightness_BrightnessWidget.MAX_BRIGHTNESS_PATH = "/sys/class/backlight/intel_backlight/max_brightness";
  
  __brightness_BrightnessWidget.max = __brightness_BrightnessWidget.get_max_brightness();
  
  __haxe_EntryPoint.pending = Array.new();
  
  __haxe_EntryPoint.threadCount = 0;
  
  __haxe_ds_StringMap.tnull = ({});
  
  __log_Log.backgrounds = (function() 
    local _hx_1
    
    local _g = __haxe_ds_StringMap.new();
    
    _g.h.Debug = "#45cf65";
    
    _g.h.Info = "#55aaff";
    
    _g.h.Warn = "#ffff7f";
    
    _g.h.Error = "#b91e1e";
    
    _hx_1 = _g;
    return _hx_1
  end )();
  
  __log_Log.res_path = "/home/cji/priv/awesomescripts/haxeshigh/res";
  
  __log_Log.defaults = _hx_o({__fields__={fg=true,bg=true,font=true,icon=true,width=true,position=true,timeout=true,hover_timeout=true},fg="black",bg="#96413F",font="mono 10",icon="" .. __log_Log.res_path .. "/bang2.png",width=720,position="bottom_right",timeout=12,hover_timeout=0.2});
  
  
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
_G.xpcall(function() 
  __brightness_Pkg.main();
  __haxe_EntryPoint.run();
  _hx_luv.run();
end, _hx_error)
return _hx_exports
