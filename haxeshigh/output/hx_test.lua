-- Generated by Haxe 4.3.0-rc.1
pcall(function () require"luarocks.loader" end)
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length = (type(k) == "number" and k >= len and (k + 1)) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end


function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 15 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj --'"' .. obj .. '"'
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 15 then
                local str = ""
                for i=0, 14 do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. ", " .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. ", ...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. ", " .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    if obj.value then
        _G.print("runtime error:\n " .. _hx_tostring(obj.value));
    else
        _G.print("runtime error:\n " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
local Sys = _hx_e()
local __lua_Boot = _hx_e()
local __lua_lib_luautf8_Utf8 = _G.require("lua-utf8")
local __lua_lib_lrexlib_Rex = _G.require("rex_pcre")
local EReg = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringTools = _hx_e()
local __haxe_io_Output = _hx_e()
local __lua_lib_luv_fs_FileSystem = _G.require("luv")
local __haxe_IMap = _hx_e()
local __haxe_ds_ObjectMap = _hx_e()
local __lua_PairTools = _hx_e()
local Lambda = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local __ext_TableX = _G.require("pl/tablex")
local __haxe_EntryPoint = _hx_e()
local __haxe_Exception = _hx_e()
local __haxe_Json = _hx_e()
local __haxe_Log = _hx_e()
local __haxe_MainEvent = _hx_e()
local __haxe_MainLoop = _hx_e()
local __haxe_NativeStackTrace = _hx_e()
local __haxe_Timer = _hx_e()
local __haxe_ValueException = _hx_e()
local __haxe_ds_StringMap = _hx_e()
local __haxe_exceptions_PosException = _hx_e()
local __haxe_exceptions_NotImplementedException = _hx_e()
local __haxe_io_Bytes = _hx_e()
__haxe_io_Encoding = _hx_e()
__haxe_io_Error = _hx_e()
local __haxe_iterators_ArrayIterator = _hx_e()
local __haxe_iterators_ArrayKeyValueIterator = _hx_e()
local __lib_Prelude = _hx_e()
local __lib_LambdaTools = _hx_e()
local __lib__LuaTable_LuaTable_Impl_ = _hx_e()
local __lib_TableTools = _hx_e()
local __lua_UserData = _hx_e()
local __lua_Lib = _hx_e()
local __lua_Thread = _hx_e()
local __lua_lib_hxluasimdjson_Json = _G.require("hxsimdjson")
local __lua_lib_luv_Misc = _G.require("luv")
local __safety_SafetyException = _hx_e()
local __safety_NullPointerException = _hx_e()
local __sys_io_File = _hx_e()
local __sys_io_FileOutput = _hx_e()
local __test_Test = _hx_e()
local __test_awesome__AwesomeDocExterns_Params_Impl_ = _hx_e()
local __test_awesome_AwesomeDocParser = _hx_e()
local __test_awesome_Extractor = _hx_e()
local __test_awesome_Formatter = _hx_e()
local __test_penlight__PenlightDocExterns_Params_Impl_ = _hx_e()
local __test_penlight_PenlightDocParser = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g1 = 0;
  while (_g1 < a.length) do 
    local i = a[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  while (_g_current < self.length) do 
    _g_current = _g_current + 1;
    _G.table.insert(tbl, Std.string(self[_g_current - 1]));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  self.length = self.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    if (self[_g - 1] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Sys.new = {}
Sys.__name__ = true
Sys.time = function() 
  local _hx_1_stamp_seconds, _hx_1_stamp_microseconds = __lua_lib_luv_Misc.gettimeofday();
  do return _hx_1_stamp_seconds + (_hx_1_stamp_microseconds / 1000000) end;
end

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  while (true) do 
    if ((cl1 == nil) or (cl2 == nil)) then 
      do return false end;
    else
      if (cl1 == cl2) then 
        do return true end;
      else
        if (cl1.__interfaces__ ~= nil) then 
          local intf = cl1.__interfaces__;
          local _g = 1;
          local _g1 = _hx_table.maxn(intf) + 1;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
              do return true end;
            end;
          end;
        end;
      end;
    end;
    cl1 = cl1.__super__;
  end;
end

EReg.new = function(r,opt) 
  local self = _hx_new(EReg.prototype)
  EReg.super(self,r,opt)
  return self
end
EReg.super = function(self,r,opt) 
  local ropt = 0;
  local _g = 0;
  local _g1 = __lua_lib_luautf8_Utf8.len(opt);
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local _g = __lua_lib_luautf8_Utf8.sub(opt, i + 1, i + 1);
    if (_g) == "g" then 
      self.global = true;
    elseif (_g) == "i" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.CASELESS);
    elseif (_g) == "m" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.MULTILINE);
    elseif (_g) == "s" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.DOTALL);else end;
  end;
  ropt = _hx_bit.bor(ropt,EReg.FLAGS.UTF8);
  ropt = _hx_bit.bor(ropt,EReg.FLAGS.UCP);
  if (self.global == nil) then 
    self.global = false;
  end;
  self.r = __lua_lib_lrexlib_Rex.new(r, ropt);
end
EReg.__name__ = true
EReg.prototype = _hx_e();
EReg.prototype.match = function(self,s) 
  if (s == nil) then 
    do return false end;
  else
    self.m = _hx_table.pack(self.r:exec(s, 1));
    self.s = s;
    do return self.m[1] ~= nil end;
  end;
end
EReg.prototype.matched = function(self,n) 
  if ((self.m[1] == nil) or (n < 0)) then 
    _G.error(__haxe_Exception.thrown("EReg::matched"),0);
  else
    if (n == 0) then 
      local k = _G.string.sub(self.s, self.m[1], self.m[2]);
      do return k end;
    else
      if (__lua_Boot.__instanceof(self.m[3], _G.table)) then 
        local mn = 2 * (n - 1);
        if (__lua_Boot.__instanceof(self.m[3][mn + 1], Bool)) then 
          do return nil end;
        end;
        do return _G.string.sub(self.s, self.m[3][mn + 1], self.m[3][mn + 2]) end;
      else
        _G.error(__haxe_Exception.thrown("EReg:matched"),0);
      end;
    end;
  end;
end
EReg.prototype.replace = function(self,s,by) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len("$$") > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(by, "$$", idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(by)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(by, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len("$$");
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(by, idx, __lua_lib_luautf8_Utf8.len(by)));
      idx = nil;
    end;
  end;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < ret.length) do 
    local chunk = ret[_g1];
    _g1 = _g1 + 1;
    _g:push(__lua_lib_lrexlib_Rex.gsub(chunk, "\\$(\\d)", "%%%1", 1));
  end;
  by = _g:join("$");
  do return __lua_lib_lrexlib_Rex.gsub(s, self.r, by, (function() 
    local _hx_1
    if (self.global) then 
    _hx_1 = nil; else 
    _hx_1 = 1; end
    return _hx_1
  end )()) end
end

EReg.prototype.__class__ =  EReg

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return __lua_lib_luautf8_Utf8.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.prototype.__oldindex(String, s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = __lua_lib_luautf8_Utf8.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return __lua_lib_luautf8_Utf8.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return __lua_lib_luautf8_Utf8.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return __lua_lib_luautf8_Utf8.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.prototype.indexOfEmpty(String, self, startIndex - 1) end;
  end;
  local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.prototype.indexOfEmpty(String, self, startIndex1 - 1);
    else
      local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(delimiter) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(self, delimiter, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(self)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(delimiter);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, __lua_lib_luautf8_Utf8.len(self)));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return __lua_lib_luautf8_Utf8.sub(self, endIndex + 1, startIndex) end;
  else
    do return __lua_lib_luautf8_Utf8.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(self)))) then 
    len = __lua_lib_luautf8_Utf8.len(self);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(self) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(self) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return __lua_lib_luautf8_Utf8.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local sign, numString = _G.string.match(x, "^%s*([%-+]?)0[xX]([%da-fA-F]*)");
  if (numString ~= nil) then 
    if (sign == "-") then 
      do return -_G.tonumber(numString, 16) end;
    else
      do return _G.tonumber(numString, 16) end;
    end;
  end;
  local intMatch = _G.string.match(x, "^%s*[%-+]?%d*");
  if (intMatch == nil) then 
    do return nil end;
  end;
  do return _G.tonumber(intMatch) end;
end

StringTools.new = {}
StringTools.__name__ = true
StringTools.isSpace = function(s,pos) 
  if (((__lua_lib_luautf8_Utf8.len(s) == 0) or (pos < 0)) or (pos >= __lua_lib_luautf8_Utf8.len(s))) then 
    do return false end;
  end;
  local c = __lua_lib_luautf8_Utf8.byte(s, pos + 1);
  if (not ((c > 8) and (c < 14))) then 
    do return c == 32 end;
  else
    do return true end;
  end;
end
StringTools.ltrim = function(s) 
  local l = __lua_lib_luautf8_Utf8.len(s);
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, r)) do 
    r = r + 1;
  end;
  if (r > 0) then 
    local pos = r;
    local len = l - r;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(s)))) then 
      len = __lua_lib_luautf8_Utf8.len(s);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(s) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(s) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return __lua_lib_luautf8_Utf8.sub(s, pos + 1, pos + len) end;
  else
    do return s end;
  end;
end
StringTools.rtrim = function(s) 
  local l = __lua_lib_luautf8_Utf8.len(s);
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, (l - r) - 1)) do 
    r = r + 1;
  end;
  if (r > 0) then 
    local len = l - r;
    if ((len == nil) or (len > __lua_lib_luautf8_Utf8.len(s))) then 
      len = __lua_lib_luautf8_Utf8.len(s);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(s) + len;
      end;
    end;
    do return __lua_lib_luautf8_Utf8.sub(s, 1, len) end;
  else
    do return s end;
  end;
end
StringTools.trim = function(s) 
  do return StringTools.ltrim(StringTools.rtrim(s)) end;
end
StringTools.replace = function(s,sub,by) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(sub) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(s, sub, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(s)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(s, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(sub);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(s, idx, __lua_lib_luautf8_Utf8.len(s)));
      idx = nil;
    end;
  end;
  do return ret:join(by) end;
end

__haxe_io_Output.new = {}
__haxe_io_Output.__name__ = true
__haxe_io_Output.prototype = _hx_e();
__haxe_io_Output.prototype.writeByte = function(self,c) 
  _G.error(__haxe_exceptions_NotImplementedException.new(nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="haxe/io/Output.hx",lineNumber=47,className="haxe.io.Output",methodName="writeByte"})),0);
end
__haxe_io_Output.prototype.writeBytes = function(self,s,pos,len) 
  if (((pos < 0) or (len < 0)) or ((pos + len) > s.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  local b = s.b;
  local k = len;
  while (k > 0) do 
    self:writeByte(b[pos]);
    pos = pos + 1;
    k = k - 1;
  end;
  do return len end
end
__haxe_io_Output.prototype.writeFullBytes = function(self,s,pos,len) 
  while (len > 0) do 
    local k = self:writeBytes(s, pos, len);
    pos = pos + k;
    len = len - k;
  end;
end
__haxe_io_Output.prototype.writeString = function(self,s,encoding) 
  local b = __haxe_io_Bytes.ofString(s, encoding);
  self:writeFullBytes(b, 0, b.length);
end

__haxe_io_Output.prototype.__class__ =  __haxe_io_Output

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true
__haxe_IMap.prototype = _hx_e();

__haxe_IMap.prototype.__class__ =  __haxe_IMap

__haxe_ds_ObjectMap.new = function() 
  local self = _hx_new(__haxe_ds_ObjectMap.prototype)
  __haxe_ds_ObjectMap.super(self)
  return self
end
__haxe_ds_ObjectMap.super = function(self) 
  self.h = ({});
  self.k = ({});
end
__haxe_ds_ObjectMap.__name__ = true
__haxe_ds_ObjectMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_ObjectMap.prototype = _hx_e();
__haxe_ds_ObjectMap.prototype.keys = function(self) 
  local _gthis = self;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.k, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_ObjectMap.prototype.__class__ =  __haxe_ds_ObjectMap

__lua_PairTools.new = {}
__lua_PairTools.__name__ = true
__lua_PairTools.pairsFold = function(table,func,seed) 
  for k,v in _G.pairs(table) do seed = func(k,v,seed) end;
  do return seed end;
end
__lua_PairTools.copy = function(table1) 
  local ret = ({});
  for k,v in _G.pairs(table1) do ret[k] = v end;
  do return ret end;
end

Lambda.new = {}
Lambda.__name__ = true
Lambda.array = function(it) 
  local a = Array.new();
  local i = it:iterator();
  while (i:hasNext()) do 
    a:push(i:next());
  end;
  do return a end;
end
Lambda.has = function(it,elt) 
  local x = it:iterator();
  while (x:hasNext()) do 
    if (x:next() == elt) then 
      do return true end;
    end;
  end;
  do return false end;
end

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.__name__ = true
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.fields = function(o) 
  local _hx_continue_1 = false;
  while (true) do repeat 
    if (_G.type(o) == "string") then 
      o = String.prototype;
      break;
    else
      do return _hx_field_arr(o) end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
Reflect.compare = function(a,b) 
  if (a == b) then 
    do return 0 end;
  else
    if (a == nil) then 
      do return -1 end;
    else
      if (b == nil) then 
        do return 1 end;
      else
        if (a > b) then 
          do return 1 end;
        else
          do return -1 end;
        end;
      end;
    end;
  end;
end
Reflect.copy = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o2 = _hx_e();
  local _g = 0;
  local _g1 = Reflect.fields(o);
  while (_g < _g1.length) do 
    local f = _g1[_g];
    _g = _g + 1;
    o2[f] = Reflect.field(o, f);
  end;
  do return o2 end;
end

__haxe_EntryPoint.new = {}
__haxe_EntryPoint.__name__ = true
__haxe_EntryPoint.processEvents = function() 
  while (true) do 
    local f = __haxe_EntryPoint.pending:shift();
    if (f == nil) then 
      break;
    end;
    f();
  end;
  local time = __haxe_MainLoop.tick();
  if (not __haxe_MainLoop.hasEvents() and (__haxe_EntryPoint.threadCount == 0)) then 
    do return -1 end;
  end;
  do return time end;
end
__haxe_EntryPoint.run = function() 
  while (true) do 
    local nextTick = __haxe_EntryPoint.processEvents();
    if (_hx_luv.loop_alive()) then 
      if (nextTick < 0) then 
        _hx_luv.run("once");
      else
        _hx_luv.run("nowait");
      end;
    else
      if (nextTick < 0) then 
        break;
      end;
      local tmp = nextTick > 0;
    end;
  end;
end

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Json.new = {}
__haxe_Json.__name__ = true
__haxe_Json.parse = function(text) 
  do return __lua_lib_hxluasimdjson_Json.parse(text) end;
end

__haxe_Log.new = {}
__haxe_Log.__name__ = true
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = infos.fileName .. ":" .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do 
      local v = _g1[_g];
      _g = _g + 1;
      str = str .. (", " .. Std.string(v));
    end;
  end;
  do return pstr .. ": " .. str end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_MainEvent.new = function(f,p) 
  local self = _hx_new(__haxe_MainEvent.prototype)
  __haxe_MainEvent.super(self,f,p)
  return self
end
__haxe_MainEvent.super = function(self,f,p) 
  self.isBlocking = true;
  self.f = _hx_funcToField(f);
  self.priority = p;
  self.nextRun = -_G.math.huge;
end
__haxe_MainEvent.__name__ = true
__haxe_MainEvent.prototype = _hx_e();

__haxe_MainEvent.prototype.__class__ =  __haxe_MainEvent

__haxe_MainLoop.new = {}
__haxe_MainLoop.__name__ = true
__haxe_MainLoop.hasEvents = function() 
  local p = __haxe_MainLoop.pending;
  while (p ~= nil) do 
    if (p.isBlocking) then 
      do return true end;
    end;
    p = p.next;
  end;
  do return false end;
end
__haxe_MainLoop.sortEvents = function() 
  local list = __haxe_MainLoop.pending;
  if (list == nil) then 
    do return end;
  end;
  local insize = 1;
  local nmerges;
  local psize = 0;
  local qsize = 0;
  local p;
  local q;
  local e;
  local tail;
  while (true) do 
    p = list;
    list = nil;
    tail = nil;
    nmerges = 0;
    while (p ~= nil) do 
      nmerges = nmerges + 1;
      q = p;
      psize = 0;
      local _g = 0;
      local _g1 = insize;
      while (_g < _g1) do 
        _g = _g + 1;
        psize = psize + 1;
        q = q.next;
        if (q == nil) then 
          break;
        end;
      end;
      qsize = insize;
      while ((psize > 0) or ((qsize > 0) and (q ~= nil))) do 
        if (psize == 0) then 
          e = q;
          q = q.next;
          qsize = qsize - 1;
        else
          if (((qsize == 0) or (q == nil)) or ((p.priority > q.priority) or ((p.priority == q.priority) and (p.nextRun <= q.nextRun)))) then 
            e = p;
            p = p.next;
            psize = psize - 1;
          else
            e = q;
            q = q.next;
            qsize = qsize - 1;
          end;
        end;
        if (tail ~= nil) then 
          tail.next = e;
        else
          list = e;
        end;
        e.prev = tail;
        tail = e;
      end;
      p = q;
    end;
    tail.next = nil;
    if (nmerges <= 1) then 
      break;
    end;
    insize = insize * 2;
  end;
  list.prev = nil;
  __haxe_MainLoop.pending = list;
end
__haxe_MainLoop.tick = function() 
  __haxe_MainLoop.sortEvents();
  local e = __haxe_MainLoop.pending;
  local now = Sys.time();
  local wait = 1e9;
  while (e ~= nil) do 
    local next = e.next;
    local wt = e.nextRun - now;
    if (wt <= 0) then 
      wait = 0;
      if (e.f ~= nil) then 
        e:f();
      end;
    else
      if (wait > wt) then 
        wait = wt;
      end;
    end;
    e = next;
  end;
  do return wait end;
end

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len("\n") > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(_g, "\n", idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(_g)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(_g, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len("\n");
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(_g, idx, __lua_lib_luautf8_Utf8.len(_g)));
        idx = nil;
      end;
    end;
    do return ret:slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_Timer.new = {}
__haxe_Timer.__name__ = true
__haxe_Timer.measure = function(f,pos) 
  local t0 = Sys.time();
  local r = f();
  __haxe_Log.trace(Std.string(Sys.time() - t0) .. "s", pos);
  do return r end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})

__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = true
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return "" .. __haxe_Exception.prototype.toString(self) .. " in " .. self.posInfos.className .. "." .. self.posInfos.methodName .. " at " .. self.posInfos.fileName .. ":" .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = true
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})

__haxe_io_Bytes.new = function(length,b) 
  local self = _hx_new(__haxe_io_Bytes.prototype)
  __haxe_io_Bytes.super(self,length,b)
  return self
end
__haxe_io_Bytes.super = function(self,length,b) 
  self.length = length;
  self.b = b;
end
__haxe_io_Bytes.__name__ = true
__haxe_io_Bytes.ofString = function(s,encoding) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = _G.string.len(s);
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    _g:push(_G.string.byte(s, (_g1 - 1) + 1));
  end;
  do return __haxe_io_Bytes.new(_g.length, _g) end;
end
__haxe_io_Bytes.prototype = _hx_e();
__haxe_io_Bytes.prototype.getString = function(self,pos,len,encoding) 
  local tmp = encoding == nil;
  if (((pos < 0) or (len < 0)) or ((pos + len) > self.length)) then 
    _G.error(__haxe_Exception.thrown(__haxe_io_Error.OutsideBounds),0);
  end;
  if ((self.b.length - pos) <= __lua_Boot.MAXSTACKSIZE) then 
    local _end = Math.min(self.b.length, pos + len) - 1;
    do return _G.string.char(_hx_table.unpack(self.b, pos, _end)) end;
  else
    local tbl = ({});
    local _g = pos;
    local _g1 = pos + len;
    while (_g < _g1) do 
      _g = _g + 1;
      local idx = _g - 1;
      _G.table.insert(tbl, _G.string.char(self.b[idx]));
    end;
    do return _G.table.concat(tbl, "") end;
  end;
end

__haxe_io_Bytes.prototype.__class__ =  __haxe_io_Bytes
_hxClasses["haxe.io.Encoding"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="UTF8","RawNative"},2)}
__haxe_io_Encoding = _hxClasses["haxe.io.Encoding"];
__haxe_io_Encoding.UTF8 = _hx_tab_array({[0]="UTF8",0,__enum__ = __haxe_io_Encoding},2)

__haxe_io_Encoding.RawNative = _hx_tab_array({[0]="RawNative",1,__enum__ = __haxe_io_Encoding},2)

_hxClasses["haxe.io.Error"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Blocked","Overflow","OutsideBounds","Custom"},4)}
__haxe_io_Error = _hxClasses["haxe.io.Error"];
__haxe_io_Error.Blocked = _hx_tab_array({[0]="Blocked",0,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Overflow = _hx_tab_array({[0]="Overflow",1,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.OutsideBounds = _hx_tab_array({[0]="OutsideBounds",2,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Custom = function(e) local _x = _hx_tab_array({[0]="Custom",3,e,__enum__=__haxe_io_Error}, 3); return _x; end 

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__lib_Prelude.new = {}
__lib_Prelude.__name__ = true
__lib_Prelude.println = function(x) 
  _G.print(x);
end

__lib_LambdaTools.new = {}
__lib_LambdaTools.__name__ = true
__lib_LambdaTools["not"] = function(b) 
  do return not b end;
end
__lib_LambdaTools.capitalize = function(s) 
  local len = 1;
  if (1 > __lua_lib_luautf8_Utf8.len(s)) then 
    len = __lua_lib_luautf8_Utf8.len(s);
  end;
  local tmp = __lua_lib_luautf8_Utf8.upper(__lua_lib_luautf8_Utf8.sub(s, 1, len));
  local len = nil;
  len = __lua_lib_luautf8_Utf8.len(s);
  do return tmp .. __lua_lib_luautf8_Utf8.sub(s, 2, 1 + len) end;
end
__lib_LambdaTools.last = function(it) 
  local arr = Lambda.array(it);
  do return arr[arr.length - 1] end;
end
__lib_LambdaTools.dropRight = function(it,n) 
  if (n == nil) then 
    n = 1;
  end;
  local arr = Lambda.array(it);
  arr:resize(arr.length - n);
  do return arr end;
end

__lib__LuaTable_LuaTable_Impl_.new = {}
__lib__LuaTable_LuaTable_Impl_.__name__ = true
__lib__LuaTable_LuaTable_Impl_.arrayRead = function(this1,n) 
  do return this1[n] end;
end

__lib_TableTools.new = {}
__lib_TableTools.__name__ = true
__lib_TableTools.keys = function(table) 
  local obj = __haxe_ds_ObjectMap.new();
  __lua_PairTools.pairsFold(table, function(k,v,m) 
    obj.h[k] = v;
    obj.k[k] = true;
    do return obj end;
  end, obj);
  do return obj:keys() end;
end
__lib_TableTools.numericKeys = function(table) 
  local it = __lib_TableTools.keys(table);
  local _g = _hx_tab_array({}, 0);
  while (it:hasNext()) do 
    _g:push(it:next());
  end;
  local _g1 = _hx_tab_array({}, 0);
  local _g2 = 0;
  while (_g2 < _g.length) do 
    local i = _g[_g2];
    _g2 = _g2 + 1;
    if (Std.parseInt(i) ~= nil) then 
      _g1:push(i);
    end;
  end;
  local _g = _hx_tab_array({}, 0);
  local _g2 = 0;
  while (_g2 < _g1.length) do 
    local i = _g1[_g2];
    _g2 = _g2 + 1;
    local value = Std.parseInt(i);
    if (value == nil) then 
      _G.error(__safety_NullPointerException.new("Null pointer in .sure() call"),0);
    end;
    _g:push(value);
  end;
  _g:sort(Reflect.compare);
  local f = Std.string;
  local _g1 = _hx_tab_array({}, 0);
  local _g2 = 0;
  while (_g2 < _g.length) do 
    local i = _g[_g2];
    _g2 = _g2 + 1;
    _g1:push(f(i));
  end;
  do return _g1 end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Lib.new = {}
__lua_Lib.__name__ = true
__lua_Lib.fillArray = function(itr) 
  local i = nil;
  local ret = _hx_tab_array({}, 0);
  while (true) do 
    i = itr();
    if (not (i ~= nil)) then 
      break;
    end;
    ret:push(i);
  end;
  do return ret end;
end

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__safety_SafetyException.new = function(message,previous,native) 
  local self = _hx_new(__safety_SafetyException.prototype)
  __safety_SafetyException.super(self,message,previous,native)
  return self
end
__safety_SafetyException.super = function(self,message,previous,native) 
  __haxe_Exception.super(self,message,previous,native);
end
__safety_SafetyException.__name__ = true
__safety_SafetyException.prototype = _hx_e();

__safety_SafetyException.prototype.__class__ =  __safety_SafetyException
__safety_SafetyException.__super__ = __haxe_Exception
setmetatable(__safety_SafetyException.prototype,{__index=__haxe_Exception.prototype})

__safety_NullPointerException.new = function(message,previous,native) 
  local self = _hx_new(__safety_NullPointerException.prototype)
  __safety_NullPointerException.super(self,message,previous,native)
  return self
end
__safety_NullPointerException.super = function(self,message,previous,native) 
  __safety_SafetyException.super(self,message,previous,native);
end
__safety_NullPointerException.__name__ = true
__safety_NullPointerException.prototype = _hx_e();

__safety_NullPointerException.prototype.__class__ =  __safety_NullPointerException
__safety_NullPointerException.__super__ = __safety_SafetyException
setmetatable(__safety_NullPointerException.prototype,{__index=__safety_SafetyException.prototype})

__sys_io_File.new = {}
__sys_io_File.__name__ = true
__sys_io_File.getContent = function(path) 
  local f = _G.io.open(path, "r");
  if (f == nil) then 
    _G.error(__haxe_Exception.thrown("Invalid path : " .. path),0);
  end;
  local s = f:read("*all");
  f:close();
  do return s end;
end
__sys_io_File.write = function(path,binary) 
  if (binary == nil) then 
    binary = true;
  end;
  local fh = _G.io.open(path, (function() 
    local _hx_1
    if (binary) then 
    _hx_1 = "wb"; else 
    _hx_1 = "w"; end
    return _hx_1
  end )());
  if (fh == nil) then 
    _G.error(__haxe_Exception.thrown("Invalid path : " .. path),0);
  end;
  do return __sys_io_FileOutput.new(fh) end;
end

__sys_io_FileOutput.new = function(f) 
  local self = _hx_new(__sys_io_FileOutput.prototype)
  __sys_io_FileOutput.super(self,f)
  return self
end
__sys_io_FileOutput.super = function(self,f) 
  if (f == nil) then 
    _G.error(__haxe_Exception.thrown("Invalid filehandle : " .. Std.string(f)),0);
  end;
  self.f = f;
end
__sys_io_FileOutput.__name__ = true
__sys_io_FileOutput.prototype = _hx_e();
__sys_io_FileOutput.prototype.writeByte = function(self,c) 
  self.f:write(__lua_lib_luautf8_Utf8.char(c));
end
__sys_io_FileOutput.prototype.writeBytes = function(self,s,pos,len) 
  self.f:write(s:getString(pos, len));
  do return s.length end
end

__sys_io_FileOutput.prototype.__class__ =  __sys_io_FileOutput
__sys_io_FileOutput.__super__ = __haxe_io_Output
setmetatable(__sys_io_FileOutput.prototype,{__index=__haxe_io_Output.prototype})

__test_Test.new = {}
__test_Test.__name__ = true
__test_Test.main = function() 
  local xx = 3;
  local arr = _G.arg;
  local _g;
  if (arr == nil) then 
    _g = _hx_tab_array({}, 0);
  else
    local length = nil;
    local tab = __lua_PairTools.copy(arr);
    local length = length;
    local args;
    if (length == nil) then 
      length = _hx_table.maxn(tab);
      if (length > 0) then 
        local head = tab[1];
        _G.table.remove(tab, 1);
        tab[0] = head;
        args = _hx_tab_array(tab, length);
      else
        args = _hx_tab_array({}, 0);
      end;
    else
      args = _hx_tab_array(tab, length);
    end;
    _g = args;
  end;
  if (_g.length == 1) then 
    local _g = _g[0];
    if (_g) == "-awesome" then 
      __test_awesome_AwesomeDocParser.parse();
    elseif (_g) == "-macro" then 
      __haxe_Log.trace(nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/test/Test.hx",lineNumber=74,className="test.Test",methodName="main"}));
    elseif (_g) == "-penlight" then 
      __haxe_Log.trace(__ext_TableX.size(({})), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/test/Test.hx",lineNumber=82,className="test.Test",methodName="main"}));
      __test_penlight_PenlightDocParser.parse();
    elseif (_g) == "-timeit" then 
      __haxe_Timer.measure(function() 
        local _g = 0;
        while (_g < 1000) do 
          _g = _g + 1;
          local x = _g - 1;
          if (xx ~= nil) then 
            local i = xx;
            __lib_Prelude.println(i);
          end;
        end;
      end, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/test/Test.hx",lineNumber=75,className="test.Test",methodName="main"}));else
    __haxe_Log.trace("Bad arg", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/test/Test.hx",lineNumber=85,className="test.Test",methodName="main"})); end;
  else
    __haxe_Log.trace("Bad arg", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/test/Test.hx",lineNumber=85,className="test.Test",methodName="main"}));
  end;
end

__test_awesome__AwesomeDocExterns_Params_Impl_.new = {}
__test_awesome__AwesomeDocExterns_Params_Impl_.__name__ = true
__test_awesome__AwesomeDocExterns_Params_Impl_.get_map = function(this1) 
  do return this1.map end;
end
__test_awesome__AwesomeDocExterns_Params_Impl_.fieldRead = function(this1,name) 
  do return this1[name] end;
end

__test_awesome_AwesomeDocParser.new = {}
__test_awesome_AwesomeDocParser.__name__ = true
__test_awesome_AwesomeDocParser.getJson = function(fname) 
  do return __haxe_Json.parse(__sys_io_File.getContent("/home/cji/priv/awesomescripts/haxeshigh/" .. "/api/" .. fname .. ".json")) end;
end
__test_awesome_AwesomeDocParser.parse = function() 
  local scandir = __lua_lib_luv_fs_FileSystem.fs_scandir("api");
  local itr = function() 
    local next = __lua_lib_luv_fs_FileSystem.fs_scandir_next(scandir);
    do return next end;
  end;
  local _this = __lua_Lib.fillArray(itr);
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < _this.length) do 
    local i = _this[_g1];
    _g1 = _g1 + 1;
    if (not EReg.new("^[0-9]", ""):match(i)) then 
      _g:push(i);
    end;
  end;
  local _g1 = _hx_tab_array({}, 0);
  local _g2 = 0;
  while (_g2 < _g.length) do 
    local i = _g[_g2];
    _g2 = _g2 + 1;
    _g1:push(StringTools.replace(i, ".json", ""));
  end;
  local _g = 0;
  while (_g < _g1.length) do 
    local f = _g1[_g];
    _g = _g + 1;
    __test_awesome_AwesomeDocParser.parseFile(f);
  end;
end
__test_awesome_AwesomeDocParser.parseFile = function(fname) 
  local json;
  local _hx_status, _hx_result = pcall(function() 
  
      json = __test_awesome_AwesomeDocParser.getJson(fname);
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    __haxe_Log.trace("Invalid json: " .. fname, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/test/awesome/AwesomeDocParser.hx",lineNumber=37,className="test.awesome.AwesomeDocParser",methodName="parseFile"}));
    do return end;
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
  local fmt = __test_awesome_Formatter.new(json);
  local file = __sys_io_File.write("out/" .. fmt.outputPath);
  local println = function(str) 
    file:writeString(str .. "\n");
  end;
  println(fmt:formatClass(json));
  local _this = json.items;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < _this.length) do 
    local i = _this[_g1];
    _g1 = _g1 + 1;
    if (i.type == "property") then 
      _g:push(i);
    end;
  end;
  local _g1 = 0;
  while (_g1 < _g.length) do 
    local i = _g[_g1];
    _g1 = _g1 + 1;
    println(fmt:formatField(i));
  end;
  local _this = json.items;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < _this.length) do 
    local i = _this[_g1];
    _g1 = _g1 + 1;
    if (i.type == "constructorfct") then 
      _g:push(i);
    end;
  end;
  local f = Reflect.copy;
  local _g1 = _hx_tab_array({}, 0);
  local _g2 = 0;
  while (_g2 < _g.length) do 
    local i = _g[_g2];
    _g2 = _g2 + 1;
    _g1:push(f(i));
  end;
  if (_g1.length > 1) then 
    local _g = 0;
    while (_g < _g1.length) do 
      local x = _g1[_g];
      _g = _g + 1;
      x.type = "staticfct";
    end;
  end;
  local _g = 0;
  while (_g < _g1.length) do 
    local i = _g1[_g];
    _g = _g + 1;
    println(fmt:formatMethod(i));
  end;
  local _this = json.items;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < _this.length) do 
    local i = _this[_g1];
    _g1 = _g1 + 1;
    if (i.type == "method") then 
      _g:push(i);
    end;
  end;
  local _g1 = 0;
  while (_g1 < _g.length) do 
    local i = _g[_g1];
    _g1 = _g1 + 1;
    println(fmt:formatMethod(i));
  end;
  local _this = json.items;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < _this.length) do 
    local i = _this[_g1];
    _g1 = _g1 + 1;
    if (i.type == "function") then 
      _g:push(i);
    end;
  end;
  local _g1 = 0;
  while (_g1 < _g.length) do 
    local i = _g[_g1];
    _g1 = _g1 + 1;
    println(fmt:formatMethod(i));
  end;
  local _this = json.items;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < _this.length) do 
    local i = _this[_g1];
    _g1 = _g1 + 1;
    if (i.type == "staticfct") then 
      _g:push(i);
    end;
  end;
  local _g1 = 0;
  while (_g1 < _g.length) do 
    local i = _g[_g1];
    _g1 = _g1 + 1;
    println(fmt:formatMethod(i));
  end;
  println("}");
end

__test_awesome_Extractor.new = {}
__test_awesome_Extractor.__name__ = true
__test_awesome_Extractor.getMethodData = function(item) 
  local params = item.params;
  local args = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = __lib_TableTools.numericKeys(params);
  while (_g < _g1.length) do 
    local arg = _g1[_g];
    _g = _g + 1;
    local argName = __test_awesome__AwesomeDocExterns_Params_Impl_.fieldRead(params, arg);
    local argMods = __lib__LuaTable_LuaTable_Impl_.arrayRead(item.modifiers.param, argName);
    local ret = __test_awesome_Extractor.argMap.h[argName];
    local tmp = (function() 
      local _hx_1
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_1 = nil; else 
      _hx_1 = ret; end
      return _hx_1
    end )();
    args:push(_hx_o({__fields__={argName=true,argDoc=true,typeName=true},argName=(function() 
      local _hx_2
      if (tmp ~= nil) then 
      _hx_2 = tmp; else 
      _hx_2 = argName; end
      return _hx_2
    end )(),argDoc=__lib__LuaTable_LuaTable_Impl_.arrayRead(__test_awesome__AwesomeDocExterns_Params_Impl_.get_map(params), argName),typeName=__test_awesome_Extractor.formatType((function() 
      local _hx_3
      if (argMods == nil) then 
      _hx_3 = nil; else 
      _hx_3 = __lib__LuaTable_LuaTable_Impl_.arrayRead(argMods, "type"); end
      return _hx_3
    end )())}));
  end;
  local tmp = item.modifiers;
  local retType;
  if (tmp ~= nil) then 
    local value = tmp["return"];
    local value = (function() 
      local _hx_4
      if (value == nil) then 
      _hx_4 = nil; else 
      _hx_4 = value[0]; end
      return _hx_4
    end )();
    retType = (function() 
      local _hx_5
      if (value == nil) then 
      _hx_5 = nil; else 
      _hx_5 = value.type; end
      return _hx_5
    end )();
  else
    retType = nil;
  end;
  local methodName = __test_awesome_Extractor.sanitizeName(item.name);
  local isConstructor = item.type == "constructorfct";
  local ret = __test_awesome_Extractor.kindMap.h[item.type];
  local tmp = (function() 
    local _hx_6
    if (ret == __haxe_ds_StringMap.tnull) then 
    _hx_6 = nil; else 
    _hx_6 = ret; end
    return _hx_6
  end )();
  do return _hx_o({__fields__={args=true,name=true,summary=true,retType=true,kind=true,line=true,isConstructor=true},args=args,name=(function() 
    local _hx_7
    if (isConstructor) then 
    _hx_7 = "new"; else 
    _hx_7 = methodName; end
    return _hx_7
  end )(),summary=item.summary,retType=(function() 
    local _hx_8
    if (isConstructor) then 
    _hx_8 = nil; else 
    _hx_8 = retType; end
    return _hx_8
  end )(),kind=(function() 
    local _hx_9
    if (tmp ~= nil) then 
    _hx_9 = tmp; else 
    _hx_9 = ""; end
    return _hx_9
  end )(),line=item.lineno,isConstructor=isConstructor}) end;
end
__test_awesome_Extractor.sanitizeName = function(name) 
  local re = EReg.new("[.:]", "");
  local sep = (function() 
    local _hx_1
    if (re:match(name)) then 
    _hx_1 = re:matched(0); else 
    _hx_1 = nil; end
    return _hx_1
  end )();
  if (sep == nil) then 
    do return name end;
  else
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len(sep) > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(name, sep, idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(name)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(name, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len(sep);
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(name, idx, __lua_lib_luautf8_Utf8.len(name)));
        idx = nil;
      end;
    end;
    do return __lib_LambdaTools.last(ret) end;
  end;
end
__test_awesome_Extractor.getFieldData = function(item) 
  local params = item.params;
  local args = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = __lib_TableTools.numericKeys(params);
  while (_g < _g1.length) do 
    local arg = _g1[_g];
    _g = _g + 1;
    local argName = __test_awesome__AwesomeDocExterns_Params_Impl_.fieldRead(params, arg);
    local argMods = __lib__LuaTable_LuaTable_Impl_.arrayRead(item.modifiers.field, "1");
    local tt = __test_awesome_Extractor.formatType(__test_awesome__AwesomeDocExterns_Params_Impl_.fieldRead(item.params, "1"));
    local typeName = (function() 
      local _hx_1
      if (EReg.new("^[A-Z]", ""):match(tt)) then 
      _hx_1 = tt; else 
      _hx_1 = argMods.type; end
      return _hx_1
    end )();
    local ret = __test_awesome_Extractor.argMap.h[argName];
    local tmp = (function() 
      local _hx_2
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_2 = nil; else 
      _hx_2 = ret; end
      return _hx_2
    end )();
    local typeName1;
    local ret = __test_awesome_Extractor.typeMap.h[typeName];
    local tmp1 = (function() 
      local _hx_3
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_3 = nil; else 
      _hx_3 = ret; end
      return _hx_3
    end )();
    if (tmp1 ~= nil) then 
      typeName1 = tmp1;
    else
      local tmp = typeName;
      typeName1 = (function() 
        local _hx_4
        if (tmp ~= nil) then 
        _hx_4 = tmp; else 
        _hx_4 = "Dynamic"; end
        return _hx_4
      end )();
    end;
    args:push(_hx_o({__fields__={argName=true,argDoc=true,typeName=true},argName=(function() 
      local _hx_5
      if (tmp ~= nil) then 
      _hx_5 = tmp; else 
      _hx_5 = argName; end
      return _hx_5
    end )(),argDoc=__lib__LuaTable_LuaTable_Impl_.arrayRead(__test_awesome__AwesomeDocExterns_Params_Impl_.get_map(params), argName),typeName=typeName1}));
  end;
  local tmp = item.modifiers;
  local retType;
  if (tmp ~= nil) then 
    local value = tmp["return"];
    local value = (function() 
      local _hx_6
      if (value == nil) then 
      _hx_6 = nil; else 
      _hx_6 = value[0]; end
      return _hx_6
    end )();
    retType = (function() 
      local _hx_7
      if (value == nil) then 
      _hx_7 = nil; else 
      _hx_7 = value.type; end
      return _hx_7
    end )();
  else
    retType = nil;
  end;
  local tmp = __test_awesome_Extractor.sanitizeName(item.name);
  local ret = __test_awesome_Extractor.kindMap.h[item.type];
  local tmp1 = (function() 
    local _hx_8
    if (ret == __haxe_ds_StringMap.tnull) then 
    _hx_8 = nil; else 
    _hx_8 = ret; end
    return _hx_8
  end )();
  do return _hx_o({__fields__={args=true,name=true,summary=true,retType=true,kind=true,line=true,isConstructor=true},args=args,name=tmp,summary=item.summary,retType=retType,kind=(function() 
    local _hx_9
    if (tmp1 ~= nil) then 
    _hx_9 = tmp1; else 
    _hx_9 = ""; end
    return _hx_9
  end )(),line=item.lineno,isConstructor=false}) end;
end
__test_awesome_Extractor.formatType = function(typeName) 
  local tMap = function(t) 
    local ret = __test_awesome_Extractor.typeMap.h[t];
    local tmp = (function() 
      local _hx_1
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_1 = nil; else 
      _hx_1 = ret; end
      return _hx_1
    end )();
    if (tmp ~= nil) then 
      do return tmp end;
    else
      if (t ~= nil) then 
        do return t end;
      else
        do return "Dynamic" end;
      end;
    end;
  end;
  local t = tMap(typeName);
  local r = __lua_lib_luautf8_Utf8.find(t, "|", 1, true);
  if ((function() 
    local _hx_2
    if ((r ~= nil) and (r > 0)) then 
    _hx_2 = r - 1; else 
    _hx_2 = -1; end
    return _hx_2
  end )() ~= -1) then 
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len("|") > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(t, "|", idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(t)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(t, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len("|");
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(t, idx, __lua_lib_luautf8_Utf8.len(t)));
        idx = nil;
      end;
    end;
    local tt = ret;
    local nullable;
    if (Lambda.has(ret, "nil")) then 
      local _g = _hx_tab_array({}, 0);
      local _g1 = 0;
      local _g2 = ret;
      while (_g1 < _g2.length) do 
        local i = _g2[_g1];
        _g1 = _g1 + 1;
        if (i ~= "nil") then 
          _g:push(i);
        end;
      end;
      tt = _g;
      nullable = true;
    else
      nullable = false;
    end;
    if (tt.length == 1) then 
      if (nullable) then 
        do return "Null<" .. tMap(tt[0]) .. ">" end;
      else
        do return tt[0] end;
      end;
    else
      local f = tMap;
      local _g = _hx_tab_array({}, 0);
      local _g1 = 0;
      local _g2 = tt;
      while (_g1 < _g2.length) do 
        local i = _g2[_g1];
        _g1 = _g1 + 1;
        _g:push(f(i));
      end;
      do return "haxe.extern.EitherType<" .. _g:join(", ") .. ">" end;
    end;
  end;
  do return t end;
end

__test_awesome_Formatter.new = function(json) 
  local self = _hx_new(__test_awesome_Formatter.prototype)
  __test_awesome_Formatter.super(self,json)
  return self
end
__test_awesome_Formatter.super = function(self,json) 
  self.filename = StringTools.replace(json.file, "/home/cji/portless/awesome/build/", "");
  self.className = self:getClassName(json.name);
  local _this = self.className.pkg;
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(".") > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(_this, ".", idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(_this)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(_this, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(".");
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(_this, idx, __lua_lib_luautf8_Utf8.len(_this)));
      idx = nil;
    end;
  end;
  self.outputPath = ret:concat(_hx_tab_array({[0]=self.className.name}, 1)):join("/") .. ".hx";
end
__test_awesome_Formatter.__name__ = true
__test_awesome_Formatter.prototype = _hx_e();
__test_awesome_Formatter.prototype.formatClass = function(self,json) 
  local out = _hx_tab_array({}, 0);
  local parent = __lib__LuaTable_LuaTable_Impl_.arrayRead(json.tags, "supermodule");
  local value = ((function() 
    local _hx_1
    if (parent == nil) then 
    _hx_1 = _hx_tab_array({}, 0); else 
    _hx_1 = parent; end
    return _hx_1
  end )()):join(",");
  local extds;
  if (value == nil) then 
    extds = nil;
  else
    if (value == "") then 
      extds = "";
    else
      local x = self:getClassName(value);
      extds = " extends " .. x.pkg .. "." .. x.name;
    end;
  end;
  out:push("package " .. self.className.pkg .. ";\n\n");
  out:push("@:luaRequire(\"" .. json.name .. "\")");
  out:push("extern class " .. self.className.name .. extds .. " {");
  out:push("/** " .. json.summary);
  out:push(" * " .. self.filename .. ":" .. Std.string(json.lineno));
  out:push(" */");
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < out.length) do 
    local i = out[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return _g:join("\n") end
end
__test_awesome_Formatter.prototype.getClassName = function(self,name) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(".") > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(name, ".", idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(name)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(name, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(".");
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(name, idx, __lua_lib_luautf8_Utf8.len(name)));
      idx = nil;
    end;
  end;
  local parts = _hx_tab_array({[0]="externs"}, 1):concat(ret);
  local name = __lib_LambdaTools.capitalize(__lib_LambdaTools.last(parts));
  do return _hx_o({__fields__={pkg=true,name=true},pkg=Lambda.array(__lib_LambdaTools.dropRight(parts, 1)):join("."),name=name}) end
end
__test_awesome_Formatter.prototype.formatField = function(self,item) 
  local data = __test_awesome_Extractor.getFieldData(item);
  local out = _hx_tab_array({}, 0);
  out:push(self:formatDescription(item, _hx_tab_array({}, 0)));
  out:push("var ");
  out:push(data.name);
  out:push(": ");
  local value = data.args[0];
  local value = (function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = nil; else 
    _hx_1 = value.typeName; end
    return _hx_1
  end )();
  out:push(self:formatType((function() 
    local _hx_2
    if (value == nil) then 
    _hx_2 = "Dynamic"; else 
    _hx_2 = value; end
    return _hx_2
  end )()));
  out:push(";");
  do return out:join("") end
end
__test_awesome_Formatter.prototype.formatMethod = function(self,item) 
  local data = __test_awesome_Extractor.getMethodData(item);
  local out = _hx_tab_array({[0]="" .. data.kind .. " " .. data.name .. "("}, 1);
  local _g = 0;
  local _g1 = data.args;
  while (_g < _g1.length) do 
    local arg = _g1[_g];
    _g = _g + 1;
    out:push(arg.argName);
    out:push(": ");
    out:push(arg.typeName);
    out:push(", ");
  end;
  if (", " == __lib_LambdaTools.last(out)) then 
    out = Lambda.array(__lib_LambdaTools.dropRight(out, 1));
  end;
  out:push(")");
  if (data.retType ~= nil) then 
    out:push(": ");
    local ret = __test_awesome_Extractor.typeMap.h[data.retType];
    local tmp = (function() 
      local _hx_1
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_1 = nil; else 
      _hx_1 = ret; end
      return _hx_1
    end )();
    local tmp1;
    if (tmp ~= nil) then 
      tmp1 = tmp;
    else
      local tmp = data.retType;
      tmp1 = (function() 
        local _hx_2
        if (tmp ~= nil) then 
        _hx_2 = tmp; else 
        _hx_2 = "Dynamic"; end
        return _hx_2
      end )();
    end;
    out:push(tmp1);
  end;
  out:push(";");
  out = _hx_tab_array({[0]=self:formatDescription(item, data.args)}, 1):concat(out);
  do return out:join("") end
end
__test_awesome_Formatter.prototype.formatSummary = function(self,desc) 
  if (desc ~= "") then 
    do return StringTools.replace(EReg.new("  +", ""):replace(desc, " "), "\n", "") end;
  else
    do return " <no desc>" end;
  end;
end
__test_awesome_Formatter.prototype.formatDescription = function(self,item,args) 
  local out = _hx_tab_array({}, 0);
  out:push("/**\n * ");
  out:push(self:formatSummary(item.summary));
  out:push("\n");
  if ((item.lineno ~= nil) and (self.filename ~= nil)) then 
    out:push(" * @see " .. self.filename .. ":" .. Std.string(item.lineno) .. "\n");
  end;
  local iterator___tink_tmp0_current = 0;
  while (iterator___tink_tmp0_current < args.length) do 
    iterator___tink_tmp0_current = iterator___tink_tmp0_current + 1;
    local __tink_tmp0 = args[iterator___tink_tmp0_current - 1];
    out:push(" * @param " .. __tink_tmp0.argName .. " " .. __tink_tmp0.typeName .. " " .. __tink_tmp0.argDoc .. "\n");
  end;
  out:push(" */\n");
  do return out:join("") end
end
__test_awesome_Formatter.prototype.formatType = function(self,typeName) 
  local tMap = function(t) 
    local ret = __test_awesome_Extractor.typeMap.h[t];
    local tmp = (function() 
      local _hx_1
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_1 = nil; else 
      _hx_1 = ret; end
      return _hx_1
    end )();
    if (tmp ~= nil) then 
      do return tmp end;
    else
      if (t ~= nil) then 
        do return t end;
      else
        do return "Dynamic" end;
      end;
    end;
  end;
  local t = tMap(typeName);
  local r = __lua_lib_luautf8_Utf8.find(t, "|", 1, true);
  if ((function() 
    local _hx_2
    if ((r ~= nil) and (r > 0)) then 
    _hx_2 = r - 1; else 
    _hx_2 = -1; end
    return _hx_2
  end )() ~= -1) then 
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len("|") > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(t, "|", idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(t)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(t, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len("|");
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(t, idx, __lua_lib_luautf8_Utf8.len(t)));
        idx = nil;
      end;
    end;
    local tt = ret;
    local nullable;
    if (Lambda.has(ret, "nil")) then 
      local _g = _hx_tab_array({}, 0);
      local _g1 = 0;
      local _g2 = ret;
      while (_g1 < _g2.length) do 
        local i = _g2[_g1];
        _g1 = _g1 + 1;
        if (i ~= "nil") then 
          _g:push(i);
        end;
      end;
      tt = _g;
      nullable = true;
    else
      nullable = false;
    end;
    if (tt.length == 1) then 
      if (nullable) then 
        do return "Null<" .. tMap(tt[0]) .. ">" end;
      else
        do return tt[0] end;
      end;
    else
      local f = tMap;
      local _g = _hx_tab_array({}, 0);
      local _g1 = 0;
      local _g2 = tt;
      while (_g1 < _g2.length) do 
        local i = _g2[_g1];
        _g1 = _g1 + 1;
        _g:push(f(i));
      end;
      do return "haxe.extern.EitherType<" .. _g:join(", ") .. ">" end;
    end;
  end;
  do return t end
end

__test_awesome_Formatter.prototype.__class__ =  __test_awesome_Formatter

__test_penlight__PenlightDocExterns_Params_Impl_.new = {}
__test_penlight__PenlightDocExterns_Params_Impl_.__name__ = true
__test_penlight__PenlightDocExterns_Params_Impl_.get_map = function(this1) 
  do return this1.map end;
end

__test_penlight_PenlightDocParser.new = {}
__test_penlight_PenlightDocParser.__name__ = true
__test_penlight_PenlightDocParser.getJson = function(fname) 
  do return __haxe_Json.parse(__sys_io_File.getContent("/home/cji/priv/awesomescripts/haxeshigh/" .. "/api-pl/" .. fname .. ".json")) end;
end
__test_penlight_PenlightDocParser.formatClass = function(json) 
  local out = _hx_tab_array({}, 0);
  local parent = __lib__LuaTable_LuaTable_Impl_.arrayRead(json.tags, "supermodule");
  out:push(((function() 
    local _hx_1
    if (parent == nil) then 
    _hx_1 = _hx_tab_array({}, 0); else 
    _hx_1 = parent; end
    return _hx_1
  end )()):join(","));
  out:push("\t" .. json.name .. " :: " .. json.file .. ":" .. Std.string(json.lineno));
  out:push("" .. json.summary);
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < out.length) do 
    local i = out[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return _g:join("\n") end;
end
__test_penlight_PenlightDocParser.formatReturnType = function(item) 
  local value = item.ret;
  local value = (function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = nil; else 
    _hx_1 = value[0]; end
    return _hx_1
  end )();
  if (value == nil) then 
    do return "Dynamic" end;
  else
    do return value end;
  end;
end
__test_penlight_PenlightDocParser.formatItem = function(item) 
  local out = _hx_tab_array({}, 0);
  local retType = __test_penlight_PenlightDocParser.formatReturnType(item);
  local args = __test_penlight_PenlightDocParser.formatInlineArgs(item);
  out:push("/** " .. item.summary);
  local _this = __test_penlight_PenlightDocParser.formatArgs(item);
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < _this.length) do 
    local i = _this[_g1];
    _g1 = _g1 + 1;
    _g:push(" * @param " .. i);
  end;
  out:push(_g:join("\n"));
  out:push(" */");
  out:push(_hx_tab_array({[0]=StringTools.trim("static " .. item.type), "" .. item.name .. args, ": " .. retType .. ";"}, 3):join(" "));
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < out.length) do 
    local i = out[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return _g:join("\n") end;
end
__test_penlight_PenlightDocParser.formatInlineArgs = function(item) 
  local s = "";
  local params = item.params;
  local _g = 0;
  local _g1 = __lib_TableTools.numericKeys(params);
  while (_g < _g1.length) do 
    local n = _g1[_g];
    _g = _g + 1;
    local arg = __lib__LuaTable_LuaTable_Impl_.arrayRead(params, n);
    local tmp = __lib__LuaTable_LuaTable_Impl_.arrayRead(item.modifiers.param, arg);
    local type = __test_penlight_PenlightDocParser.formatType((function() 
      local _hx_1
      if (tmp ~= nil) then 
      _hx_1 = tmp.type; else 
      _hx_1 = nil; end
      return _hx_1
    end )());
    local ret = __test_penlight_PenlightDocParser.argMap.h[arg];
    local value = (function() 
      local _hx_2
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_2 = nil; else 
      _hx_2 = ret; end
      return _hx_2
    end )();
    local value = (function() 
      local _hx_3
      if (value == nil) then 
      _hx_3 = nil; else 
      _hx_3 = value; end
      return _hx_3
    end )();
    s = s .. ("" .. ((function() 
      local _hx_4
      if (value == nil) then 
      _hx_4 = arg; else 
      _hx_4 = value; end
      return _hx_4
    end )()) .. ": " .. type .. ", ");
  end;
  local len = __lua_lib_luautf8_Utf8.len(s) - 2;
  if ((len == nil) or (len > __lua_lib_luautf8_Utf8.len(s))) then 
    len = __lua_lib_luautf8_Utf8.len(s);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(s) + len;
    end;
  end;
  s = __lua_lib_luautf8_Utf8.sub(s, 1, len);
  do return "(" .. s .. ")" end;
end
__test_penlight_PenlightDocParser.formatArgs = function(item) 
  local out = _hx_tab_array({}, 0);
  local params = item.params;
  local _g = 0;
  local _g1 = __lib_TableTools.numericKeys(params);
  while (_g < _g1.length) do 
    local n = _g1[_g];
    _g = _g + 1;
    out:push(__test_penlight_PenlightDocParser.formatParamDesc(item, __lib__LuaTable_LuaTable_Impl_.arrayRead(params, n)));
  end;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < out.length) do 
    local i = out[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return _g end;
end
__test_penlight_PenlightDocParser.formatType = function(type) 
  local value = (function() 
    local _hx_1
    if (type == nil) then 
    _hx_1 = nil; else 
    _hx_1 = __lib_LambdaTools.capitalize(type); end
    return _hx_1
  end )();
  local value = (function() 
    local _hx_2
    if (value == nil) then 
    _hx_2 = "Dynamic"; else 
    _hx_2 = value; end
    return _hx_2
  end )();
  if (value == nil) then 
    do return nil end;
  else
    local s = value;
    local ret = __test_penlight_PenlightDocParser.typeMap.h[s];
    if ((function() 
      local _hx_3
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_3 = nil; else 
      _hx_3 = ret; end
      return _hx_3
    end )() ~= nil) then 
      local ret = __test_penlight_PenlightDocParser.typeMap.h[s];
      if (ret == __haxe_ds_StringMap.tnull) then 
        do return nil end;
      else
        do return ret end;
      end;
    else
      do return s end;
    end;
  end;
end
__test_penlight_PenlightDocParser.formatParamDesc = function(item,arg) 
  local out = _hx_tab_array({}, 0);
  local ret = __test_penlight_PenlightDocParser.argMap.h[arg];
  local value = (function() 
    local _hx_1
    if (ret == __haxe_ds_StringMap.tnull) then 
    _hx_1 = nil; else 
    _hx_1 = ret; end
    return _hx_1
  end )();
  local value = (function() 
    local _hx_2
    if (value == nil) then 
    _hx_2 = nil; else 
    _hx_2 = value; end
    return _hx_2
  end )();
  out:push("" .. ((function() 
    local _hx_3
    if (value == nil) then 
    _hx_3 = arg; else 
    _hx_3 = value; end
    return _hx_3
  end )()) .. " ");
  local tmp = __lib__LuaTable_LuaTable_Impl_.arrayRead(item.modifiers.param, arg);
  out:push(__test_penlight_PenlightDocParser.formatType((function() 
    local _hx_4
    if (tmp ~= nil) then 
    _hx_4 = tmp.type; else 
    _hx_4 = nil; end
    return _hx_4
  end )()));
  out:push(__test_penlight_PenlightDocParser.formatDescription(__lib__LuaTable_LuaTable_Impl_.arrayRead(__test_penlight__PenlightDocExterns_Params_Impl_.get_map(item.params), arg)));
  do return out:join("") end;
end
__test_penlight_PenlightDocParser.formatDescription = function(desc) 
  if (desc ~= "") then 
    do return StringTools.replace(EReg.new("  +", ""):replace(desc, " "), "\n", "") end;
  else
    do return " <no desc>" end;
  end;
end
__test_penlight_PenlightDocParser.parse = function() 
  __haxe_Timer.measure(function() 
    local json = __test_penlight_PenlightDocParser.getJson("tablex");
    __lib_Prelude.println("-----");
    __lib_Prelude.println(__test_penlight_PenlightDocParser.formatClass(json));
    local _g = 0;
    local _g1 = json.items;
    while (_g < _g1.length) do 
      local x = _g1[_g];
      _g = _g + 1;
      local s = x.name;
      local r = __lua_lib_luautf8_Utf8.find(s, ":", 1, true);
      if (__lib_LambdaTools["not"]((function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )() ~= -1)) then 
        __lib_Prelude.println(__test_penlight_PenlightDocParser.formatItem(x));
        __lib_Prelude.println("");
      end;
    end;
  end, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/test/penlight/PenlightDocParser.hx",lineNumber=103,className="test.penlight.PenlightDocParser",methodName="parse"}));
end
-- require this for lua 5.1
pcall(require, 'bit')
if bit then
  _hx_bit_raw = bit
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
else
  _hx_bit_raw = _G.require('bit32')
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
end
-- see https://github.com/HaxeFoundation/haxe/issues/8849
_hx_bit.bor = function(...) return _hx_bit_clamp(_hx_bit_raw.bor(...)) end;
_hx_bit.band = function(...) return _hx_bit_clamp(_hx_bit_raw.band(...)) end;
_hx_bit.arshift = function(...) return _hx_bit_clamp(_hx_bit_raw.arshift(...)) end;

if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  if (__lua_lib_lrexlib_Rex == nil) then 
    _G.error(__haxe_Exception.thrown("Rex is missing.  Please install lrexlib-pcre."),0);
  end;
  String.__name__ = true;
  Array.__name__ = true;
  local x = 4;__lua_Boot.MAXSTACKSIZE = 1000;
  
  EReg.FLAGS = __lua_lib_lrexlib_Rex.flags();
  
  __haxe_EntryPoint.pending = Array.new();
  
  __haxe_EntryPoint.threadCount = 0;
  
  __haxe_ds_StringMap.tnull = ({});
  
  __test_awesome_Extractor.typeMap = (function() 
    local _hx_2
    
    local _g = __haxe_ds_StringMap.new();
    
    _g.h.number = "Int";
    
    _g.h.integer = "Int";
    
    _g.h.boolean = "Bool";
    
    _g.h.table = "lua.Table<String, Dynamic>";
    
    _g.h["function"] = "Function";
    
    _g.h.widget = "externs.wibox.Widget";
    
    _g.h.string = "String";
    
    _g.h.height = "Int";
    
    _g.h.width = "Int";
    
    _g.h.The = "Dynamic";
    
    _g.h["gears.shape"] = "externs.gears.Shape";
    
    _g.h["gears.color"] = "externs.gears.Color";
    
    _g.h.color = "externs.gears.Color";
    
    _g.h.screen = "externs.Screen";
    
    _g.h.client = "externs.Client";
    
    _hx_2 = _g;
    return _hx_2
  end )();
  
  __test_awesome_Extractor.argMap = (function() 
    local _hx_3
    
    local _g = __haxe_ds_StringMap.new();
    
    _g.h["..."] = "...rest";
    
    _hx_3 = _g;
    return _hx_3
  end )();
  
  __test_awesome_Extractor.kindMap = (function() 
    local _hx_4
    
    local _g = __haxe_ds_StringMap.new();
    
    _g.h.staticfct = "static function";
    
    _g.h.method = "function";
    
    _g.h.property = "var";
    
    _g.h["function"] = "static function";
    
    _g.h.constructorfct = "@:selfCall function";
    
    _hx_4 = _g;
    return _hx_4
  end )();
  
  __test_penlight_PenlightDocParser.typeMap = (function() 
    local _hx_5
    
    local _g = __haxe_ds_StringMap.new();
    
    _g.h.Number = "Int";
    
    _g.h.Integer = "Int";
    
    _g.h.Boolean = "Bool";
    
    _g.h.Tab = "lua.Table";
    
    _g.h.Func = "Function";
    
    _hx_5 = _g;
    return _hx_5
  end )();
  
  __test_penlight_PenlightDocParser.argMap = (function() 
    local _hx_6
    
    local _g = __haxe_ds_StringMap.new();
    
    _g.h["..."] = "...rest";
    
    _hx_6 = _g;
    return _hx_6
  end )();
  
  
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_hx_print = print or (function() end)

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
_G.xpcall(function() 
  __test_Test.main();
  __haxe_EntryPoint.run();
  _hx_luv.run();
end, _hx_error)
