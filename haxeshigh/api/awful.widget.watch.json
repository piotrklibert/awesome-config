{
  "inferred":true,
  "kind":"widgets",
  "mod_name":"awful.widget.watch",
  "summary":"Watch widget.",
  "sections":{
    "by_name":[]
  },
  "name":"awful.widget.watch",
  "modifiers":{
    "copyright":[],
    "author":[[],[]]
  },
  "description":"\n Here is an example of simple temperature widget which will update each 15\n seconds implemented in two different ways.\n The first, simpler one, will just display the return command output\n (so output is stripped by shell commands).\n In the other example `sensors` returns to the widget its full output\n and it's trimmed in the widget callback function:\n\n     211             mytextclock,\n     212             wibox.widget.textbox('  |  '),\n     213             -- one way to do that:\n     214             awful.widget.watch('bash -c \"sensors | grep temp1\"', 15),\n     215             -- another way:\n     216             awful.widget.watch('sensors', 15, function(widget, stdout)\n     217               for line in stdout:gmatch(\"[^\\r\\n]+\") do\n     218                 if line:match(\"temp1\") then\n     219                   widget:set_text(line)\n     220                   return\n     221                 end\n     222               end\n     223             end),\n     224             s.mylayoutbox,\n\n ![Example screenshot](../images/awful_widget_watch.png)\n\n Here is the most basic usage:\n\n \nDOC_HIDE --DOC_GEN_IMAGE\n\n![Usage example](../images/AUTOGEN_wibox_awidget_defaults_watch.svg)\n\n \n     awful.widget.watch('bash -c &#34echo Hello world! | grep Hello&#34', 15)\n",
  "items":[{
      "inferred":true,
      "subparams":{
        "callback":["callback.widget","callback.stdout","callback.stderr","callback.exitreason","callback.exitcode"]
      },
      "parameter":"field",
      "params":{
        "1":"command",
        "2":"timeout",
        "3":"callback",
        "4":"base_widget",
        "map":{
          "callback.exitcode":" Exit code.\n For \"exit\" reason it's the exit code.\n For \"signal\" reason â€” the signal causing process termination.\n",
          "timeout":" The time interval at which the textbox\n will be updated.\n",
          "callback.stderr":" Output on stderr.",
          "base_widget":" Base widget.",
          "callback.exitreason":" Exit Reason.\n The reason can be \"exit\" or \"signal\".",
          "callback":" The function that will be called after\n the command output will be received. it is shown in the textbox.\n Defaults to:\n     function(widget, stdout, stderr, exitreason, exitcode)\n         widget:set_text(stdout)\n     end",
          "command":" The command.",
          "callback.stdout":" Output on stdout.",
          "callback.widget":" Base widget instance."
        }
      },
      "summary":"Create a textbox that shows the output of a command\n and updates it at a given time interval.",
      "name":"awful.widget.watch",
      "modifiers":{
        "return":[[],[]],
        "param":{
          "1":{
            "type":"string|table"
          },
          "2":{
            "type":"integer",
            "opt":"5"
          },
          "3":{
            "type":"function",
            "opt":true
          },
          "4":[],
          "5":{
            "type":"string"
          },
          "6":{
            "type":"string"
          },
          "7":{
            "type":"string"
          },
          "8":{
            "type":"integer"
          },
          "9":{
            "opt":"wibox.widget.textbox()"
          },
          "callback.exitcode":{
            "type":"integer"
          },
          "timeout":{
            "type":"integer",
            "opt":"5"
          },
          "callback.stderr":{
            "type":"string"
          },
          "base_widget":{
            "opt":"wibox.widget.textbox()"
          },
          "callback.exitreason":{
            "type":"string"
          },
          "callback":{
            "type":"function",
            "opt":true
          },
          "command":{
            "type":"string|table"
          },
          "callback.stdout":{
            "type":"string"
          },
          "callback.widget":[]
        },
        "field":{
          "1":{
            "type":"string|table"
          },
          "2":{
            "type":"integer",
            "opt":"5"
          },
          "3":{
            "type":"function",
            "opt":true
          },
          "4":[],
          "5":{
            "type":"string"
          },
          "6":{
            "type":"string"
          },
          "7":{
            "type":"string"
          },
          "8":{
            "type":"integer"
          },
          "9":{
            "opt":"wibox.widget.textbox()"
          },
          "callback.exitcode":{
            "type":"integer"
          },
          "timeout":{
            "type":"integer",
            "opt":"5"
          },
          "callback.stderr":{
            "type":"string"
          },
          "base_widget":{
            "opt":"wibox.widget.textbox()"
          },
          "callback.exitreason":{
            "type":"string"
          },
          "callback":{
            "type":"function",
            "opt":true
          },
          "command":{
            "type":"string|table"
          },
          "callback.stdout":{
            "type":"string"
          },
          "callback.widget":[]
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(command[, timeout=5][, callback], base_widget)",
      "tags":[],
      "lineno":78
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get or set the children elements.",
      "name":"children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":117
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get all direct and indirect children widgets.",
      "name":"all_children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"\n This will scan all containers recursively to find widgets\n Warning: This method it prone to stack overflow id the widget, or any of its\n children, contain (directly or indirectly) itself.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":125
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":131
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":" The height (`nil` for automatic)"
        }
      },
      "summary":"Force a widget height.",
      "name":"forced_height",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":136
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":" The width (`nil` for automatic)"
        }
      },
      "summary":"Force a widget width.",
      "name":"forced_width",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":141
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" The opacity (between 0 and 1)"
        }
      },
      "summary":"The widget opacity (transparency).",
      "name":"opacity",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([opacity=1])",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":146
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"The widget visibility.",
      "name":"visible",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":151
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "table":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "table":[]
        },
        "return":[]
      },
      "description":"\n\n The table contains a list of `awful.button` objects.\n",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The widget buttons.",
      "name":"buttons",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":160
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button to add."
        }
      },
      "summary":"Add a new `awful.button` to this widget.",
      "name":"add_button",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(button)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":165
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"signal_name",
        "2":"...",
        "map":{
          "signal_name":"",
          "...":" Other arguments"
        }
      },
      "summary":"Emit a signal and ensure all parent widgets in the hierarchies also\n forward the signal.",
      "name":"emit_signal_recursive",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":" This is useful to track signals when there is a dynamic\n set of containers and layouts wrapping the widget.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(signal_name, ...)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":173
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the previous results of `:layout()` and `:fit()`\n are no longer valid.  Unless this signal is emitted, `:layout()` and `:fit()`\n must return the same result when called with the same arguments.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the layout (size) change.",
      "name":"widget::layout_changed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":181
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the content of the widget changes. The widget will\n be redrawn, it is not re-layouted. Put differently, it is assumed that\n `:layout()` and `:fit()` would still return the same results as before.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the widget content changed.",
      "name":"widget::redraw_needed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":189
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is pressed over the widget.",
      "name":"button::press",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":220
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is released over the widget.",
      "name":"button::release",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":251
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse enter a widget.",
      "name":"mouse::enter",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":276
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse leave a widget.",
      "name":"mouse::leave",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":301
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":317
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":323
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":336
    }],
  "type":"widgetmod",
  "file":"/home/cji/portless/awesome/build/lib/awful/widget/watch.lua",
  "package":"",
  "tags":{
    "author":["Benjamin Petrenko","Yauheni Kirylau"],
    "copyright":"2015, 2016 Benjamin Petrenko, Yauheni Kirylau"
  },
  "lineno":43
}