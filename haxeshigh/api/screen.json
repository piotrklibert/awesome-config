{
  "inferred":true,
  "kind":"core_components",
  "mod_name":"screen",
  "summary":"awesome screen API.",
  "sections":{
    "by_name":[]
  },
  "name":"screen",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"\n\n Screen objects can be added and removed over time. To get a callback for all\n current and future screens, use `awful.screen.connect_for_each_screen`:\n\n    awful.screen.connect_for_each_screen(function(s)\n        -- do something\n    end)\n\n It is also possible loop over all current screens using:\n\n    for s in screen do\n        -- do something\n    end\n\n Most basic Awesome objects also have a screen property, see `mouse.screen`\n `client.screen`, `wibox.screen` and `tag.screen`.\n\n Furthermore to the classes described here, one can also use signals as\n described in @{signals}.\n\n \n \n ![Usage example](../images/AUTOGEN_uml_nav_tables_screen.svg)\n \n \n",
  "items":[{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n Connect to this signal when code needs to be executed after the Lua context\n is initialized and modules are loaded, but before screens are added.\n\n To manage screens manually, set `screen.automatic_factory = false` and\n connect to the `property::viewports` signal. It is then possible to use\n `screen.fake_add` to create virtual screens. Be careful when using this,\n when done incorrectly, no screens will be created. Using Awesome with zero\n screens is **not** supported.\n",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"AwesomeWM is about to scan for existing screens.",
      "name":"scanning",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":90
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n Connect to this signal to execute code after the screens have been created,\n but before the clients are added. This signal can also be used to split\n physical screens into multiple virtual screens before the clients (and their\n rules) are executed.\n\n Note that if no screens exist at this point, the fallback code will be\n triggered and the default (detected) screens will be added.\n",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"AwesomeWM is done scanning for screens.",
      "name":"scanned",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":98
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"",
      "name":"primary_changed",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":107
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"This signal is emitted when a new screen is added to the current setup.",
      "name":"added",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":114
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"This signal is emitted when a screen is removed from the setup.",
      "name":"removed",
      "modifiers":{
        "return":[],
        "field":[],
        "request":[[]]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":{
        "request":["tag screen removed granted When a screen is removed, `request::screen`\n  is called on all screen tags to try to relocate them."]
      },
      "lineno":118
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"This signal is emitted when the list of available screens changes.",
      "name":"list",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":124
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "2":"is_source",
        "map":{
          "is_source":" If self is the source or the destination of the swap",
          "screen":" The other screen"
        }
      },
      "summary":"When 2 screens are swapped",
      "name":"swapped",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"screen"
          },
          "2":{
            "type":"boolean"
          },
          "is_source":{
            "type":"boolean"
          },
          "screen":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "type":"screen"
          },
          "2":{
            "type":"boolean"
          },
          "is_source":{
            "type":"boolean"
          },
          "screen":{
            "type":"screen"
          }
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(screen, is_source)",
      "tags":[],
      "lineno":142
    },{
      "parameter":"field",
      "params":{
        "1":"viewports",
        "map":{
          "viewports":" A table containing all physical viewports."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "viewports":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "viewports":{
            "type":"table"
          }
        }
      },
      "description":"\n\n Each viewport in the list corresponds to a **physical** screen rectangle, which\n is **not** the `viewports` property of the `screen` objects.\n\n Each entry in the `viewports` entry has the following keys:\n\n * `geometry` *(table)*: A table with an `x`, `y`, `width` and `height` keys.\n * `outputs` *(table)*: All outputs sharing this viewport.\n * `maximum_dpi` *(number)*: The DPI of the most dense output.\n * `minimum_dpi` *(number)*: The DPI of the least dense output.\n * `preferred_dpi` *(number)*: The optimal DPI.\n",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"This signal is emitted when the list of physical screen viewport changes.",
      "name":"property::viewports",
      "type":"signal",
      "args":"(viewports)",
      "kind":"signals",
      "lineno":148
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"primary",
        "map":{
          "primary":""
        }
      },
      "summary":"The primary screen.",
      "name":"primary",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"screen"
          },
          "primary":{
            "type":"screen"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(primary)",
      "tags":[],
      "lineno":159
    },{
      "parameter":"field",
      "params":{
        "map":{
          "screen.automatic_factory":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":{
          "1":{
            "type":"boolean",
            "opt":"true"
          },
          "screen.automatic_factory":{
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"\n\n Be very, very careful when setting this to false. You might end up with\n no screens. This is **not** supported. Always connect to the `scanned`\n signal to make sure to create a fallback screen if none were created.\n",
      "tags":{
        "see":[]
      },
      "section":"field",
      "inferred":true,
      "subparams":{
        "screen":["screen.automatic_factory"]
      },
      "summary":"If `screen` objects are created automatically when new viewports are detected.",
      "name":"automatic_factory",
      "type":"field",
      "args":"()",
      "kind":"fields",
      "lineno":180
    },{
      "inferred":true,
      "subparams":{
        "table":["table.x","table.y","table.width","table.height"]
      },
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table.height":" The height",
          "table.x":" The horizontal position",
          "table":"",
          "table.y":" The vertical position",
          "table.width":" The width"
        }
      },
      "summary":"The screen coordinates.",
      "name":"geometry",
      "modifiers":{
        "return":[],
        "readonly":[[]],
        "param":[[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "5":[],
          "table.height":{
            "type":"integer"
          },
          "table.x":{
            "type":"integer"
          },
          "table":[],
          "table.y":{
            "type":"integer"
          },
          "table.width":{
            "type":"integer"
          }
        }
      },
      "description":"\n\n **Signal:**\n\n  * *property::geometry*\n\n \n \n ![Usage example](../images/AUTOGEN_screen_geometry.svg)\n \n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(table)",
      "tags":{
        "readonly":[""]
      },
      "lineno":211
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "integer":[]
        },
        "readonly":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "return":[]
      },
      "description":"\n\n * The indeces are a continuous sequence from 1 to `screen.count()`.\n * It is **NOT** related to the actual screen position relative to each\n   other.\n * 1 is **NOT** necessarily the primary screen.\n * When screens are added and removed indices **CAN** change.\n\n If you really want to keep an array of screens you should use something\n along:\n\n     local myscreens = setmetatable({}. {__mode=\"k\"})\n     myscreens[ screen[1] ] = \"mydata\"\n\n But it might be a better option to simply store the data directly in the\n screen object as:\n\n     screen[1].mydata = \"mydata\"\n\n Remember that screens are also objects, so if you only want to store a simple\n property, you can do it directly:\n\n     screen[1].answer = 42\n",
      "tags":{
        "readonly":[""],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The internal screen number.",
      "name":"index",
      "type":"property",
      "args":"(integer)",
      "kind":"object properties",
      "lineno":255
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table.height":" The height",
          "table.x":" The horizontal position",
          "table":"",
          "table.y":" The vertical position",
          "table.width":" The width"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "5":[],
          "table.height":{
            "type":"integer"
          },
          "table.x":{
            "type":"integer"
          },
          "table":[],
          "table.y":{
            "type":"integer"
          },
          "table.width":{
            "type":"integer"
          }
        },
        "readonly":[[]],
        "param":[[]],
        "return":[]
      },
      "description":"\n\n The workarea is a subsection of the screen where clients can be placed. It\n usually excludes the toolbars (see `awful.wibar`) and dockable clients\n (see `client.dockable`) like WindowMaker DockAPP.\n\n It can be modified be altering the `wibox` or `client` struts.\n\n **Signal:**\n\n  * *property::workarea*\n\n \n \n ![Usage example](../images/AUTOGEN_screen_workarea.svg)\n \n  \n   \n      -- With a padding, the tiled clients wont use 20px at the top and bottom\n      -- and 40px on the left and right.\n      screen[1].padding = {\n          left   = 40,\n          right  = 40,\n          top    = 20,\n          bottom = 20,\n      }\n       \n      -- This will shift the workarea by 24px at the top.\n      local wibar = awful.wibar {\n          position = &#34top&#34,\n          height   = 24,\n      }\n",
      "tags":{
        "see":[],
        "readonly":[""]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "table":["table.x","table.y","table.width","table.height"]
      },
      "summary":"The screen workarea.",
      "name":"workarea",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":262
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the number of instances.",
      "name":"instances",
      "modifiers":{
        "field":[],
        "return":[[]]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":267
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "return":[],
        "field":[],
        "usage":[[]]
      },
      "description":"",
      "tags":[],
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Iterate over screens.",
      "name":"screen",
      "kind":"static module functions",
      "usage":["for s in screen do\n    print(\"Oh, wow, we have screen \" .. tostring(s))\nend\n"],
      "args":"()",
      "type":"staticfct",
      "lineno":1554
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the number of screens.",
      "name":"count",
      "modifiers":{
        "field":[],
        "return":[[]]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":1641
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "3":"width",
        "4":"height",
        "map":{
          "y":" Y-coordinate for screen.",
          "width":" width for screen.",
          "height":" height for screen.",
          "x":" X-coordinate for screen."
        }
      },
      "summary":"Add a fake screen.",
      "name":"fake_add",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "y":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          },
          "x":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "y":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          },
          "x":{
            "type":"integer"
          }
        }
      },
      "description":"\n\n To vertically split the first screen in 2 equal parts, use:\n\n    local geo = screen[1].geometry\n    local new_width = math.ceil(geo.width/2)\n    local new_width2 = geo.width - new_width\n    screen[1]:fake_resize(geo.x, geo.y, new_width, geo.height)\n    screen.fake_add(geo.x + new_width, geo.y, new_width2, geo.height)\n\n Both virtual screens will have their own taglist and wibars.\n",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(x, y, width, height)",
      "tags":[],
      "lineno":1667
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "return":[],
        "field":[],
        "usage":[[]]
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_screen_fake_remove.svg)\n ",
      "tags":[],
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Remove a screen.",
      "name":"fake_remove",
      "kind":"object methods ",
      "usage":["screen[2]:fake_remove()\n"],
      "args":"()",
      "type":"method",
      "lineno":1719
    },{
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "3":"width",
        "4":"height",
        "map":{
          "y":" The new Y-coordinate for screen.",
          "width":" The new width for screen.",
          "height":" The new height for screen.",
          "x":" The new X-coordinate for screen."
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "y":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          },
          "x":{
            "type":"integer"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "y":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          },
          "x":{
            "type":"integer"
          }
        },
        "usage":[[]]
      },
      "description":"\n\n Calling this will resize the screen even if it no longer matches the viewport\n size.\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_screen_fake_resize.svg)\n ",
      "tags":[],
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Resize a screen.",
      "name":"fake_resize",
      "kind":"object methods ",
      "usage":["screen[1]:fake_resize(100, 0, 1024, 768)\n"],
      "args":"(x, y, width, height)",
      "type":"method",
      "lineno":1762
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "map":{
          "s":" A screen to swap with."
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "type":"client"
          },
          "s":{
            "type":"client"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "s":{
            "type":"client"
          }
        },
        "usage":[[]]
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_screen_swap.svg)\n ",
      "tags":[],
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Swap a screen with another one in global screen list.",
      "name":"swap",
      "kind":"object methods ",
      "usage":["screen[2]:swap(screen[1])\n"],
      "args":"(s)",
      "type":"method",
      "lineno":1802
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback that should be disconnected."
        }
      },
      "summary":"Disconnect from a signal.",
      "name":"disconnect_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, func)",
      "tags":[],
      "lineno":1915
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, ...)",
      "tags":[],
      "lineno":1921
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, func)",
      "tags":[],
      "lineno":1923
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "2":"x",
        "3":"y",
        "map":{
          "s":" Screen",
          "y":" Y coordinate of point",
          "x":" X coordinate of point"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "param":{
          "1":[],
          "2":[],
          "3":[],
          "s":[],
          "y":[],
          "x":[]
        },
        "field":{
          "1":[],
          "2":[],
          "3":[],
          "s":[],
          "y":[],
          "x":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get the square distance between a `screen` and a point.",
      "name":"awful.screen.getdistance_sq",
      "type":"deprecated",
      "args":"(s, x, y)",
      "kind":"deprecated functions",
      "lineno":57
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "map":{
          "y":" Y coordinate of point",
          "x":" X coordinate of point"
        }
      },
      "summary":"Get the square distance between a `screen` and a point.",
      "name":"get_square_distance",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(x, y)",
      "tags":[],
      "lineno":67
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "map":{
          "y":" The y coordinate",
          "x":" The x coordinate"
        }
      },
      "summary":"Return the screen index corresponding to the given (pixel) coordinates.",
      "name":"awful.screen.getbycoord",
      "modifiers":{
        "return":[{
            "type":"?number"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        }
      },
      "description":"\n\n The number returned can be used as an index into the global\n `screen` table/object.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(x, y)",
      "tags":[],
      "lineno":79
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"_screen",
        "map":{
          "_screen":" Screen number (defaults / falls back to mouse.screen)."
        }
      },
      "summary":"Move the focus to a screen.",
      "name":"awful.screen.focus",
      "modifiers":{
        "field":{
          "1":{
            "type":"screen"
          },
          "_screen":{
            "type":"screen"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"screen"
          },
          "_screen":{
            "type":"screen"
          }
        },
        "request":[[]]
      },
      "description":"\n\n This moves the mouse pointer to the last known position on the new screen,\n or keeps its position relative to the current focused screen.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(_screen)",
      "tags":{
        "request":["client activate screen.focus granted The most recent focused client\n  for this screen should be re-activated."]
      },
      "lineno":96
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"dir",
        "map":{
          "self":" Screen.",
          "dir":" The direction, can be either \"up\", \"down\", \"left\" or \"right\"."
        }
      },
      "summary":"Get the next screen in a specific direction.",
      "name":"get_next_in_direction",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "self":[],
          "dir":[]
        },
        "field":{
          "1":[],
          "2":[],
          "self":[],
          "dir":[]
        }
      },
      "description":"\n\n This gets the next screen relative to this one in\n the specified direction.\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(self, dir)",
      "tags":[],
      "lineno":139
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"dir",
        "2":"_screen",
        "map":{
          "dir":" The direction, can be either \"up\", \"down\", \"left\" or \"right\".",
          "_screen":" Screen."
        }
      },
      "summary":"Move the focus to a screen in a specific direction.",
      "name":"awful.screen.focus_bydirection",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "dir":[],
          "_screen":[]
        },
        "field":{
          "1":[],
          "2":[],
          "dir":[],
          "_screen":[]
        }
      },
      "description":"\n\n This moves the mouse pointer to the last known position on the new screen,\n or keeps its position relative to the current focused screen.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(dir, _screen)",
      "tags":[],
      "lineno":160
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"offset",
        "map":{
          "offset":" Value to add to the current focused screen index. 1 to\n   focus the next one, -1 to focus the previous one."
        }
      },
      "summary":"Move the focus to a screen relative to the current one,",
      "name":"awful.screen.focus_relative",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "offset":{
            "type":"int"
          }
        },
        "field":{
          "1":{
            "type":"int"
          },
          "offset":{
            "type":"int"
          }
        }
      },
      "description":" This moves the mouse pointer to the last known position on the new screen,\n or keeps its position relative to the current focused screen.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(offset)",
      "tags":[],
      "lineno":177
    },{
      "parameter":"field",
      "params":{
        "1":"tiling_area",
        "map":{
          "tiling_area.x":"",
          "tiling_area.height":"",
          "tiling_area.y":"",
          "tiling_area.width":"",
          "tiling_area":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "tiling_area.x":{
            "type":"number"
          },
          "tiling_area.height":{
            "type":"number"
          },
          "tiling_area.y":{
            "type":"number"
          },
          "tiling_area.width":{
            "type":"number"
          },
          "tiling_area":{
            "type":"table"
          }
        },
        "readonly":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "tiling_area.x":{
            "type":"number"
          },
          "tiling_area.height":{
            "type":"number"
          },
          "tiling_area.y":{
            "type":"number"
          },
          "tiling_area.width":{
            "type":"number"
          },
          "tiling_area":{
            "type":"table"
          }
        },
        "return":[]
      },
      "description":"\n\n This property holds the area where clients can be tiled. Use\n the `padding` property, `wibox.struts` and `client.struts` to modify this\n area.\n\n \n\n![Usage example](../images/AUTOGEN_screen_tiling_area.svg)\n\n",
      "tags":{
        "see":[],
        "readonly":[""]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "tiling_area":["tiling_area.x","tiling_area.y","tiling_area.width","tiling_area.height"]
      },
      "summary":"The area where clients can be tiled.",
      "name":"tiling_area",
      "type":"property",
      "args":"(tiling_area)",
      "kind":"object properties",
      "lineno":203
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"content",
        "map":{
          "content":""
        }
      },
      "summary":"Take a screenshot of the physical screen.",
      "name":"content",
      "modifiers":{
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"gears.surface"
          },
          "content":{
            "type":"gears.surface"
          }
        },
        "field":{
          "1":{
            "type":"gears.surface"
          },
          "content":{
            "type":"gears.surface"
          }
        }
      },
      "description":"\n\n Reading this property returns a screenshot of the physical\n (Xinerama) screen as a cairo surface.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(content)",
      "tags":{
        "readonly":[""]
      },
      "lineno":219
    },{
      "parameter":"field",
      "params":{
        "1":"_screen",
        "2":"padding",
        "map":{
          "_screen":" The screen object to change the padding on",
          "padding":" The padding, a table with 'top', 'left', 'right' and/or\n 'bottom' or a number value to apply set the same padding on all sides. Can be\n  nil if you only want to retrieve padding"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":[],
          "2":{
            "optchain":"nil",
            "opt":"nil"
          },
          "_screen":[],
          "padding":{
            "optchain":"nil",
            "opt":"nil"
          }
        },
        "field":{
          "1":[],
          "2":{
            "optchain":"nil",
            "opt":"nil"
          },
          "_screen":[],
          "padding":{
            "optchain":"nil",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get or set the screen padding.",
      "name":"awful.screen.padding",
      "type":"deprecated",
      "args":"(_screen[, padding=nil])",
      "kind":"deprecated functions",
      "lineno":240
    },{
      "inferred":true,
      "subparams":{
        "table":["table.left","table.right","table.top","table.bottom"]
      },
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table.bottom":" The padding on the bottom.",
          "table.left":" The padding on the left.",
          "table.top":" The padding on the top.",
          "table.right":" The padding on the right.",
          "table":""
        }
      },
      "summary":"The screen padding.",
      "name":"padding",
      "modifiers":{
        "usebeautiful":[[]],
        "return":[],
        "param":[[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "5":[],
          "table.bottom":{
            "type":"integer"
          },
          "table.left":{
            "type":"integer"
          },
          "table.top":{
            "type":"integer"
          },
          "table.right":{
            "type":"integer"
          },
          "table":[]
        }
      },
      "description":"\n\n This adds a \"buffer\" section on each side of the screen.\n\n **Signal:**\n\n * *property::padding*\n\n \n\n![Usage example](../images/AUTOGEN_screen_padding.svg)\n\n \n  \n     -- With a padding, the tiled clients wont use 20px at the top and bottom\n     -- and 40px on the left and right.\n     screen[1].padding = {\n         left   = 40,\n         right  = 40,\n         top    = 20,\n         bottom = 20,\n     }\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(table)",
      "tags":{
        "usebeautiful":["beautiful.maximized_honor_padding Honor the screen padding when maximizing."]
      },
      "lineno":279
    },{
      "inferred":true,
      "subparams":{
        "table":["table.name","table.mm_width","table.mm_height","table.name","table.viewport_id"]
      },
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table.mm_height":" The screen physical height.",
          "table.viewport_id":" The identifier of the viewport this output\n  corresponds to.",
          "table.mm_width":" The screen physical width.",
          "table.name":" The output name.",
          "table":""
        }
      },
      "summary":"A list of outputs for this screen with their size in mm.",
      "name":"outputs",
      "modifiers":{
        "return":[],
        "readonly":[[]],
        "param":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "5":{
            "type":"integer"
          },
          "6":[],
          "table.mm_height":{
            "type":"integer"
          },
          "table.viewport_id":{
            "type":"integer"
          },
          "table.mm_width":{
            "type":"integer"
          },
          "table.name":{
            "type":"integer"
          },
          "table":[]
        }
      },
      "description":"\n\n Please note that the table content may vary. In some case, it might also be\n empty.\n\n An easy way to check if a screen is the laptop screen is usually:\n\n    if s.outputs[\"LVDS-1\"] then\n        -- do something\n    end\n\n **Signal:**\n\n  * *property::outputs*\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(table)",
      "tags":{
        "readonly":[""]
      },
      "lineno":332
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" A client."
        }
      },
      "summary":"Get the preferred screen in the context of a client.",
      "name":"awful.screen.preferred",
      "modifiers":{
        "return":[{
            "type":"screen"
          }],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"\n\n This is exactly the same as `awful.screen.focused` except that it avoids\n clients being moved when Awesome is restarted.\n This is used in the default `rc.lua` to ensure clients get assigned to the\n focused screen by default.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(c)",
      "tags":[],
      "lineno":368
    },{
      "inferred":false,
      "subparams":{
        "awful":["awful.screen.default_focused_args"]
      },
      "parameter":"field",
      "params":{
        "map":{
          "awful.screen.default_focused_args":""
        }
      },
      "summary":"The defaults arguments for `awful.screen.focused`.",
      "name":"awful.screen.default_focused_args",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"table",
            "opt":"{}"
          },
          "awful.screen.default_focused_args":{
            "type":"table",
            "opt":"{}"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"()",
      "tags":[],
      "lineno":375
    },{
      "inferred":true,
      "subparams":{
        "args":["args.client","args.mouse"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.client":" Use the client screen instead of the\n   mouse screen.",
          "args":"",
          "args.mouse":" Use the mouse screen"
        }
      },
      "summary":"Get the focused screen.",
      "name":"awful.screen.focused",
      "modifiers":{
        "return":[{
            "type":"?screen"
          }],
        "param":{
          "1":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "2":{
            "type":"boolean",
            "opt":"false"
          },
          "3":{
            "type":"boolean",
            "opt":"true"
          },
          "args.client":{
            "type":"boolean",
            "opt":"false"
          },
          "args":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "args.mouse":{
            "type":"boolean",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "2":{
            "type":"boolean",
            "opt":"false"
          },
          "3":{
            "type":"boolean",
            "opt":"true"
          },
          "args.client":{
            "type":"boolean",
            "opt":"false"
          },
          "args":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "args.mouse":{
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"\n\n It is possible to set `awful.screen.default_focused_args` to override the\n default settings.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"([args])",
      "tags":[],
      "lineno":387
    },{
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.bounding_rect":" A bounding rectangle. This parameter is\n   incompatible with `honor_workarea`.",
          "args.margins":" Apply some margins on the output.\n   This can either be a number or a table with *left*, *right*, *top*\n   and *bottom* keys.",
          "args.parent":" A parent drawable to use as base geometry.",
          "args.tag":" Use this tag's screen.",
          "args":" The arguments",
          "args.honor_padding":" Whether to honor the screen's padding.",
          "args.honor_workarea":" Whether to honor the screen's workarea."
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "2":{
            "type":"boolean",
            "opt":"false"
          },
          "3":{
            "type":"boolean",
            "opt":"false"
          },
          "4":{
            "type":"int|table",
            "opt":true
          },
          "5":{
            "type":"tag",
            "opt":true
          },
          "6":{
            "type":"drawable",
            "opt":true
          },
          "7":{
            "type":"table",
            "opt":true
          },
          "args.bounding_rect":{
            "type":"table",
            "opt":true
          },
          "args.margins":{
            "type":"int|table",
            "opt":true
          },
          "args.parent":{
            "type":"drawable",
            "opt":true
          },
          "args.tag":{
            "type":"tag",
            "opt":true
          },
          "args":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "args.honor_padding":{
            "type":"boolean",
            "opt":"false"
          },
          "args.honor_workarea":{
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "2":{
            "type":"boolean",
            "opt":"false"
          },
          "3":{
            "type":"boolean",
            "opt":"false"
          },
          "4":{
            "type":"int|table",
            "opt":true
          },
          "5":{
            "type":"tag",
            "opt":true
          },
          "6":{
            "type":"drawable",
            "opt":true
          },
          "7":{
            "type":"table",
            "opt":true
          },
          "args.bounding_rect":{
            "type":"table",
            "opt":true
          },
          "args.margins":{
            "type":"int|table",
            "opt":true
          },
          "args.parent":{
            "type":"drawable",
            "opt":true
          },
          "args.tag":{
            "type":"tag",
            "opt":true
          },
          "args":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "args.honor_padding":{
            "type":"boolean",
            "opt":"false"
          },
          "args.honor_workarea":{
            "type":"boolean",
            "opt":"false"
          }
        },
        "usage":[[]]
      },
      "description":"\n\n This method computes the different variants of the \"usable\" screen geometry.\n",
      "tags":[],
      "section":"staticfct",
      "inferred":true,
      "subparams":{
        "args":["args.honor_padding","args.honor_workarea","args.margins","args.tag","args.parent","args.bounding_rect"]
      },
      "summary":"Get a placement bounding geometry.",
      "name":"get_bounding_geometry",
      "kind":"static module functions",
      "usage":["local geo = screen:get_bounding_geometry {\n    honor_padding  = true,\n    honor_workarea = true,\n    margins        = {\n         left = 20,\n    },\n}\n"],
      "args":"([args={}])",
      "type":"staticfct",
      "lineno":417
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":" The clients list, ordered from top to bottom."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n Minimized and unmanaged clients are not included in this list as they are\n technically not on the screen.\n\n The clients on tags that are currently not visible are not part of this list.\n\n Clients are returned using the stacking order (from top to bottom).\n See `get_clients` if you want them in the order used in the tasklist by\n default.\n",
      "tags":{
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The list of visible clients for the screen.",
      "name":"clients",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":463
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"stacked",
        "map":{
          "stacked":" Use stacking order? (top to bottom)"
        }
      },
      "summary":"Get the list of visible clients for the screen.",
      "name":"get_clients",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "stacked":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "stacked":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"\n\n This is used by `screen.clients` internally (with `stacked=true`).\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"([stacked=true])",
      "tags":[],
      "lineno":470
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":" The clients list, ordered from top to bottom."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n This includes minimized clients and clients on hidden tags.\n",
      "tags":{
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Get the list of clients assigned to the screen but not currently visible.",
      "name":"hidden_clients",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":491
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":" The clients list, ordered from top to bottom."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"All clients assigned to the screen.",
      "name":"all_clients",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":510
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"stacked",
        "map":{
          "stacked":" Use stacking order? (top to bottom)"
        }
      },
      "summary":"Get all clients assigned to the screen.",
      "name":"get_all_clients",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "stacked":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "stacked":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"\n\n This is used by `all_clients` internally (with `stacked=true`).\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"([stacked=true])",
      "tags":[],
      "lineno":517
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":" The clients list, ordered from top to bottom."
        }
      },
      "summary":"Tiled clients for the screen.",
      "name":"tiled_clients",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n Same as `clients`, but excluding:\n\n * fullscreen clients\n * maximized clients\n * floating clients\n\n \n\n![Usage example](../images/AUTOGEN_screen_tiled_clients.svg)\n\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(table)",
      "tags":[],
      "lineno":537
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"stacked",
        "map":{
          "stacked":" Use stacking order? (top to bottom)"
        }
      },
      "summary":"Get tiled clients for the screen.",
      "name":"get_tiled_clients",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "stacked":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "stacked":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"\n\n This is used by `tiles_clients` internally (with `stacked=true`).\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"([stacked=true])",
      "tags":[],
      "lineno":544
    },{
      "inferred":true,
      "subparams":{
        "func":["func.screen"]
      },
      "parameter":"field",
      "params":{
        "1":"func",
        "map":{
          "func.screen":" The screen.",
          "func":" The function to call."
        }
      },
      "summary":"Call a function for each existing and created-in-the-future screen.",
      "name":"awful.screen.connect_for_each_screen",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"function"
          },
          "2":{
            "type":"screen"
          },
          "func.screen":{
            "type":"screen"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"function"
          },
          "2":{
            "type":"screen"
          },
          "func.screen":{
            "type":"screen"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(func)",
      "tags":[],
      "lineno":563
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"func",
        "map":{
          "func":" The function that should no longer be called."
        }
      },
      "summary":"Undo the effect of connect_for_each_screen.",
      "name":"awful.screen.disconnect_for_each_screen",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"function"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"function"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(func)",
      "tags":[],
      "lineno":573
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "summary":"A list of all tags on the screen.",
      "name":"tags",
      "modifiers":{
        "readonly":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n Use `tag.screen`, `awful.tag.add`,\n `awful.tag.new` or `t:delete()` to alter this list.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(table)",
      "tags":{
        "readonly":[""]
      },
      "lineno":587
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":[],
          "table":[]
        },
        "readonly":[[]],
        "param":{
          "1":[],
          "table":[]
        },
        "return":[{
            "type":"table"
          }]
      },
      "description":"",
      "tags":{
        "see":[],
        "readonly":[""]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"A list of all selected tags on the screen.",
      "name":"selected_tags",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":613
    },{
      "parameter":"field",
      "params":{
        "1":"tag",
        "map":{
          "tag":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":[],
          "tag":[]
        },
        "readonly":[[]],
        "param":{
          "1":[],
          "tag":[]
        },
        "return":[{
            "type":"?tag"
          }]
      },
      "description":"",
      "tags":{
        "see":[],
        "readonly":[""]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The first selected tag.",
      "name":"selected_tag",
      "type":"property",
      "args":"(tag)",
      "kind":"object properties",
      "lineno":633
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"ratios",
        "2":"mode",
        "map":{
          "mode":" Either \"vertical\" or \"horizontal\". If none is\n  specified, it will split along the longest axis.",
          "ratios":" The different ratios to split into. If none is\n  provided, it is split in half."
        }
      },
      "summary":"Split the screen into multiple screens.",
      "name":"split",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "mode":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "ratios":{
            "optchain":true,
            "type":"table",
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "mode":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "ratios":{
            "optchain":true,
            "type":"table",
            "opt":true
          }
        }
      },
      "description":"\n\n This is useful to turn ultrawide monitors into something more useful without\n fancy client layouts:\n\n \n\n![Usage example](../images/AUTOGEN_awful_screen_split1.svg)\n\n \n     screen[1]:split({1/5, 3/5, 1/5})\n\n It can also be used to turn a vertical \"side\" screen into 2 smaller screens:\n\n \n\n![Usage example](../images/AUTOGEN_awful_screen_split2.svg)\n\n \n     screen[1]:split()\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"([ratios[, mode]])",
      "tags":[],
      "lineno":688
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"enabled",
        "map":{
          "enabled":" Enable or disable automatic DPI support."
        }
      },
      "summary":"Enable the automatic calculation of the screen DPI (experimental).",
      "name":"awful.screen.set_auto_dpi_enabled",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"boolean"
          },
          "enabled":{
            "type":"boolean"
          }
        },
        "field":{
          "1":{
            "type":"boolean"
          },
          "enabled":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n This will cause many elements such as the font and some widgets to be scaled\n so they look the same (physical) size on different devices with different\n pixel density.\n\n It is calculated using the information provided from `xrandr`.\n\n When enabled, the theme and configuration must avoid using pixel sizes for\n different elements as this will cause misalignment or hidden content on some\n devices.\n\n Note that it has to be called early in `rc.lua` and requires restarting\n awesome to take effect. It is disabled by default and changes introduced in\n minor releases of Awesome may slightly break the behavior as more components\n gain support for HiDPI.\n\n When disabled the DPI is acquired from the `Xft.dpi` X resource (xrdb),\n defaulting to 96.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(enabled)",
      "tags":[],
      "lineno":769
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" the DPI value."
        }
      },
      "summary":"The number of pixels per inch of the screen.",
      "name":"dpi",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"\n\n The default DPI comes from the X11 server. In most case, it will be 96. If\n `autodpi` is set to `true` on the screen, it will use the least dense dpi\n from the screen outputs. Most of the time, screens only have a single output,\n however it will have two (or more) when \"clone mode\" is used (eg, when a\n screen is duplicated on a projector).\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":[],
      "lineno":787
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" the DPI value."
        }
      },
      "summary":"The lowest density DPI from all of the (physical) outputs.",
      "name":"minimum_dpi",
      "modifiers":{
        "return":[],
        "readonly":[[]],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":{
        "readonly":[""]
      },
      "lineno":792
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" the DPI value."
        }
      },
      "summary":"The highest density DPI from all of the (physical) outputs.",
      "name":"maximum_dpi",
      "modifiers":{
        "return":[],
        "readonly":[[]],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":{
        "readonly":[""]
      },
      "lineno":797
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" the DPI value."
        }
      },
      "summary":"The preferred DPI from all of the (physical) outputs.",
      "name":"preferred_dpi",
      "modifiers":{
        "return":[],
        "readonly":[[]],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"\n\n This is computed by normalizing all output to fill the area, then picking\n the lowest of the resulting virtual DPIs.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":{
        "readonly":[""]
      },
      "lineno":806
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The maximum diagonal size in millimeters.",
      "name":"mm_maximum_size",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":[],
      "lineno":811
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The minimum diagonal size in millimeters.",
      "name":"mm_minimum_size",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":[],
      "lineno":816
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The maximum diagonal size in inches.",
      "name":"inch_maximum_size",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":[],
      "lineno":821
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The minimum diagonal size in inches.",
      "name":"inch_minimum_size",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":[],
      "lineno":826
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"context",
        "map":{
          "context":" The context."
        }
      },
      "summary":"Emitted when a new screen is added.",
      "name":"request::desktop_decoration",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "request":[[]]
      },
      "description":"\n\n The handler(s) of this signal are responsible of adding elements such as\n bars, docks or other elements to a screen. The signal is emitted when a\n screen is added, including during startup.\n\n The only default implementation is the one provided by `rc.lua`.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(context)",
      "tags":{
        "request":["screen wallpaper added granted When the decorations needs to be\n  added to a new screen."]
      },
      "lineno":839
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"context",
        "map":{
          "context":" The context."
        }
      },
      "summary":"Emitted when a new screen needs a wallpaper.",
      "name":"request::wallpaper",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "request":[[],[],[]]
      },
      "description":"\n\n The handler(s) of this signal are responsible to set the wallpaper. The\n signal is emitted when a screen is added (including at startup), when its\n DPI changes or when its geometry changes.\n\n The only default implementation is the one provided by `rc.lua`.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(context)",
      "tags":{
        "request":["screen wallpaper added granted When the wallpaper needs to be\n  added to a new screen.","screen wallpaper geometry granted When the wallpaper needs to be\n  updated because the resolution changed.","screen wallpaper dpi granted When the wallpaper needs to be\n  updated because the DPI changed."]
      },
      "lineno":856
    },{
      "parameter":"field",
      "params":{
        "1":"viewport",
        "2":"args",
        "map":{
          "viewport.geometry":" A table with `x`, `y`, `width` and `height`\n  keys.",
          "viewport.minimum_dpi":" The least dense DPI.",
          "viewport":"",
          "viewport.outputs":" A table with the monitor name and possibly the\n  `mm_width` and `mm_height` values if they are available.",
          "viewport.maximum_dpi":" The most dense DPI.",
          "args.context":" Why was this signal sent.",
          "args":"",
          "viewport.id":" An identifier for this viewport (by pixel\n  resolution). It\n  will not change when outputs are modified, but will change when the\n  resolution changes. Note that if it fully disappear, the next time an\n  viewport with the same resolution appears, it will have a different `id`.",
          "viewport.preferred_dpi":" The relative least dense DPI."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"table"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"table"
          },
          "9":{
            "type":"string"
          },
          "viewport.geometry":{
            "type":"table"
          },
          "viewport.minimum_dpi":{
            "type":"number"
          },
          "viewport":{
            "type":"table"
          },
          "viewport.outputs":{
            "type":"table"
          },
          "viewport.maximum_dpi":{
            "type":"number"
          },
          "args.context":{
            "type":"string"
          },
          "args":{
            "type":"table"
          },
          "viewport.id":{
            "type":"number"
          },
          "viewport.preferred_dpi":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"table"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"table"
          },
          "9":{
            "type":"string"
          },
          "viewport.geometry":{
            "type":"table"
          },
          "viewport.minimum_dpi":{
            "type":"number"
          },
          "viewport":{
            "type":"table"
          },
          "viewport.outputs":{
            "type":"table"
          },
          "viewport.maximum_dpi":{
            "type":"number"
          },
          "args.context":{
            "type":"string"
          },
          "args":{
            "type":"table"
          },
          "viewport.id":{
            "type":"number"
          },
          "viewport.preferred_dpi":{
            "type":"number"
          }
        }
      },
      "description":"\n\n Important: This only exists when Awesome is started with `--screen off`.\n Please also note that this doesn't mean it will appear when a screen is\n physically plugged. Depending on the configuration a tool like `arandr` or\n the `xrandr` command is needed.\n\n The default handler will create a screen that fills the area.\n\n To disconnect the default handler, use:\n\n    screen.disconnect_signal(\n        \"request::create\", awful.screen.create_screen_handler\n    )\n",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "args":["args.context"],
        "viewport":["viewport.geometry","viewport.outputs","viewport.id","viewport.minimum_dpi","viewport.maximum_dpi","viewport.preferred_dpi"]
      },
      "summary":"When a new (physical) screen area has been added.",
      "name":"request::create",
      "type":"signal",
      "args":"(viewport, args)",
      "kind":"signals",
      "lineno":890
    },{
      "parameter":"field",
      "params":{
        "1":"viewport",
        "2":"args",
        "map":{
          "viewport.geometry":" A table with `x`, `y`, `width` and `height`\n  keys.",
          "viewport.minimum_dpi":" The least dense DPI.",
          "viewport":"",
          "viewport.outputs":" A table with the monitor name and possibly the\n  `mm_width` and `mm_height` values if they are available.",
          "viewport.maximum_dpi":" The most dense DPI.",
          "args.context":" Why was this signal sent.",
          "args":"",
          "viewport.id":" An identifier for this viewport (by pixel\n  resolution). It will not change when outputs are modified, but will change\n  when the resolution changes. Note that if it fully disappear, the next time\n  an viewport with the same resolution appears, it will have a different `id`.",
          "viewport.preferred_dpi":" The relative least dense DPI."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"table"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"table"
          },
          "9":{
            "type":"string"
          },
          "viewport.geometry":{
            "type":"table"
          },
          "viewport.minimum_dpi":{
            "type":"number"
          },
          "viewport":{
            "type":"table"
          },
          "viewport.outputs":{
            "type":"table"
          },
          "viewport.maximum_dpi":{
            "type":"number"
          },
          "args.context":{
            "type":"string"
          },
          "args":{
            "type":"table"
          },
          "viewport.id":{
            "type":"number"
          },
          "viewport.preferred_dpi":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"table"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"table"
          },
          "9":{
            "type":"string"
          },
          "viewport.geometry":{
            "type":"table"
          },
          "viewport.minimum_dpi":{
            "type":"number"
          },
          "viewport":{
            "type":"table"
          },
          "viewport.outputs":{
            "type":"table"
          },
          "viewport.maximum_dpi":{
            "type":"number"
          },
          "args.context":{
            "type":"string"
          },
          "args":{
            "type":"table"
          },
          "viewport.id":{
            "type":"number"
          },
          "viewport.preferred_dpi":{
            "type":"number"
          }
        }
      },
      "description":"\n\n Important: This only exists when Awesome is started with `--screen off`.\n\n If you replace the default handler, it is up to you to find the screen(s)\n associated with this viewport.\n\n To disconnect the default handler, use:\n\n    screen.disconnect_signal(\n        \"request::remove\", awful.screen.remove_screen_handler\n    )\n",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "args":["args.context"],
        "viewport":["viewport.geometry","viewport.outputs","viewport.id","viewport.minimum_dpi","viewport.maximum_dpi","viewport.preferred_dpi"]
      },
      "summary":"When a physical monitor viewport has been removed.",
      "name":"request::remove",
      "type":"signal",
      "args":"(viewport, args)",
      "kind":"signals",
      "lineno":920
    },{
      "parameter":"field",
      "params":{
        "1":"old_viewport",
        "2":"new_viewport",
        "3":"args",
        "map":{
          "new_viewport.minimum_dpi":" The least dense DPI.",
          "old_viewport.geometry":" A table with `x`, `y`, `width` and\n  `height` keys.",
          "args.context":" Why was this signal sent.",
          "args":"",
          "old_viewport.outputs":" A table with the monitor name and\n  possibly the `mm_width` and `mm_height` values if they are available.",
          "new_viewport":"",
          "new_viewport.preferred_dpi":" The relative least dense DPI.",
          "old_viewport.id":" An identifier for this viewport (by pixel\n  resolution). It will not change when outputs are modified, but will change\n  when the resolution changes. Note that if it fully disappear, the next\n  time an viewport with the same resolution appears, it will have a different\n  `id`.",
          "new_viewport.geometry":" A table with `x`, `y`, `width` and\n  `height` keys.",
          "old_viewport.minimum_dpi":" The least dense DPI.",
          "new_viewport.maximum_dpi":" The most dense DPI.",
          "new_viewport.outputs":" A table with the monitor name and\n  possibly the\n  `mm_width` and `mm_height` values if they are available.",
          "new_viewport.id":" An identifier for this viewport (by pixel\n  resolution). It will not change when outputs are modified, but will change\n  when the  resolution changes. Note that if it fully disappear, the next time\n  an viewport with the same resolution appears, it will have a different `id`.",
          "old_viewport.maximum_dpi":" The most dense DPI.",
          "old_viewport":"",
          "old_viewport.preferred_dpi":" The relative least dense DPI."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"table"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"table"
          },
          "9":{
            "type":"table"
          },
          "10":{
            "type":"table"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"table"
          },
          "16":{
            "type":"string"
          },
          "new_viewport.minimum_dpi":{
            "type":"number"
          },
          "old_viewport.geometry":{
            "type":"table"
          },
          "args.context":{
            "type":"string"
          },
          "args":{
            "type":"table"
          },
          "old_viewport.outputs":{
            "type":"table"
          },
          "new_viewport":{
            "type":"table"
          },
          "new_viewport.preferred_dpi":{
            "type":"number"
          },
          "old_viewport.id":{
            "type":"number"
          },
          "new_viewport.geometry":{
            "type":"table"
          },
          "old_viewport.minimum_dpi":{
            "type":"number"
          },
          "new_viewport.maximum_dpi":{
            "type":"number"
          },
          "new_viewport.outputs":{
            "type":"table"
          },
          "new_viewport.id":{
            "type":"number"
          },
          "old_viewport.maximum_dpi":{
            "type":"number"
          },
          "old_viewport":{
            "type":"table"
          },
          "old_viewport.preferred_dpi":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"table"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"table"
          },
          "9":{
            "type":"table"
          },
          "10":{
            "type":"table"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"table"
          },
          "16":{
            "type":"string"
          },
          "new_viewport.minimum_dpi":{
            "type":"number"
          },
          "old_viewport.geometry":{
            "type":"table"
          },
          "args.context":{
            "type":"string"
          },
          "args":{
            "type":"table"
          },
          "old_viewport.outputs":{
            "type":"table"
          },
          "new_viewport":{
            "type":"table"
          },
          "new_viewport.preferred_dpi":{
            "type":"number"
          },
          "old_viewport.id":{
            "type":"number"
          },
          "new_viewport.geometry":{
            "type":"table"
          },
          "old_viewport.minimum_dpi":{
            "type":"number"
          },
          "new_viewport.maximum_dpi":{
            "type":"number"
          },
          "new_viewport.outputs":{
            "type":"table"
          },
          "new_viewport.id":{
            "type":"number"
          },
          "old_viewport.maximum_dpi":{
            "type":"number"
          },
          "old_viewport":{
            "type":"table"
          },
          "old_viewport.preferred_dpi":{
            "type":"number"
          }
        }
      },
      "description":"\n\n Important: This only exists when Awesome is started with `--screen off`.\n\n Note that given the viewports are not the same, the `id` won't be the same.\n Also note that if multiple new viewports fit within a single \"old\" viewport,\n the resized screen will be the one with the largest total overlapping\n viewport (`intersection.width*intersection.height`), regardless of the\n outputs names.\n\n To disconnect the default handler, use:\n\n    screen.disconnect_signal(\n        \"request::resize\", awful.screen.resize_screen_handler\n    )\n",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "new_viewport":["new_viewport.geometry","new_viewport.outputs","new_viewport.id","new_viewport.minimum_dpi","new_viewport.maximum_dpi","new_viewport.preferred_dpi"],
        "old_viewport":["old_viewport.geometry","old_viewport.outputs","old_viewport.id","old_viewport.minimum_dpi","old_viewport.maximum_dpi","old_viewport.preferred_dpi"],
        "args":["args.context"]
      },
      "summary":"When a physical viewport resolution has changed or it has been replaced.",
      "name":"request::resize",
      "type":"signal",
      "args":"(old_viewport, new_viewport, args)",
      "kind":"signals",
      "lineno":967
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n Important: This only exists when Awesome is started with `--screen off`.\n\n A simplified implementation looks like:\n\n    function(viewport --[[, args]])\n        local geo = viewport.geometry\n        local s = screen.fake_add(geo.x, geo.y, geo.width, geo.height)\n        s:emit_signal(\"request::desktop_decoration\")\n        s:emit_signal(\"request::wallpaper\")\n    end\n\n If you implement this by hand, you must also implement handler for the\n `request::remove` and `request::resize`.\n",
      "tags":{
        "see":[]
      },
      "section":"signalhandler",
      "inferred":true,
      "subparams":[],
      "summary":"Default handler for `request::create`.",
      "name":"awful.screen.create_screen_handler",
      "type":"signalhandler",
      "args":"()",
      "kind":"request handlers",
      "lineno":986
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n Important: This only exists when Awesome is started with `--screen off`.\n\n A simplified version of the logic is:\n\n    function (viewport --[[, args]])\n        local geo = viewport.geometry\n        for s in screen do\n            if gears.geometry.rectangle.are_equal(geo, s.geometry) then\n                s:fake_remove()\n                return\n            end\n        end\n    end\n",
      "tags":{
        "see":[]
      },
      "section":"signalhandler",
      "inferred":true,
      "subparams":[],
      "summary":"Default handler for `request::remove`.",
      "name":"awful.screen.remove_screen_handler",
      "type":"signalhandler",
      "args":"()",
      "kind":"request handlers",
      "lineno":1005
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n Important: This only exists when Awesome is started with `--screen off`.\n\n A simplified version of the logic is:\n\n    function (old_viewport, new_viewport --[[, args]])\n        local old_geo, new_geo = old_viewport.geometry, new_viewport.geometry\n        for s in screen do\n            local sgeo = new_viewport.geometry\n            if gears.geometry.rectangle.are_equal(old_geo, s.geometry) then\n                s:fake_resize(\n                    sgeo.x, sgeo.y, sgeo.width, sgeo.height\n                )\n            end\n        end\n    end\n",
      "tags":{
        "see":[]
      },
      "section":"signalhandler",
      "inferred":true,
      "subparams":[],
      "summary":"Default handler for `request::resize`.",
      "name":"awful.screen.resize_screen_handler",
      "type":"signalhandler",
      "args":"()",
      "kind":"request handlers",
      "lineno":1026
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"When the tag history changed.",
      "name":"tag::history::update",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":1070
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1093
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1099
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1112
    }],
  "type":"coreclassmod",
  "file":"/home/cji/portless/awesome/build/objects/screen.c",
  "package":"",
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2008-2009 Julien Danjou"
  },
  "lineno":54
}