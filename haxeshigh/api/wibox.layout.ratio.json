{
  "modifiers":{
    "see":[[]],
    "author":[[]],
    "copyright":[],
    "supermodule":[[]],
    "usage":[[]]
  },
  "description":" Each widget is assigned a\n ratio (percentage) of the total space. Multiple methods are available to\n adjust this ratio.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_defaults_ratio.svg)\n",
  "type":"layoutmod",
  "mod_name":"wibox.layout.ratio",
  "tags":{
    "author":["Emmanuel Lepage Vallee"],
    "copyright":"2016 Emmanuel Lepage Vallee",
    "see":[],
    "supermodule":["wibox.layout.flex"]
  },
  "inferred":true,
  "kind":"widget_layouts",
  "summary":"A layout filling all the available space.",
  "sections":{
    "by_name":[]
  },
  "name":"wibox.layout.ratio",
  "usage":["local w = wibox.widget {\n    generic_widget( &#34first&#34  ),\n    generic_widget( &#34second&#34 ),\n    generic_widget( &#34third&#34  ),\n    layout  = wibox.layout.ratio.horizontal\n}\nw:adjust_ratio(2, 0.44, 0.33, 0.22)\n"],
  "file":"/home/cji/portless/awesome/build/lib/wibox/layout/ratio.lua",
  "package":"",
  "items":[{
      "parameter":"field",
      "params":{
        "1":"spacing_widget",
        "map":{
          "spacing_widget":""
        }
      },
      "modifiers":{
        "interface":[[]],
        "usage":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "spacing_widget":{
            "type":"widget"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "spacing_widget":{
            "type":"widget"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n By default, no widget is used.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_ratio_spacing_widget.svg)\n",
      "tags":{
        "propemits":["true false"],
        "interface":["layout"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The widget used to fill the spacing between the layout elements.",
      "name":"spacing_widget",
      "kind":"object properties",
      "usage":["-- Use the separator widget directly\nlocal w1 = wibox.widget {\n    spacing        = 10,\n    spacing_widget = wibox.widget.separator,\n    layout         = wibox.layout.ratio.horizontal\n}\n \n-- Use a standard declarative widget construct\nlocal w2 = wibox.widget {\n    spacing = 10,\n    spacing_widget = {\n        color  = &#34#00ff00&#34,\n        shape  = gears.shape.circle,\n        widget = wibox.widget.separator,\n    },\n    layout = wibox.layout.ratio.horizontal\n}\n \n-- Use composed widgets\nlocal w3 = wibox.widget {\n    spacing = 10,\n    spacing_widget = {\n        {\n            text   = &#34F&#34,\n            widget = wibox.widget.textbox,\n        },\n        bg     = &#34#ff0000&#34,\n        widget = wibox.container.background,\n    },\n    layout = wibox.layout.ratio.horizontal\n}\n \n-- Use negative spacing to create a powerline effect\nlocal w4 = wibox.widget {\n    spacing = -12,\n    spacing_widget = {\n        color  = &#34#ff0000&#34,\n        shape  = gears.shape.powerline,\n        widget = wibox.widget.separator,\n    },\n    layout = wibox.layout.ratio.horizontal\n}\n"],
      "args":"(spacing_widget)",
      "type":"property",
      "lineno":93
    },{
      "parameter":"field",
      "params":{
        "1":"spacing",
        "map":{
          "spacing":" Spacing between widgets."
        }
      },
      "modifiers":{
        "interface":[[]],
        "usage":[[]],
        "field":{
          "1":{
            "type":"number"
          },
          "spacing":{
            "type":"number"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "spacing":{
            "type":"number"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_ratio_spacing.svg)\n",
      "tags":{
        "propemits":["true false"],
        "interface":["layout"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Add spacing between each layout widgets.",
      "name":"spacing",
      "kind":"object properties",
      "usage":["for i=1, 5 do\n    local w = wibox.widget {\n        first,\n        second,\n        third,\n        spacing = i*3,\n        layout  = wibox.layout.ratio.horizontal\n    }\nend\n"],
      "args":"(spacing)",
      "type":"property",
      "lineno":115
    },{
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"increment",
        "map":{
          "index":" The widget index to change",
          "increment":" An floating point value between -1 and 1 where the\n   end result is within 0 and 1"
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index":{
            "type":"number"
          },
          "increment":{
            "type":"number"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index":{
            "type":"number"
          },
          "increment":{
            "type":"number"
          }
        },
        "usage":[[]]
      },
      "description":"\n If the increment produce an invalid ratio (not between 0 and 1), the method\n do nothing.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_ratio_inc_ratio.svg)\n",
      "tags":[],
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Increase the ratio of \"widget\".",
      "name":"inc_ratio",
      "kind":"object methods ",
      "usage":["local ret = wibox.layout.fixed.vertical()\nlocal w = wibox.widget {\n    first,\n    second,\n    third,\n    layout  = wibox.layout.ratio.horizontal\n}\nfor i=1, 5 do\n    w:inc_ratio(2, 0.1)\nend\n"],
      "args":"(index, increment)",
      "type":"method",
      "lineno":302
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"increment",
        "map":{
          "increment":" An floating point value between -1 and 1 where the\n   end result is within 0 and 1",
          "widget":" The widget to adjust"
        }
      },
      "summary":"Increment the ratio of the first instance of `widget`.",
      "name":"inc_widget_ratio",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "increment":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "increment":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        }
      },
      "description":"\n If the increment produce an invalid ratio (not between 0 and 1), the method\n do nothing.\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget, increment)",
      "tags":[],
      "lineno":321
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"percent",
        "map":{
          "index":" The index of the widget to change",
          "percent":" An floating point value between 0 and 1"
        }
      },
      "summary":"Set the ratio of the widget at position `index`.",
      "name":"set_ratio",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index":{
            "type":"number"
          },
          "percent":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index":{
            "type":"number"
          },
          "percent":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index, percent)",
      "tags":[],
      "lineno":334
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" The widget index to query"
        }
      },
      "summary":"Get the ratio at `index`.",
      "name":"get_ratio",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "index":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "index":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index)",
      "tags":[],
      "lineno":363
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"percent",
        "map":{
          "percent":" A floating point value between 0 and 1.",
          "widget":" The widget to adjust."
        }
      },
      "summary":"Set the ratio of `widget` to `percent`.",
      "name":"set_widget_ratio",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "percent":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "percent":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget, percent)",
      "tags":[],
      "lineno":373
    },{
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"before",
        "3":"itself",
        "4":"after",
        "map":{
          "index":" The index of the widget to change",
          "before":" The sum of the ratio before the widget",
          "after":" The sum of the ratio after the widget",
          "itself":" The ratio for \"widget\""
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "index":{
            "type":"number"
          },
          "before":{
            "type":"number"
          },
          "after":{
            "type":"number"
          },
          "itself":{
            "type":"number"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "index":{
            "type":"number"
          },
          "before":{
            "type":"number"
          },
          "after":{
            "type":"number"
          },
          "itself":{
            "type":"number"
          }
        },
        "usage":[[]]
      },
      "description":"\n The sum of before, itself and after must be 1 or nothing will be done.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_ratio_adjust_ratio.svg)\n",
      "tags":[],
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Update all widgets to match a set of a ratio.",
      "name":"adjust_ratio",
      "kind":"object methods ",
      "usage":["local ret = wibox.layout.fixed.vertical()\nlocal w = wibox.widget {\n    first,\n    second,\n    third,\n    layout  = wibox.layout.ratio.horizontal\n}\nlocal values = {\n    {0.25, 0.50, 0.25},\n    {0.33, 0.55, 0.12},\n    {0.123, 0.456, 0.789},\n    {0.123, 0, 0.789},\n    {0, 1, 0},\n}\nfor i=1, 5 do\n    w:adjust_ratio(2, unpack(values[i]))\nend\n"],
      "args":"(index, before, itself, after)",
      "type":"method",
      "lineno":410
    },{
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"index",
        "3":"before",
        "4":"before",
        "5":"itself",
        "6":"itself",
        "7":"after",
        "8":"after",
        "map":{
          "index":" The index of the widget to change",
          "before":" The sum of the ratio before the widget",
          "after":" The sum of the ratio after the widget",
          "itself":" The ratio for \"widget\""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "index":{
            "type":"number"
          },
          "before":{
            "type":"number"
          },
          "after":{
            "type":"number"
          },
          "itself":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "index":{
            "type":"number"
          },
          "before":{
            "type":"number"
          },
          "after":{
            "type":"number"
          },
          "itself":{
            "type":"number"
          }
        }
      },
      "description":"\n\n This method is kept for backwards compatibility, please use `:adjust_ratio` instead.",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Update all widgets to match a set of a ratio.",
      "name":"ajust_ratio",
      "type":"deprecated",
      "args":"(index, index, before, before, itself, itself, after, after)",
      "kind":"deprecated functions",
      "lineno":457
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"before",
        "3":"itself",
        "4":"after",
        "map":{
          "after":" The sum of the ratio after the widget",
          "before":" The sum of the ratio before the widget",
          "itself":" The ratio for \"widget\"",
          "widget":" The widget to adjust"
        }
      },
      "summary":"Update all widgets to match a set of a ratio.",
      "name":"adjust_widget_ratio",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "after":{
            "type":"number"
          },
          "before":{
            "type":"number"
          },
          "itself":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "after":{
            "type":"number"
          },
          "before":{
            "type":"number"
          },
          "itself":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget, before, itself, after)",
      "tags":[],
      "lineno":472
    },{
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"before",
        "3":"before",
        "4":"itself",
        "5":"itself",
        "6":"after",
        "7":"after",
        "map":{
          "after":" The sum of the ratio after the widget",
          "before":" The sum of the ratio before the widget",
          "itself":" The ratio for \"widget\"",
          "widget":" The widget to adjust"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "after":{
            "type":"number"
          },
          "before":{
            "type":"number"
          },
          "itself":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "after":{
            "type":"number"
          },
          "before":{
            "type":"number"
          },
          "itself":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        }
      },
      "description":"\n\n This method is kept for backwards compatibility, please use `:adjust_widget_ratio` instead.",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Update all widgets to match a set of a ratio.",
      "name":"ajust_widget_ratio",
      "type":"deprecated",
      "args":"(widget, before, before, itself, itself, after, after)",
      "kind":"deprecated functions",
      "lineno":488
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"...",
        "map":{
          "...":" Widgets that should be added (must at least be one)"
        }
      },
      "summary":"Add some widgets to the given fixed layout.",
      "name":"add",
      "modifiers":{
        "field":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        },
        "emitstparam":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(...)",
      "tags":{
        "emitstparam":["widget::added widget self The layout."],
        "emits":["widget::added All new widgets are passed in the parameters."]
      },
      "lineno":502
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" The widget index to remove"
        }
      },
      "summary":"Remove a widget from the layout.",
      "name":"remove",
      "modifiers":{
        "emits":[[]],
        "field":{
          "1":{
            "type":"number"
          },
          "index":{
            "type":"number"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "index":{
            "type":"number"
          }
        },
        "emitstparam":[[],[],[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index)",
      "tags":{
        "emits":["widget::removed"],
        "emitstparam":["widget::removed widget self The fixed layout.","widget::removed widget widget index The removed widget.","widget::removed number index The removed index."]
      },
      "lineno":526
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"widget",
        "map":{
          "index":" The position.",
          "widget":" The widget."
        }
      },
      "summary":"Insert a new widget in the layout at position `index`.",
      "name":"insert",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        },
        "emitstparam":[[],[],[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index, widget)",
      "tags":{
        "emitstparam":["widget::inserted widget self The ratio layout.","widget::inserted widget widget index The inserted widget.","widget::inserted number count The widget count."],
        "emits":["widget::inserted"]
      },
      "lineno":551
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"inner_fill_strategy",
        "map":{
          "inner_fill_strategy":" One of the value listed above."
        }
      },
      "summary":"Set how the space of invisible or `0x0` sized widget is redistributed.",
      "name":"inner_fill_strategy",
      "modifiers":{
        "param":{
          "1":{
            "type":"string"
          },
          "inner_fill_strategy":{
            "type":"string"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "inner_fill_strategy":{
            "type":"string"
          }
        }
      },
      "description":"\n\n Possible values:\n\n * \"default\": Honor the ratio and do not redistribute the space.\n * \"justify\": Distribute the space among remaining widgets.\n * \"center\": Squash remaining widgets and leave equal space on both side.\n * \"inner_spacing\": Add equal spacing between all widgets.\n * \"spacing\": Add equal spacing between all widgets and on the outside.\n * \"left\": Squash remaining widgets and leave empty space on the left.\n * \"right\": Squash remaining widgets and leave empty space on the right.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_ratio_strategy.svg)\n\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(inner_fill_strategy)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":585
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"...",
        "map":{
          "...":" Widgets that should be added to the layout."
        }
      },
      "summary":"Returns a new horizontal ratio layout.",
      "name":"horizontal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        }
      },
      "description":" A ratio layout shares the available space.\n equally among all widgets. Widgets can be added via :add(widget).",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(...)",
      "tags":[],
      "lineno":623
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"...",
        "map":{
          "...":" Widgets that should be added to the layout."
        }
      },
      "summary":"Returns a new vertical ratio layout.",
      "name":"vertical",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        }
      },
      "description":" A ratio layout shares the available space.\n equally among all widgets. Widgets can be added via :add(widget).",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(...)",
      "tags":[],
      "lineno":631
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"widget2",
        "map":{
          "index":" A widget or a widget index",
          "widget2":" The widget to replace the previous one with"
        }
      },
      "summary":"Set a widget at a specific index, replacing the current one.",
      "name":"set",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget2":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget2":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index, widget2)",
      "tags":{
        "emits":["widget::replaced"],
        "interface":["layout"],
        "emitstparam":["widget::replaced widget self The layout.","widget::replaced widget widget The inserted widget.","widget::replaced widget previous The previous widget.","widget::replaced number index The replaced index."]
      },
      "lineno":649
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"widget2",
        "3":"recursive",
        "map":{
          "widget2":" The widget to replace `widget` with",
          "widget":" The widget to replace",
          "recursive":" Recurse into all compatible layouts to\n   find the widget."
        }
      },
      "summary":"Replace the first instance of `widget` in the layout with `widget2`.",
      "name":"replace_widget",
      "modifiers":{
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget, widget2[, recursive=false])",
      "tags":{
        "emits":["widget::replaced"],
        "interface":["layout"],
        "emitstparam":["widget::replaced widget self The layout.","widget::replaced widget widget index The inserted widget.","widget::replaced widget previous The previous widget.","widget::replaced number index The replaced index."]
      },
      "lineno":665
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index1",
        "2":"index2",
        "map":{
          "index2":" The second widget index",
          "index1":" The first widget index"
        }
      },
      "summary":"Swap 2 widgets in a layout.",
      "name":"swap",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index2":{
            "type":"number"
          },
          "index1":{
            "type":"number"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index2":{
            "type":"number"
          },
          "index1":{
            "type":"number"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index1, index2)",
      "tags":{
        "emits":["widget::swapped"],
        "interface":["layout"],
        "emitstparam":["widget::swapped widget self The layout.","widget::swapped widget widget1 The first widget.","widget::swapped widget widget2 The second widget.","widget::swapped number index1 The first index.","widget::swapped number index1 The second index."]
      },
      "lineno":680
    },{
      "parameter":"field",
      "params":{
        "1":"widget1",
        "2":"widget2",
        "3":"recursive",
        "map":{
          "widget2":" The second widget",
          "recursive":" Recurse into all compatible layouts to\n   find the widget.",
          "widget1":" The first widget"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget1":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget1":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[],[]],
        "interface":[[]]
      },
      "description":"\n\n If `widget1` is present multiple time, only the first instance is swapped.\n\n Calls `set` internally, so the signal `widget::replaced` is emitted for both\n widgets as well.\n",
      "tags":{
        "see":[],
        "emits":["widget::swapped"],
        "interface":["layout"],
        "emitstparam":["widget::swapped widget self The layout.","widget::swapped widget widget1 The first widget.","widget::swapped widget widget2 The second widget.","widget::swapped number index1 The first index.","widget::swapped number index1 The second index."]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Swap 2 widgets in a layout.",
      "name":"swap_widgets",
      "type":"method",
      "args":"(widget1, widget2[, recursive=false])",
      "kind":"object methods ",
      "lineno":703
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Reset the layout.",
      "name":"reset",
      "modifiers":{
        "emits":[[]],
        "field":[],
        "return":[],
        "emitstparam":[[]],
        "interface":[[]]
      },
      "description":" This removes all widgets from the layout.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":{
        "interface":["layout"],
        "emits":["widget::reset"],
        "emitstparam":["widget::reset widget self The layout."]
      },
      "lineno":709
    }],
  "lineno":25
}
