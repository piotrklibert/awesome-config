{
  "inferred":true,
  "kind":"input_handling",
  "mod_name":"awful.keyboard",
  "summary":"Utilities related to the keyboard and keybindings.",
  "sections":{
    "by_name":[]
  },
  "name":"awful.keyboard",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"",
  "items":[{
      "parameter":"field",
      "params":{
        "1":"modifiers",
        "2":"key",
        "map":{
          "key":" The key.",
          "modifiers":" A modified table. Valid modifiers are: `Any`, `Mod1`,\n   `Mod2`, `Mod3`, `Mod4`, `Mod5`, `Shift`, `Lock` and `Control`."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "key":{
            "type":"string"
          },
          "modifiers":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "key":{
            "type":"string"
          },
          "modifiers":{
            "type":"table"
          }
        }
      },
      "description":"\n\n If an awesome keybinding is assigned to the combination, it should be\n executed.\n\n To limit the chances of accidentally leaving a modifier key locked when\n calling this function from a keybinding, make sure is attached to the\n release event and not the press event.\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Execute a key combination.",
      "name":"emulate_key_combination",
      "type":"staticfct",
      "args":"(modifiers, key)",
      "kind":"static module functions",
      "lineno":50
    },{
      "parameter":"field",
      "params":{
        "1":"key",
        "map":{
          "key":" The key object."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        },
        "field":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        }
      },
      "description":"\n\n A **global** keybinding is one which is always present, even when there is\n no focused client. If your intent is too add a keybinding which acts on\n the focused client do **not** use this.\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Add an `awful.key` based keybinding to the global set.",
      "name":"append_global_keybinding",
      "type":"staticfct",
      "args":"(key)",
      "kind":"static module functions",
      "lineno":97
    },{
      "parameter":"param",
      "params":{
        "1":"keys",
        "map":{
          "keys":" A table of `awful.key` objects. Optionally, it can have\n  a `group` entry. If set, the `group` property will be set on all `awful.keys`\n  objects."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "keys":{
            "type":"table"
          }
        }
      },
      "description":"\n\n A **global** keybinding is one which is always present, even when there is\n no focused client. If your intent is too add a keybinding which acts on\n the focused client do **not** use this\n",
      "tags":{
        "see":[]
      },
      "section":"function",
      "inferred":true,
      "subparams":[],
      "summary":"Add multiple `awful.key` based keybindings to the global set.",
      "name":"module.append_global_keybindings",
      "kind":"functions",
      "lineno":114,
      "args":"(keys)",
      "type":"function"
    },{
      "parameter":"field",
      "params":{
        "1":"key",
        "map":{
          "key":" The key object."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        },
        "field":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Remove a keybinding from the global set.",
      "name":"remove_global_keybinding",
      "type":"staticfct",
      "args":"(key)",
      "kind":"static module functions",
      "lineno":137
    },{
      "parameter":"field",
      "params":{
        "1":"key",
        "map":{
          "key":" The key."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "emits":[[]],
        "field":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        },
        "emitstparam":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "emitstparam":["client_keybinding::added awful.key key The key."],
        "emits":["client_keybinding::added"]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Add an `awful.key` to the default client keys.",
      "name":"append_client_keybinding",
      "type":"staticfct",
      "args":"(key)",
      "kind":"static module functions",
      "lineno":153
    },{
      "parameter":"field",
      "params":{
        "1":"keys",
        "map":{
          "keys":" A table containing `awful.key` objects."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "emits":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "keys":{
            "type":"table"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "keys":{
            "type":"table"
          }
        },
        "emitstparam":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "emitstparam":["client_keybinding::added awful.key key The key."],
        "emits":["client_keybinding::added"]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Add a `awful.key`s to the default client keys.",
      "name":"append_client_keybindings",
      "type":"staticfct",
      "args":"(keys)",
      "kind":"static module functions",
      "lineno":171
    },{
      "parameter":"field",
      "params":{
        "1":"key",
        "map":{
          "key":" The key."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        },
        "field":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Remove a key from the default client keys.",
      "name":"remove_client_keybinding",
      "type":"staticfct",
      "args":"(key)",
      "kind":"static module functions",
      "lineno":184
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get X11 keysym and a one-character representation from an Awesome keycode.",
      "name":"get_key_name",
      "modifiers":{
        "field":[],
        "return":[{
            "1":true,
            "type":"string"
          },{
            "1":true,
            "type":"nil"
          },{
            "type":"string",
            "2":true
          },{
            "type":"nil",
            "2":true
          }]
      },
      "description":"\n\n A \"one-character representation\" is a single UTF-8 representing the typical\n output from that keysym in a text editor (e.g. \" \" for space, \"ñ\" for\n n_tilde, \"Ā\" for A_macron). It usually matches the main engraving of the key\n for level-0 symbols (but lowercase).\n\n Keycodes may be given in a string in any valid format for `awful.key`:\n \"#\" + keycode, the symkey name and the UTF-8 representation will all work.\n\n If no suitable keysym is found, or a malformed keycode is given as an\n argument, this function will return (nil, nil)\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":218
    }],
  "type":"inputmodule",
  "file":"/home/cji/portless/awesome/build/lib/awful/keyboard.lua",
  "package":"",
  "tags":{
    "author":["Emmanuel Lepage Vallee &lt;elv1313@gmail.com&gt;"],
    "copyright":"2018-2019 Emmanuel Lepage Vallee"
  },
  "lineno":9
}