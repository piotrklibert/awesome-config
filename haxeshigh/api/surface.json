{
  "inferred":true,
  "kind":"libraries",
  "mod_name":"surface",
  "summary":"",
  "sections":{
    "by_name":[]
  },
  "name":"gears.surface",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"_surface",
        "2":"default",
        "map":{
          "_surface":" The surface to load or nil",
          "default":" The default value to return on error; when nil, then a surface\n in an error state is returned."
        }
      },
      "summary":"Try to convert the argument into an lgi cairo surface.",
      "name":"load_uncached_silently",
      "modifiers":{
        "return":[[],[]],
        "param":{
          "1":[],
          "2":[],
          "_surface":[],
          "default":[]
        },
        "field":{
          "1":[],
          "2":[],
          "_surface":[],
          "default":[]
        }
      },
      "description":"\n This is usually needed for loading images by file name.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(_surface, default)",
      "tags":[],
      "lineno":40
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"_surface",
        "2":"default",
        "map":{
          "_surface":" The surface to load or nil",
          "default":" The default value to return on error; when nil, then a surface\n in an error state is returned."
        }
      },
      "summary":"Try to convert the argument into an lgi cairo surface.",
      "name":"load_silently",
      "modifiers":{
        "return":[[],[]],
        "param":{
          "1":[],
          "2":[],
          "_surface":[],
          "default":[]
        },
        "field":{
          "1":[],
          "2":[],
          "_surface":[],
          "default":[]
        }
      },
      "description":"\n This is usually needed for loading images by file name and uses a cache.\n In contrast to `load()`, errors are returned to the caller.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(_surface, default)",
      "tags":[],
      "lineno":77
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"_surface",
        "map":{
          "_surface":" The surface to load or nil"
        }
      },
      "summary":"Try to convert the argument into an lgi cairo surface.",
      "name":"load_uncached",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "_surface":[]
        },
        "field":{
          "1":[],
          "_surface":[]
        }
      },
      "description":"\n This is usually needed for loading images by file name. Errors are handled\n via `gears.debug.print_error`.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(_surface)",
      "tags":[],
      "lineno":112
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"_surface",
        "map":{
          "_surface":" The surface to load or nil"
        }
      },
      "summary":"Try to convert the argument into an lgi cairo surface.",
      "name":"gears.surface",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "_surface":[]
        },
        "field":{
          "1":[],
          "_surface":[]
        }
      },
      "description":"\n This is usually needed for loading images by file name. Errors are handled\n via `gears.debug.print_error`.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(_surface)",
      "tags":[],
      "lineno":122
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"surf",
        "map":{
          "surf":" The surface you are interested in"
        }
      },
      "summary":"Get the size of a cairo surface",
      "name":"get_size",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "surf":[]
        },
        "field":{
          "1":[],
          "surf":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(surf)",
      "tags":[],
      "lineno":134
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"s",
        "map":{
          "s":" Source surface."
        }
      },
      "summary":"Create a copy of a cairo surface.",
      "name":"duplicate_surface",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "s":[]
        },
        "field":{
          "1":[],
          "s":[]
        }
      },
      "description":"\n The surfaces returned by `surface.load` are cached and must not be\n modified to avoid unintended side-effects. This function allows to create\n a copy of a cairo surface. This copy can then be freely modified.\n The surface returned will be as compatible as possible to the input\n surface. For example, it will likely be of the same surface type as the\n input. The details are explained in the `create_similar` function on a cairo\n surface.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(s)",
      "tags":[],
      "lineno":151
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "2":"height",
        "3":"shape",
        "4":"shape_color",
        "5":"bg_color",
        "map":{
          "shape":" A `gears.shape` compatible function",
          "bg_color":" The surface background color",
          "height":" The surface height",
          "shape_color":" The shape color or pattern",
          "width":" The surface width"
        }
      },
      "summary":"Create a surface from a `gears.shape`\n Any additional parameters will be passed to the shape function",
      "name":"load_from_shape",
      "modifiers":{
        "return":[{
            "type":"cairo.surface"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":[],
          "4":{
            "optchain":"white",
            "opt":"white"
          },
          "5":{
            "optchain":"transparent",
            "opt":"transparent"
          },
          "shape":[],
          "bg_color":{
            "optchain":"transparent",
            "opt":"transparent"
          },
          "height":{
            "type":"number"
          },
          "shape_color":{
            "optchain":"white",
            "opt":"white"
          },
          "width":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":[],
          "4":{
            "optchain":"white",
            "opt":"white"
          },
          "5":{
            "optchain":"transparent",
            "opt":"transparent"
          },
          "shape":[],
          "bg_color":{
            "optchain":"transparent",
            "opt":"transparent"
          },
          "height":{
            "type":"number"
          },
          "shape_color":{
            "optchain":"white",
            "opt":"white"
          },
          "width":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(width, height, shape[, shape_color=white[, bg_color=transparent]])",
      "tags":[],
      "lineno":176
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"draw",
        "2":"shape",
        "3":"Any",
        "map":{
          "shape":" or gears.shape function or a custom function with a context,\n   width and height as parameter.",
          "draw":" A wibox or a client",
          "Any":" additional parameters will be passed to the shape function."
        }
      },
      "summary":"Apply a shape to a client or a wibox.",
      "name":"apply_shape_bounding",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "3":{
            "optchain":true,
            "opt":true
          },
          "shape":[],
          "draw":[],
          "Any":{
            "optchain":true,
            "opt":true
          }
        },
        "field":{
          "1":[],
          "2":[],
          "3":{
            "optchain":true,
            "opt":true
          },
          "shape":[],
          "draw":[],
          "Any":{
            "optchain":true,
            "opt":true
          }
        }
      },
      "description":"\n\n  If the wibox or client size change, this function need to be called\n   again.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(draw, shape[, Any])",
      "tags":[],
      "lineno":203
    },{
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"path",
        "3":"width",
        "4":"height",
        "map":{
          "height":" The surface height",
          "widget":" A widget",
          "path":" The output file path",
          "width":" The surface width"
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[[],[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "height":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          },
          "path":{
            "type":"string"
          },
          "width":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "height":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          },
          "path":{
            "type":"string"
          },
          "width":{
            "type":"number"
          }
        }
      },
      "description":"\n This is dynamic, so the SVG will be updated along with the widget content.\n because of this, the painting may happen hover multiple event loop cycles.",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Create an SVG file with this widget content.",
      "name":"draw_to_svg_file",
      "type":"deprecated",
      "args":"(widget, path, width, height)",
      "kind":"deprecated functions",
      "lineno":244
    },{
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"width",
        "3":"height",
        "4":"format",
        "map":{
          "format":" The surface format",
          "widget":" A widget",
          "height":" The surface height",
          "width":" The surface width"
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[[],[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "optchain":"cairo.Format.ARGB32",
            "opt":"cairo.Format.ARGB32"
          },
          "format":{
            "optchain":"cairo.Format.ARGB32",
            "opt":"cairo.Format.ARGB32"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "width":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "optchain":"cairo.Format.ARGB32",
            "opt":"cairo.Format.ARGB32"
          },
          "format":{
            "optchain":"cairo.Format.ARGB32",
            "opt":"cairo.Format.ARGB32"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "width":{
            "type":"number"
          }
        }
      },
      "description":"\n This is dynamic, so the SVG will be updated along with the widget content.\n because of this, the painting may happen hover multiple event loop cycles.",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Create a cairo surface with this widget content.",
      "name":"draw_to_image_surface",
      "type":"deprecated",
      "args":"(widget, width, height[, format=cairo.Format.ARGB32])",
      "kind":"deprecated functions",
      "lineno":265
    }],
  "type":"module",
  "file":"/home/cji/portless/awesome/build/lib/gears/surface.lua",
  "package":"gears",
  "tags":{
    "author":["Uli Schlachter"],
    "copyright":"2012 Uli Schlachter"
  },
  "lineno":7
}