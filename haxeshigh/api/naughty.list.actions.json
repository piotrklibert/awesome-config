{
  "inferred":true,
  "kind":"widgets",
  "see":[{
      "label":"awful.widget.common",
      "mod":{
        "inferred":true,
        "kind":"classes",
        "description":"",
        "summary":"",
        "sections":{
          "by_name":[]
        },
        "name":"awful.widget.common",
        "modifiers":{
          "copyright":[],
          "author":[[]]
        },
        "tags":{
          "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
          "copyright":"2008-2009 Julien Danjou"
        },
        "type":"classmod",
        "package":"awful.widget",
        "file":"/home/cji/portless/awesome/build/lib/awful/widget/common.lua",
        "mod_name":"common",
        "items":[{
            "parameter":"param",
            "params":{
              "1":"buttons",
              "2":"object",
              "map":{
                "buttons":"",
                "object":""
              }
            },
            "modifiers":{
              "param":{
                "1":{
                  "type":"table"
                },
                "2":[],
                "buttons":{
                  "type":"table"
                },
                "object":[]
              },
              "return":[{
                  "type":"table"
                }]
            },
            "description":"",
            "type":"function",
            "tags":{
              "within":"Methods"
            },
            "section":"Methods",
            "inferred":true,
            "subparams":[],
            "summary":"Common method to create buttons.",
            "name":"awful.widget.common:create_buttons",
            "retgroups":[{
                "g":0,
                "1":{
                  "text":"",
                  "type":"table",
                  "mods":{
                    "type":"table"
                  }
                }
              }],
            "kind":"methods",
            "ret":[""],
            "args":"(buttons, object)",
            "lineno":23
          },{
            "parameter":"param",
            "params":{
              "1":"w",
              "2":"buttons",
              "3":"label",
              "4":"data",
              "5":"objects",
              "6":"args",
              "map":{
                "data":" Current data/cache, indexed by objects.",
                "objects":" Objects to be displayed / updated.",
                "buttons":"",
                "w":" The widget.",
                "args":"",
                "label":" Function to generate label parameters from an object.\n   The function gets passed an object from `objects`, and\n   has to return `text`, `bg`, `bg_image`, `icon`."
              }
            },
            "modifiers":{
              "param":{
                "1":[],
                "2":{
                  "type":"table"
                },
                "3":{
                  "type":"func"
                },
                "4":{
                  "type":"table"
                },
                "5":{
                  "type":"table"
                },
                "6":{
                  "optchain":"{}",
                  "type":"table",
                  "opt":"{}"
                },
                "data":{
                  "type":"table"
                },
                "objects":{
                  "type":"table"
                },
                "buttons":{
                  "type":"table"
                },
                "w":[],
                "args":{
                  "optchain":"{}",
                  "type":"table",
                  "opt":"{}"
                },
                "label":{
                  "type":"func"
                }
              },
              "return":[]
            },
            "description":"",
            "tags":{
              "within":"Methods"
            },
            "section":"Methods",
            "inferred":true,
            "subparams":[],
            "summary":"Common update method.",
            "name":"awful.widget.common:list_update",
            "kind":"methods",
            "lineno":122,
            "args":"(w, buttons, label, data, objects[, args={}])",
            "type":"function"
          }],
        "lineno":7
      },
      "name":""
    }],
  "tags":{
    "author":["Emmanuel Lepage Vallee &lt;elv1313@gmail.com&gt;"],
    "copyright":"2017 Emmanuel Lepage Vallee",
    "see":[]
  },
  "summary":"Manage a notification action list.",
  "sections":{
    "by_name":[]
  },
  "name":"naughty.list.actions",
  "modifiers":{
    "see":[[]],
    "author":[[]],
    "copyright":[]
  },
  "package":"",
  "type":"widgetmod",
  "description":"\n\n A notification action is a \"button\" that will trigger an action on the sender\n process. `notify-send` doesn't support actions, but `libnotify` based\n applications do.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_actionlist_simple.svg)\n\n \n     local notif = naughty.notification {\n         title   = &#34A notification&#34,\n         message = &#34This notification has actions!&#34,\n         actions = {\n             naughty.action {\n                 name = &#34Accept&#34,\n             },\n             naughty.action {\n                 name = &#34Refuse&#34,\n             },\n             naughty.action {\n                 name = &#34Ignore&#34,\n             },\n         }\n     }\n  \n     wibox.widget {\n         notification = notif,\n         widget = naughty.list.actions,\n     }\n\n This example has a custom vertical widget template:\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_actionlist_fancy.svg)\n\n \n  \n     wibox.widget {\n         notification = notif,\n         base_layout = wibox.widget {\n             spacing        = 3,\n             spacing_widget = wibox.widget {\n                 orientation = &#34horizontal&#34,\n                 widget      = wibox.widget.separator,\n             },\n             layout         = wibox.layout.fixed.vertical\n         },\n         widget_template = {\n             {\n                 {\n                     {\n                         id     = &#34text_role&#34,\n                         widget = wibox.widget.textbox\n                     },\n                     widget = wibox.container.place\n                 },\n                 shape              = gears.shape.rounded_rect,\n                 shape_border_width = 2,\n                 shape_border_color = beautiful.bg_normal,\n                 forced_height      = 30,\n                 widget             = wibox.container.background,\n             },\n             margins = 4,\n             widget  = wibox.container.margin,\n         },\n         widget = naughty.list.actions,\n     }\n\n This example has a horizontal widget template and icons:\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_actionlist_fancy_icons.svg)\n\n \n  \n     wibox.widget {\n         notification = notif,\n         base_layout = wibox.widget {\n             spacing        = 3,\n             spacing_widget = wibox.widget {\n                 orientation = &#34vertical&#34,\n                 widget      = wibox.widget.separator,\n             },\n             layout         = wibox.layout.flex.horizontal\n         },\n         widget_template = {\n             {\n                 {\n                     {\n                         id            = &#34icon_role&#34,\n                         forced_height = 16,\n                         forced_width  = 16,\n                         widget        = wibox.widget.imagebox\n                     },\n                     {\n                         id     = &#34text_role&#34,\n                         widget = wibox.widget.textbox\n                     },\n                     spacing = 5,\n                     layout = wibox.layout.fixed.horizontal\n                 },\n                 id = &#34background_role&#34,\n                 widget             = wibox.container.background,\n             },\n             margins = 4,\n             widget  = wibox.container.margin,\n         },\n         widget = naughty.list.actions,\n     }\n\n This example uses the theme/style variables instead of the template. This is\n less flexible, but easier to put in the theme file. Note that each style\n variable has a `beautiful` equivalent.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_actionlist_style.svg)\n\n \n  \n     wibox.widget {\n         notification = notif,\n         base_layout = wibox.widget {\n             spacing        = 3,\n             spacing_widget = wibox.widget {\n                 orientation = &#34vertical&#34,\n                 widget      = wibox.widget.separator,\n             },\n             layout         = wibox.layout.flex.horizontal\n         },\n         style = {\n             underline_normal             = false,\n             underline_selected           = true,\n             shape_normal                 = gears.shape.octogon,\n             shape_selected               = gears.shape.hexagon,\n             shape_border_width_normal    = 2,\n             shape_border_width_selected  = 4,\n             icon_size_normal             = 16,\n             icon_size_selected           = 24,\n             shape_border_color_normal    = &#34#0000ff&#34,\n             shape_border_color_selected  = &#34#ff0000&#34,\n             bg_normal                    = &#34#ffff00&#34,\n             bg_selected                  = &#34#00ff00&#34,\n         },\n         forced_height = beautiful.get_font_height(beautiful.font) * 2.5,\n         widget = naughty.list.actions,\n     }\n",
  "file":"/home/cji/portless/awesome/build/lib/naughty/list/actions.lua",
  "mod_name":"naughty.list.actions",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Whether or not to underline the action name.",
      "name":"beautiful.notification_action_underline_normal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([boolean=true])",
      "tags":[],
      "lineno":172
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Whether or not to underline the selected action name.",
      "name":"beautiful.notification_action_underline_selected",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([boolean=true])",
      "tags":[],
      "lineno":176
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Whether or not the action label should be shown.",
      "name":"beautiful.notification_action_icon_only",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([boolean=false])",
      "tags":[],
      "lineno":180
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Whether or not the action icon should be shown.",
      "name":"beautiful.notification_action_label_only",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([boolean=false])",
      "tags":[],
      "lineno":184
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        },
        "field":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for a normal action.",
      "name":"beautiful.notification_action_shape_normal",
      "type":"beautiful",
      "args":"([shape=gears.shape.rectangle])",
      "kind":"theme variables",
      "lineno":189
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        },
        "field":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for a selected action.",
      "name":"beautiful.notification_action_shape_selected",
      "type":"beautiful",
      "args":"([shape=gears.shape.rectangle])",
      "kind":"theme variables",
      "lineno":194
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape border color for normal actions.",
      "name":"beautiful.notification_action_shape_border_color_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":199
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape border color for selected actions.",
      "name":"beautiful.notification_action_shape_border_color_selected",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":204
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The shape border width for normal actions.",
      "name":"beautiful.notification_action_shape_border_width_normal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([number=0])",
      "tags":[],
      "lineno":208
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The shape border width for selected actions.",
      "name":"beautiful.notification_action_shape_border_width_selected",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([number=0])",
      "tags":[],
      "lineno":212
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The action icon size.",
      "name":"beautiful.notification_action_icon_size_normal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([number=0])",
      "tags":[],
      "lineno":216
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The selected action icon size.",
      "name":"beautiful.notification_action_icon_size_selected",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([number=0])",
      "tags":[],
      "lineno":220
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The background color for normal actions.",
      "name":"beautiful.notification_action_bg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":225
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The background color for selected actions.",
      "name":"beautiful.notification_action_bg_selected",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":230
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The foreground color for normal actions.",
      "name":"beautiful.notification_action_fg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":235
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The foreground color for selected actions.",
      "name":"beautiful.notification_action_fg_selected",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":240
    },{
      "parameter":"field",
      "params":{
        "1":"action_bgimage_normal",
        "map":{
          "action_bgimage_normal":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"gears.surface|string"
          },
          "action_bgimage_normal":{
            "type":"gears.surface|string"
          }
        },
        "field":{
          "1":{
            "type":"gears.surface|string"
          },
          "action_bgimage_normal":{
            "type":"gears.surface|string"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The background image for normal actions.",
      "name":"beautiful.notification_action_bgimage_normal",
      "type":"beautiful",
      "args":"(action_bgimage_normal)",
      "kind":"theme variables",
      "lineno":245
    },{
      "parameter":"field",
      "params":{
        "1":"action_bgimage_selected",
        "map":{
          "action_bgimage_selected":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"gears.surface|string"
          },
          "action_bgimage_selected":{
            "type":"gears.surface|string"
          }
        },
        "field":{
          "1":{
            "type":"gears.surface|string"
          },
          "action_bgimage_selected":{
            "type":"gears.surface|string"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The background image for selected actions.",
      "name":"beautiful.notification_action_bgimage_selected",
      "type":"beautiful",
      "args":"(action_bgimage_selected)",
      "kind":"theme variables",
      "lineno":250
    },{
      "parameter":"field",
      "params":{
        "1":"notification",
        "map":{
          "notification":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"naughty.notification"
          },
          "notification":{
            "type":"naughty.notification"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"naughty.notification"
          },
          "notification":{
            "type":"naughty.notification"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The actionlist parent notification.",
      "name":"notification",
      "type":"property",
      "args":"(notification)",
      "kind":"object properties",
      "lineno":325
    },{
      "parameter":"field",
      "params":{
        "1":"base_layout",
        "map":{
          "base_layout":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "base_layout":{
            "type":"widget"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "base_layout":{
            "type":"widget"
          }
        }
      },
      "description":"\n If no layout is specified, a `wibox.layout.fixed.horizontal` will be created\n automatically.",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The actionlist layout.",
      "name":"base_layout",
      "type":"property",
      "args":"(base_layout)",
      "kind":"object properties",
      "lineno":333
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget_template",
        "map":{
          "widget_template":""
        }
      },
      "summary":"The actionlist parent notification.",
      "name":"widget_template",
      "modifiers":{
        "param":{
          "1":{
            "type":"table"
          },
          "widget_template":{
            "type":"table"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "widget_template":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(widget_template)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":338
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"style",
        "map":{
          "style":""
        }
      },
      "summary":"A table with values to override each `beautiful.notification_action` values.",
      "name":"style",
      "modifiers":{
        "field":{
          "1":{
            "type":"table"
          },
          "style":{
            "type":"table"
          }
        },
        "usebeautiful":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "style":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(style)",
      "tags":{
        "usebeautiful":["beautiful.font Fallback when the `font` property isn't set.","beautiful.notification_action_underline_normal Fallback.","beautiful.notification_action_underline_selected Fallback.","beautiful.notification_action_icon_only Fallback.","beautiful.notification_action_label_only Fallback.","beautiful.notification_action_shape_normal Fallback.","beautiful.notification_action_shape_selected Fallback.","beautiful.notification_action_shape_border_color_normal Fallback.","beautiful.notification_action_shape_border_color_selected Fallback.","beautiful.notification_action_shape_border_width_normal Fallback.","beautiful.notification_action_shape_border_width_selected Fallback.","beautiful.notification_action_icon_size_normal Fallback.","beautiful.notification_action_icon_size_selected Fallback.","beautiful.notification_action_bg_normal Fallback.","beautiful.notification_action_bg_selected Fallback.","beautiful.notification_action_fg_normal Fallback.","beautiful.notification_action_fg_selected Fallback.","beautiful.notification_action_bgimage_normal Fallback.","beautiful.notification_action_bgimage_selected Fallback."],
        "propemits":["true false"]
      },
      "lineno":363
    },{
      "inferred":true,
      "subparams":{
        "args":["args.notification","args.base_layout","args.style","args.style.underline_normal","args.style.underline_selected","args.style.shape_normal","args.style.shape_selected","args.style.shape_border_color_normal","args.style.shape_border_color_selected","args.style.shape_border_width_normal","args.style.shape_border_width_selected","args.style.icon_size","args.style.bg_normal","args.style.bg_selected","args.style.fg_normal","args.style.fg_selected","args.style.bgimage_normal","args.style.bgimage_selected"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "2":"widget_template",
        "map":{
          "args.style.shape_border_color_normal":"",
          "args.base_layout":" The action layout.",
          "args.style.shape_border_width_normal":"",
          "args.style.fg_normal":"",
          "args.style.shape_selected":"",
          "args.style.bg_normal":"",
          "args.style.fg_selected":"",
          "args.notification":" The notification.",
          "args.style.shape_border_width_selected":"",
          "args.style.underline_normal":"",
          "args.style.shape_border_color_selected":"",
          "args.style.underline_selected":"",
          "widget_template":" A custom widget to be used for each action.",
          "args.style.bgimage_selected":"",
          "args.style.shape_normal":"",
          "args.style":" Override the beautiful values.",
          "args.style.bgimage_normal":"",
          "args":"",
          "args.style.icon_size":"",
          "args.style.bg_selected":""
        }
      },
      "summary":"Create an action list.",
      "name":"naughty.list.actions",
      "modifiers":{
        "return":[{
            "type":"widget"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"naughty.notification"
          },
          "3":{
            "type":"widget"
          },
          "4":{
            "type":"table"
          },
          "5":{
            "type":"boolean"
          },
          "6":{
            "type":"boolean"
          },
          "7":{
            "type":"gears.shape"
          },
          "8":{
            "type":"gears.shape"
          },
          "9":{
            "type":"gears.color|string"
          },
          "10":{
            "type":"gears.color|string"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"gears.color|string"
          },
          "15":{
            "type":"gears.color|string"
          },
          "16":{
            "type":"gears.color|string"
          },
          "17":{
            "type":"gears.color|string"
          },
          "18":{
            "type":"gears.surface|string"
          },
          "19":{
            "type":"gears.surface|string"
          },
          "20":{
            "type":"table",
            "opt":true
          },
          "args.style.shape_border_color_normal":{
            "type":"gears.color|string"
          },
          "args.base_layout":{
            "type":"widget"
          },
          "args.style.shape_border_width_normal":{
            "type":"number"
          },
          "args.style.fg_normal":{
            "type":"gears.color|string"
          },
          "args.style.shape_selected":{
            "type":"gears.shape"
          },
          "args.style.bg_normal":{
            "type":"gears.color|string"
          },
          "args.style.fg_selected":{
            "type":"gears.color|string"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args.style.shape_border_width_selected":{
            "type":"number"
          },
          "args.style.underline_normal":{
            "type":"boolean"
          },
          "args.style.shape_border_color_selected":{
            "type":"gears.color|string"
          },
          "args.style.underline_selected":{
            "type":"boolean"
          },
          "widget_template":{
            "type":"table",
            "opt":true
          },
          "args.style.bgimage_selected":{
            "type":"gears.surface|string"
          },
          "args.style.shape_normal":{
            "type":"gears.shape"
          },
          "args.style":{
            "type":"table"
          },
          "args.style.bgimage_normal":{
            "type":"gears.surface|string"
          },
          "args":{
            "type":"table"
          },
          "args.style.icon_size":{
            "type":"number"
          },
          "args.style.bg_selected":{
            "type":"gears.color|string"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"naughty.notification"
          },
          "3":{
            "type":"widget"
          },
          "4":{
            "type":"table"
          },
          "5":{
            "type":"boolean"
          },
          "6":{
            "type":"boolean"
          },
          "7":{
            "type":"gears.shape"
          },
          "8":{
            "type":"gears.shape"
          },
          "9":{
            "type":"gears.color|string"
          },
          "10":{
            "type":"gears.color|string"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"gears.color|string"
          },
          "15":{
            "type":"gears.color|string"
          },
          "16":{
            "type":"gears.color|string"
          },
          "17":{
            "type":"gears.color|string"
          },
          "18":{
            "type":"gears.surface|string"
          },
          "19":{
            "type":"gears.surface|string"
          },
          "20":{
            "type":"table",
            "opt":true
          },
          "args.style.shape_border_color_normal":{
            "type":"gears.color|string"
          },
          "args.base_layout":{
            "type":"widget"
          },
          "args.style.shape_border_width_normal":{
            "type":"number"
          },
          "args.style.fg_normal":{
            "type":"gears.color|string"
          },
          "args.style.shape_selected":{
            "type":"gears.shape"
          },
          "args.style.bg_normal":{
            "type":"gears.color|string"
          },
          "args.style.fg_selected":{
            "type":"gears.color|string"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args.style.shape_border_width_selected":{
            "type":"number"
          },
          "args.style.underline_normal":{
            "type":"boolean"
          },
          "args.style.shape_border_color_selected":{
            "type":"gears.color|string"
          },
          "args.style.underline_selected":{
            "type":"boolean"
          },
          "widget_template":{
            "type":"table",
            "opt":true
          },
          "args.style.bgimage_selected":{
            "type":"gears.surface|string"
          },
          "args.style.shape_normal":{
            "type":"gears.shape"
          },
          "args.style":{
            "type":"table"
          },
          "args.style.bgimage_normal":{
            "type":"gears.surface|string"
          },
          "args":{
            "type":"table"
          },
          "args.style.icon_size":{
            "type":"number"
          },
          "args.style.bg_selected":{
            "type":"gears.color|string"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(args, widget_template)",
      "tags":[],
      "lineno":454
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get or set the children elements.",
      "name":"children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":498
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get all direct and indirect children widgets.",
      "name":"all_children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"\n This will scan all containers recursively to find widgets\n Warning: This method it prone to stack overflow id the widget, or any of its\n children, contain (directly or indirectly) itself.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":506
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":512
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":" The height (`nil` for automatic)"
        }
      },
      "summary":"Force a widget height.",
      "name":"forced_height",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":517
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":" The width (`nil` for automatic)"
        }
      },
      "summary":"Force a widget width.",
      "name":"forced_width",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":522
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" The opacity (between 0 and 1)"
        }
      },
      "summary":"The widget opacity (transparency).",
      "name":"opacity",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([opacity=1])",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":527
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"The widget visibility.",
      "name":"visible",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":532
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "table":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "table":[]
        },
        "return":[]
      },
      "description":"\n\n The table contains a list of `awful.button` objects.\n",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The widget buttons.",
      "name":"buttons",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":541
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button to add."
        }
      },
      "summary":"Add a new `awful.button` to this widget.",
      "name":"add_button",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(button)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":546
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"signal_name",
        "2":"...",
        "map":{
          "signal_name":"",
          "...":" Other arguments"
        }
      },
      "summary":"Emit a signal and ensure all parent widgets in the hierarchies also\n forward the signal.",
      "name":"emit_signal_recursive",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":" This is useful to track signals when there is a dynamic\n set of containers and layouts wrapping the widget.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(signal_name, ...)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":554
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the previous results of `:layout()` and `:fit()`\n are no longer valid.  Unless this signal is emitted, `:layout()` and `:fit()`\n must return the same result when called with the same arguments.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the layout (size) change.",
      "name":"widget::layout_changed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":562
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the content of the widget changes. The widget will\n be redrawn, it is not re-layouted. Put differently, it is assumed that\n `:layout()` and `:fit()` would still return the same results as before.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the widget content changed.",
      "name":"widget::redraw_needed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":570
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is pressed over the widget.",
      "name":"button::press",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":601
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is released over the widget.",
      "name":"button::release",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":632
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse enter a widget.",
      "name":"mouse::enter",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":657
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse leave a widget.",
      "name":"mouse::leave",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":682
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":698
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":704
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":717
    }],
  "lineno":160
}