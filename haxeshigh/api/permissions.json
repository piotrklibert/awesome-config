{
  "inferred":true,
  "kind":"libraries",
  "mod_name":"permissions",
  "summary":"Implements EWMH requests handling.",
  "sections":{
    "by_name":[]
  },
  "name":"awful.permissions",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"maximized_honor_padding",
        "map":{
          "maximized_honor_padding":""
        }
      },
      "summary":"Honor the screen padding when maximizing.",
      "name":"beautiful.maximized_honor_padding",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "maximized_honor_padding":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "maximized_honor_padding":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([maximized_honor_padding=true])",
      "tags":[],
      "lineno":33
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"fullscreen_hide_border",
        "map":{
          "fullscreen_hide_border":""
        }
      },
      "summary":"Hide the border on fullscreen clients.",
      "name":"beautiful.fullscreen_hide_border",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "fullscreen_hide_border":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "fullscreen_hide_border":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([fullscreen_hide_border=true])",
      "tags":[],
      "lineno":37
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"maximized_hide_border",
        "map":{
          "maximized_hide_border":""
        }
      },
      "summary":"Hide the border on maximized clients.",
      "name":"beautiful.maximized_hide_border",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "maximized_hide_border":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "maximized_hide_border":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([maximized_hide_border=false])",
      "tags":[],
      "lineno":41
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "field":[]
      },
      "description":" If a filter is added to only one context, it will be in\n `permissions.contextual_activate_filters`[\"context_name\"].",
      "tags":{
        "see":[]
      },
      "section":"table",
      "inferred":true,
      "subparams":[],
      "summary":"The list of all registered generic request::activate (focus stealing)\n filters.",
      "name":"generic_activate_filters",
      "type":"table",
      "args":"()",
      "kind":"tables",
      "lineno":49
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "field":[]
      },
      "description":" If a filter is added to only one context, it will be in\n `permissions.generic_activate_filters`.",
      "tags":{
        "see":[]
      },
      "section":"table",
      "inferred":true,
      "subparams":[],
      "summary":"The list of all registered contextual request::activate (focus stealing)\n filters.",
      "name":"contextual_activate_filters",
      "type":"table",
      "args":"()",
      "kind":"tables",
      "lineno":57
    },{
      "inferred":true,
      "subparams":{
        "hints":["hints.raise","hints.switch_to_tag","hints.switch_to_tags"]
      },
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"context",
        "3":"hints",
        "map":{
          "hints.switch_to_tag":" should the client's first tag\n  be selected if none of the client's tags are selected?",
          "c":" A client to use",
          "hints.raise":" should the client be unminimized\n  and raised?",
          "hints":" A table with additional hints:",
          "hints.switch_to_tags":" Select all tags associated\n  with the client.",
          "context":" The context where this signal was used."
        }
      },
      "summary":"Activate a window.",
      "name":"awful.permissions.activate",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"boolean",
            "opt":"false"
          },
          "6":{
            "type":"boolean",
            "opt":"false"
          },
          "hints.switch_to_tag":{
            "type":"boolean",
            "opt":"false"
          },
          "c":{
            "type":"client"
          },
          "hints.raise":{
            "type":"boolean",
            "opt":"false"
          },
          "hints":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "hints.switch_to_tags":{
            "type":"boolean",
            "opt":"false"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"boolean",
            "opt":"false"
          },
          "6":{
            "type":"boolean",
            "opt":"false"
          },
          "hints.switch_to_tag":{
            "type":"boolean",
            "opt":"false"
          },
          "c":{
            "type":"client"
          },
          "hints.raise":{
            "type":"boolean",
            "opt":"false"
          },
          "hints":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "hints.switch_to_tags":{
            "type":"boolean",
            "opt":"false"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"\n\n This sets the focus only if the client is visible. If `raise` is set\n in the hints, it will also unminimize the client and move it to the top\n of its layer.\n\n It is the default signal handler for `request::activate` on a `client`.\n",
      "type":"signalhandler",
      "section":"signalhandler",
      "kind":"request handlers",
      "args":"(c, context[, hints])",
      "tags":[],
      "lineno":152
    },{
      "parameter":"field",
      "params":{
        "1":"f",
        "2":"context",
        "map":{
          "context":" The `request::activate` context",
          "f":" The callback"
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"function"
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "context":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "f":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"function"
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "context":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "f":{
            "type":"function"
          }
        }
      },
      "description":"\n\n The callback takes the following parameters:\n\n * **c** (*client*) The client requesting the activation\n * **context** (*string*) The activation context.\n * **hints** (*table*) Some additional hints (depending on the context)\n\n If the callback returns `true`, the client will be activated. If the callback\n returns `false`, the activation request is cancelled unless the `force` hint is\n set. If the callback returns `nil`, the previous callback will be executed.\n This will continue until either a callback handles the request or when it runs\n out of callbacks. In that case, the request will be granted if the client is\n visible.\n\n For example, to block Firefox from stealing the focus, use:\n\n    awful.permissions.add_activate_filter(function(c)\n        if c.class == \"Firefox\" then return false end\n    end, \"permissions\")\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Add an activate (focus stealing) filter function.",
      "name":"awful.permissions.add_activate_filter",
      "type":"staticfct",
      "args":"(f[, context])",
      "kind":"static module functions",
      "lineno":233
    },{
      "parameter":"field",
      "params":{
        "1":"f",
        "2":"context",
        "map":{
          "context":" The `request::activate` context",
          "f":" The callback"
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"function"
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "context":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "f":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"function"
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "context":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "f":{
            "type":"function"
          }
        }
      },
      "description":"\n This is an helper to avoid dealing with `permissions.add_activate_filter` directly.",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Remove an activate (focus stealing) filter function.",
      "name":"awful.permissions.remove_activate_filter",
      "type":"staticfct",
      "args":"(f[, context])",
      "kind":"static module functions",
      "lineno":253
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"t",
        "3":"hints",
        "map":{
          "hints":" Extra information",
          "c":" A client to tag",
          "t":" A tag to use. If true, then the client is made sticky."
        }
      },
      "summary":"Tag a window with its requested tag.",
      "name":"awful.permissions.tag",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "optchain":true,
            "type":"tag|boolean",
            "opt":true
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "t":{
            "optchain":true,
            "type":"tag|boolean",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "optchain":true,
            "type":"tag|boolean",
            "opt":true
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "t":{
            "optchain":true,
            "type":"tag|boolean",
            "opt":true
          }
        }
      },
      "description":"\n\n It is the default signal handler for `request::tag` on a `client`.\n",
      "type":"signalhandler",
      "section":"signalhandler",
      "kind":"request handlers",
      "args":"(c[, t[, hints={}]])",
      "tags":[],
      "lineno":293
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"urgent",
        "map":{
          "c":" A client",
          "urgent":" If the client should be urgent"
        }
      },
      "summary":"Handle client urgent request",
      "name":"awful.permissions.urgent",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"boolean"
          },
          "c":{
            "type":"client"
          },
          "urgent":{
            "type":"boolean"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"boolean"
          },
          "c":{
            "type":"client"
          },
          "urgent":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "type":"signalhandler",
      "section":"signalhandler",
      "kind":"request handlers",
      "args":"(c, urgent)",
      "tags":[],
      "lineno":319
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"context",
        "3":"hints",
        "map":{
          "hints":" The hints to pass to the handler",
          "c":" The client",
          "context":" The context"
        }
      },
      "summary":"Move and resize the client.",
      "name":"awful.permissions.geometry",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"\n\n This is the default geometry request handler.\n",
      "type":"signalhandler",
      "section":"signalhandler",
      "kind":"request handlers",
      "args":"(c, context[, hints={}])",
      "tags":[],
      "lineno":341
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"w",
        "2":"context",
        "3":"hints",
        "map":{
          "w":" The wibox.",
          "hints":" The hints to pass to the handler",
          "context":" The context"
        }
      },
      "summary":"Move and resize the wiboxes.",
      "name":"awful.permissions.wibox_geometry",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"wibox"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "w":{
            "type":"wibox"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"wibox"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "w":{
            "type":"wibox"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"\n\n This is the default geometry request handler.\n",
      "type":"signalhandler",
      "section":"signalhandler",
      "kind":"request handlers",
      "args":"(w, context[, hints={}])",
      "tags":[],
      "lineno":410
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"context",
        "3":"hints",
        "map":{
          "hints":" The hints to pass to the handler",
          "c":" The client",
          "context":" The context"
        }
      },
      "summary":"Merge the 2 requests sent by clients wanting to be maximized.",
      "name":"awful.permissions.merge_maximization",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"\n\n The X clients set 2 flags (atoms) when they want to be maximized. This caused\n 2 request::geometry to be sent. This code gives some time for them to arrive\n and send a new `request::geometry` (through the property change) with the\n combined state.\n",
      "type":"signalhandler",
      "section":"signalhandler",
      "kind":"request handlers",
      "args":"(c, context[, hints={}])",
      "tags":[],
      "lineno":427
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"context",
        "3":"hints",
        "map":{
          "hints":" The hints to pass to the handler",
          "c":" The client",
          "context":" The context"
        }
      },
      "summary":"Allow the client to move itself.",
      "name":"awful.permissions.client_geometry_requests",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "hints":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"\n\n This is the default geometry request handler when the context is `permissions`.\n",
      "type":"signalhandler",
      "section":"signalhandler",
      "kind":"request handlers",
      "args":"(c, context[, hints={}])",
      "tags":[],
      "lineno":510
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"The default client `request::border` handler.",
      "name":"awful.permissions.update_border",
      "modifiers":{
        "usebeautiful":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n To replace this handler with your own, use:\n\n    client.disconnect_signal(\"request::border\", awful.ewmh.update_border)\n\n The default implementation chooses from dozens beautiful theme variables\n depending if the client is tiled, floating, maximized and then from its state\n (urgent, new, active, normal)\n",
      "type":"signalhandler",
      "section":"signalhandler",
      "kind":"request handlers",
      "args":"()",
      "tags":{
        "usebeautiful":["beautiful.border_color_marked","beautiful.border_color_active","beautiful.border_color_normal","beautiful.border_color_new","beautiful.border_color_urgent","beautiful.border_color_floating","beautiful.border_color_floating_active","beautiful.border_color_floating_normal","beautiful.border_color_floating_new","beautiful.border_color_floating_urgent","beautiful.border_color_maximized","beautiful.border_color_maximized_active","beautiful.border_color_maximized_normal","beautiful.border_color_maximized_new","beautiful.border_color_maximized_urgent","beautiful.border_color_fullscreen","beautiful.border_color_fullscreen_active","beautiful.border_color_fullscreen_normal","beautiful.border_color_fullscreen_new","beautiful.border_color_fullscreen_urgent","beautiful.border_width_active","beautiful.border_width_normal","beautiful.border_width_new","beautiful.border_width_urgent","beautiful.border_width_floating","beautiful.border_width_floating_active","beautiful.border_width_floating_normal","beautiful.border_width_floating_new","beautiful.border_width_floating_urgent","beautiful.border_width_maximized","beautiful.border_width_maximized_active","beautiful.border_width_maximized_normal","beautiful.border_width_maximized_new","beautiful.border_width_maximized_urgent","beautiful.border_width_fullscreen","beautiful.border_width_fullscreen_active","beautiful.border_width_fullscreen_normal","beautiful.border_width_fullscreen_new","beautiful.border_width_fullscreen_urgent","beautiful.opacity_floating","beautiful.opacity_floating_active","beautiful.opacity_floating_normal","beautiful.opacity_floating_new","beautiful.opacity_floating_urgent","beautiful.opacity_maximized","beautiful.opacity_maximized_active","beautiful.opacity_maximized_normal","beautiful.opacity_maximized_new","beautiful.opacity_maximized_urgent","beautiful.opacity_fullscreen","beautiful.opacity_fullscreen_active","beautiful.opacity_fullscreen_normal","beautiful.opacity_fullscreen_new","beautiful.opacity_fullscreen_urgent","beautiful.opacity_active","beautiful.opacity_normal","beautiful.opacity_new","beautiful.opacity_urgent"]
      },
      "lineno":608
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Default handler for the `request::autoactivate` signal.",
      "name":"awful.permissions.autoactivate",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n All it does is to emit `request::activate` with the following context\n mapping:\n\n * mouse_enter: *mouse.enter*\n * switch_tag : *autofocus.check_focus_tag*\n * history    : *autofocus.check_focus*\n",
      "type":"signalhandler",
      "section":"signalhandler",
      "kind":"request handlers",
      "args":"()",
      "tags":[],
      "lineno":732
    }],
  "type":"module",
  "file":"/home/cji/portless/awesome/build/lib/awful/permissions/init.lua",
  "package":"awful",
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2009 Julien Danjou"
  },
  "lineno":9
}