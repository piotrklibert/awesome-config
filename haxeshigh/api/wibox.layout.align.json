{
  "inferred":true,
  "kind":"widget_layouts",
  "mod_name":"wibox.layout.align",
  "summary":"The `align` layout has three slots for child widgets.",
  "sections":{
    "by_name":[]
  },
  "name":"wibox.layout.align",
  "modifiers":{
    "usage":[[]],
    "author":[[]],
    "supermodule":[[]],
    "copyright":[]
  },
  "description":" On its main axis, it\n will use as much space as is available to it and distribute that to its child\n widgets by stretching or shrinking them based on the chosen @{expand}\n strategy.\n On its secondary axis, the biggest child widget determines the size of the\n layout, but smaller widgets will not be stretched to match it.\n\n In its default configuration, the layout will give the first and third\n widgets only the minimum space they ask for and it aligns them to the outer\n edges. The remaining space between them is made available to the widget in\n slot two.\n\n This layout is most commonly used to split content into left/top, center and\n right/bottom sections. As such, it is usually seen as the root layout in\n @{awful.wibar}.\n\n You may also fill just one or two of the widget slots, the @{expand} algorithm\n will adjust accordingly.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_defaults_align.svg)\n",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"first",
        "map":{
          "first":""
        }
      },
      "summary":"The widget in slot one.",
      "name":"first",
      "modifiers":{
        "param":{
          "1":{
            "type":"widget"
          },
          "first":{
            "type":"widget"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "first":{
            "type":"widget"
          }
        }
      },
      "description":"\n\n This is the widget that is at the left/top.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(first)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":180
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"second",
        "map":{
          "second":""
        }
      },
      "summary":"The widget in slot two.",
      "name":"second",
      "modifiers":{
        "param":{
          "1":{
            "type":"widget"
          },
          "second":{
            "type":"widget"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "second":{
            "type":"widget"
          }
        }
      },
      "description":"\n\n This is the centered one.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(second)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":197
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"third",
        "map":{
          "third":""
        }
      },
      "summary":"The widget in slot three.",
      "name":"third",
      "modifiers":{
        "param":{
          "1":{
            "type":"widget"
          },
          "third":{
            "type":"widget"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "third":{
            "type":"widget"
          }
        }
      },
      "description":"\n\n This is the widget that is at the right/bottom.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(third)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":214
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"mode",
        "map":{
          "mode":" How to use unused space."
        }
      },
      "summary":"Set the expand mode, which determines how child widgets expand to take up\n unused space.",
      "name":"expand",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"\"inside\"",
            "type":"string",
            "opt":"\"inside\""
          },
          "mode":{
            "optchain":"\"inside\"",
            "type":"string",
            "opt":"\"inside\""
          }
        },
        "field":{
          "1":{
            "optchain":"\"inside\"",
            "type":"string",
            "opt":"\"inside\""
          },
          "mode":{
            "optchain":"\"inside\"",
            "type":"string",
            "opt":"\"inside\""
          }
        }
      },
      "description":"\n\n The following values are valid:\n\n * `\"inside\"`: The widgets in slot one and three are set to their minimal\n   required size. The widget in slot two is then given the remaining space.\n   This is the default behaviour.\n * `\"outside\"`: The widget in slot two is set to its minimal required size and\n   placed in the center of the space available to the layout. The other\n   widgets are then given the remaining space on either side.\n   If the center widget requires all available space, the outer widgets are\n   not drawn at all.\n * `\"none\"`: All widgets are given their minimal required size or the\n   remaining space, whichever is smaller. The center widget gets priority.\n\n Attempting to set any other value than one of those three will fall back to\n `\"inside\"`.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([mode=\"inside\"])",
      "tags":[],
      "lineno":288
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"left",
        "2":"middle",
        "3":"right",
        "map":{
          "middle":" Widget to be put in slot two.",
          "right":" Widget to be put in slot three.",
          "left":" Widget to be put in slot one."
        }
      },
      "summary":"Returns a new horizontal align layout.",
      "name":"horizontal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "3":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "middle":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "right":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "left":{
            "optchain":true,
            "type":"widget",
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "3":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "middle":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "right":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "left":{
            "optchain":true,
            "type":"widget",
            "opt":true
          }
        }
      },
      "description":"\n\n The three widget slots are aligned left, center and right.\n\n Additionally, this creates the aliases `set_left`, `set_middle` and\n `set_right` to assign @{first}, @{second} and @{third} respectively.",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"([left[, middle[, right]]])",
      "tags":[],
      "lineno":336
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"top",
        "2":"middle",
        "3":"bottom",
        "map":{
          "top":" Widget to be put in slot one.",
          "bottom":" Widget to be put in slot three.",
          "middle":" Widget to be put in slot two."
        }
      },
      "summary":"Returns a new vertical align layout.",
      "name":"vertical",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "3":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "top":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "bottom":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "middle":{
            "optchain":true,
            "type":"widget",
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "3":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "top":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "bottom":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "middle":{
            "optchain":true,
            "type":"widget",
            "opt":true
          }
        }
      },
      "description":"\n\n The three widget slots are aligned top, center and bottom.\n\n Additionally, this creates the aliases `set_top`, `set_middle` and\n `set_bottom` to assign @{first}, @{second} and @{third} respectively.",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"([top[, middle[, bottom]]])",
      "tags":[],
      "lineno":356
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"widget2",
        "map":{
          "index":" A widget or a widget index",
          "widget2":" The widget to replace the previous one with"
        }
      },
      "summary":"Set a widget at a specific index, replacing the current one.",
      "name":"set",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget2":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget2":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index, widget2)",
      "tags":{
        "emits":["widget::replaced"],
        "interface":["layout"],
        "emitstparam":["widget::replaced widget self The layout.","widget::replaced widget widget The inserted widget.","widget::replaced widget previous The previous widget.","widget::replaced number index The replaced index."]
      },
      "lineno":380
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"widget2",
        "3":"recursive",
        "map":{
          "widget2":" The widget to replace `widget` with",
          "widget":" The widget to replace",
          "recursive":" Recurse into all compatible layouts to\n   find the widget."
        }
      },
      "summary":"Replace the first instance of `widget` in the layout with `widget2`.",
      "name":"replace_widget",
      "modifiers":{
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget, widget2[, recursive=false])",
      "tags":{
        "emits":["widget::replaced"],
        "interface":["layout"],
        "emitstparam":["widget::replaced widget self The layout.","widget::replaced widget widget index The inserted widget.","widget::replaced widget previous The previous widget.","widget::replaced number index The replaced index."]
      },
      "lineno":396
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index1",
        "2":"index2",
        "map":{
          "index2":" The second widget index",
          "index1":" The first widget index"
        }
      },
      "summary":"Swap 2 widgets in a layout.",
      "name":"swap",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index2":{
            "type":"number"
          },
          "index1":{
            "type":"number"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index2":{
            "type":"number"
          },
          "index1":{
            "type":"number"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index1, index2)",
      "tags":{
        "emits":["widget::swapped"],
        "interface":["layout"],
        "emitstparam":["widget::swapped widget self The layout.","widget::swapped widget widget1 The first widget.","widget::swapped widget widget2 The second widget.","widget::swapped number index1 The first index.","widget::swapped number index1 The second index."]
      },
      "lineno":411
    },{
      "parameter":"field",
      "params":{
        "1":"widget1",
        "2":"widget2",
        "3":"recursive",
        "map":{
          "widget2":" The second widget",
          "recursive":" Recurse into all compatible layouts to\n   find the widget.",
          "widget1":" The first widget"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget1":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget1":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[],[]],
        "interface":[[]]
      },
      "description":"\n\n If `widget1` is present multiple time, only the first instance is swapped.\n\n Calls `set` internally, so the signal `widget::replaced` is emitted for both\n widgets as well.\n",
      "tags":{
        "see":[],
        "emits":["widget::swapped"],
        "interface":["layout"],
        "emitstparam":["widget::swapped widget self The layout.","widget::swapped widget widget1 The first widget.","widget::swapped widget widget2 The second widget.","widget::swapped number index1 The first index.","widget::swapped number index1 The second index."]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Swap 2 widgets in a layout.",
      "name":"swap_widgets",
      "type":"method",
      "args":"(widget1, widget2[, recursive=false])",
      "kind":"object methods ",
      "lineno":434
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Reset the layout.",
      "name":"reset",
      "modifiers":{
        "emits":[[]],
        "field":[],
        "return":[],
        "emitstparam":[[]],
        "interface":[[]]
      },
      "description":" This removes all widgets from the layout.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":{
        "interface":["layout"],
        "emits":["widget::reset"],
        "emitstparam":["widget::reset widget self The layout."]
      },
      "lineno":440
    }],
  "type":"layoutmod",
  "usage":["wibox.widget {\n    generic_widget( &#34first&#34  ),\n    generic_widget( &#34second&#34 ),\n    generic_widget( &#34third&#34  ),\n    layout  = wibox.layout.align.horizontal\n}\n"],
  "file":"/home/cji/portless/awesome/build/lib/wibox/layout/align.lua",
  "package":"",
  "tags":{
    "author":["Uli Schlachter"],
    "copyright":"2010 Uli Schlachter",
    "supermodule":["wibox.widget.base"]
  },
  "lineno":39
}