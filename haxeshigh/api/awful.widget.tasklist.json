{
  "inferred":true,
  "kind":"widgets",
  "mod_name":"awful.widget.tasklist",
  "summary":"Tasklist widget module for awful.",
  "sections":{
    "by_name":[]
  },
  "name":"awful.widget.tasklist",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"\n\n <a name=\"status_icons\"></a>\n **Status icons:**\n\n By default, the tasklist prepends some symbols in front of the client name.\n This is used to notify that the client has some specific properties that are\n currently enabled. This can be disabled using\n `beautiful.tasklist_plain_task_name`=true in the theme.\n\n <table class='widget_list' border=1>\n <tr style='font-weight: bold;'>\n  <th align='center'>Icon</th>\n  <th align='center'>Client property</th>\n </tr>\n <tr><td>▪</td><td><a href=\"./client.html#client.sticky\">sticky</a></td></tr>\n <tr><td>⌃</td><td><a href=\"./client.html#client.ontop\">ontop</a></td></tr>\n <tr><td>▴</td><td><a href=\"./client.html#client.above\">above</a></td></tr>\n <tr><td>▾</td><td><a href=\"./client.html#client.below\">below</a></td></tr>\n <tr><td>✈</td><td><a href=\"./client.html#client.floating\">floating</a></td></tr>\n <tr><td>+</td><td><a href=\"./client.html#client.maximized\">maximized</a></td></tr>\n <tr><td>⬌</td><td><a href=\"./client.html#client.maximized_horizontal\">maximized_horizontal</a></td></tr>\n <tr><td>⬍</td><td><a href=\"./client.html#client.maximized_vertical\">maximized_vertical</a></td></tr>\n </table>\n\n **Customizing the tasklist:**\n\n The `tasklist` created by `rc.lua` uses the default values for almost\n everything. However, it is possible to override each aspect to create a\n very different widget. Here's an example that creates a tasklist similar to\n the default one, but with an explicit layout and some spacing widgets:\n\n\n\n![Usage example](../images/AUTOGEN_wibox_awidget_tasklist_rounded.svg)\n\n \n     s.mytasklist = awful.widget.tasklist {\n         screen   = s,\n         filter   = awful.widget.tasklist.filter.currenttags,\n         buttons  = tasklist_buttons,\n         style    = {\n             border_width = 1,\n             border_color = &#34#777777&#34,\n             shape        = gears.shape.rounded_bar,\n         },\n         layout   = {\n             spacing = 10,\n             spacing_widget = {\n                 {\n                     forced_width = 5,\n                     shape        = gears.shape.circle,\n                     widget       = wibox.widget.separator\n                 },\n                 valign = &#34center&#34,\n                 halign = &#34center&#34,\n                 widget = wibox.container.place,\n             },\n             layout  = wibox.layout.flex.horizontal\n         },\n         -- Notice that there is *NO* `wibox.wibox` prefix, it is a template,\n         -- not a widget instance.\n         widget_template = {\n             {\n                 {\n                     {\n                         {\n                             id     = &#34icon_role&#34,\n                             widget = wibox.widget.imagebox,\n                         },\n                         margins = 2,\n                         widget  = wibox.container.margin,\n                     },\n                     {\n                         id     = &#34text_role&#34,\n                         widget = wibox.widget.textbox,\n                     },\n                     layout = wibox.layout.fixed.horizontal,\n                 },\n                 left  = 10,\n                 right = 10,\n                 widget = wibox.container.margin\n             },\n             id     = &#34background_role&#34,\n             widget = wibox.container.background,\n         },\n     }\n\n As demonstrated in the example above, there are a few \"shortcuts\" to avoid\n re-inventing the wheel. By setting the predefined roles as widget `id`s,\n `awful.widget.common` will do most of the work to update the values\n automatically. All of them are optional. The supported roles are:\n\n * `icon_role`: A `wibox.widget.imagebox`\n * `text_role`: A `wibox.widget.textbox`\n * `background_role`: A `wibox.container.background`\n * `text_margin_role`: A `wibox.container.margin`\n * `icon_margin_role`: A `wibox.container.margin`\n\n `awful.widget.common` also has 2 callbacks to give more control over the widget:\n\n * `create_callback`: Called once after the widget instance is created\n * `update_callback`: Called every time the data is refreshed\n\n Both callback have the same parameters:\n\n * `self`: The widget instance (*widget*).\n * `c`: The client (*client*)\n * `index`: The widget position in the list (*number*)\n * `clients`: The list of client, in order (*table*)\n\n It is also possible to omit some roles and create an icon only tasklist.\n Notice that this example use the `awful.widget.clienticon` widget instead\n of an `imagebox`. This allows higher resolution icons to be loaded. This\n example reproduces the Windows 10 tasklist look and feel:\n\n\n\n![Usage example](../images/AUTOGEN_wibox_awidget_tasklist_windows10.svg)\n\n \n     s.mytasklist = awful.widget.tasklist {\n         screen   = s,\n         filter   = awful.widget.tasklist.filter.currenttags,\n         buttons  = tasklist_buttons,\n         layout   = {\n             spacing_widget = {\n                 {\n                     forced_width  = 5,\n                     forced_height = 24,\n                     thickness     = 1,\n                     color         = &#34#777777&#34,\n                     widget        = wibox.widget.separator\n                 },\n                 valign = &#34center&#34,\n                 halign = &#34center&#34,\n                 widget = wibox.container.place,\n             },\n             spacing = 1,\n             layout  = wibox.layout.fixed.horizontal\n         },\n         -- Notice that there is *NO* `wibox.wibox` prefix, it is a template,\n         -- not a widget instance.\n         widget_template = {\n             {\n                 wibox.widget.base.make_widget(),\n                 forced_height = 5,\n                 id            = &#34background_role&#34,\n                 widget        = wibox.container.background,\n             },\n             {\n                 awful.widget.clienticon,\n                 margins = 5,\n                 widget  = wibox.container.margin\n             },\n             nil,\n             layout = wibox.layout.align.vertical,\n         },\n     }\n\n The tasklist can also be created in an `awful.popup` in case there is no\n permanent `awful.wibar`:\n\n\n\n![Usage example](../images/AUTOGEN_awful_popup_alttab.svg)\n\n \n     awful.popup {\n         widget = awful.widget.tasklist {\n             screen   = screen[1],\n             filter   = awful.widget.tasklist.filter.allscreen,\n             buttons  = tasklist_buttons,\n             style    = {\n                 shape = gears.shape.rounded_rect,\n             },\n             layout   = {\n                 spacing = 5,\n                 forced_num_rows = 2,\n                 layout = wibox.layout.grid.horizontal\n             },\n             widget_template = {\n                 {\n                     {\n                         id     = &#34clienticon&#34,\n                         widget = awful.widget.clienticon,\n                     },\n                     margins = 4,\n                     widget  = wibox.container.margin,\n                 },\n                 id              = &#34background_role&#34,\n                 forced_width    = 48,\n                 forced_height   = 48,\n                 widget          = wibox.container.background,\n                 create_callback = function(self, c, index, objects) --luacheck: no unused\n                     self:get_children_by_id(&#34clienticon&#34)[1].client = c\n                 end,\n             },\n         },\n         border_color = &#34#777777&#34,\n         border_width = 2,\n         ontop        = true,\n         placement    = awful.placement.centered,\n         shape        = gears.shape.rounded_rect\n     }\n",
  "items":[{
      "parameter":"field",
      "params":{
        "1":"fg_normal",
        "map":{
          "fg_normal":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "fg_normal":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "fg_normal":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default foreground (text) color.",
      "name":"beautiful.tasklist_fg_normal",
      "type":"beautiful",
      "args":"([fg_normal=nil])",
      "kind":"theme variables",
      "lineno":248
    },{
      "parameter":"field",
      "params":{
        "1":"bg_normal",
        "map":{
          "bg_normal":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "bg_normal":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "bg_normal":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default background color.",
      "name":"beautiful.tasklist_bg_normal",
      "type":"beautiful",
      "args":"([bg_normal=nil])",
      "kind":"theme variables",
      "lineno":253
    },{
      "parameter":"field",
      "params":{
        "1":"fg_focus",
        "map":{
          "fg_focus":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "fg_focus":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "fg_focus":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The focused client foreground (text) color.",
      "name":"beautiful.tasklist_fg_focus",
      "type":"beautiful",
      "args":"([fg_focus=nil])",
      "kind":"theme variables",
      "lineno":258
    },{
      "parameter":"field",
      "params":{
        "1":"bg_focus",
        "map":{
          "bg_focus":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "bg_focus":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "bg_focus":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The focused client background color.",
      "name":"beautiful.tasklist_bg_focus",
      "type":"beautiful",
      "args":"([bg_focus=nil])",
      "kind":"theme variables",
      "lineno":263
    },{
      "parameter":"field",
      "params":{
        "1":"fg_urgent",
        "map":{
          "fg_urgent":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "fg_urgent":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "fg_urgent":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The urgent clients foreground (text) color.",
      "name":"beautiful.tasklist_fg_urgent",
      "type":"beautiful",
      "args":"([fg_urgent=nil])",
      "kind":"theme variables",
      "lineno":268
    },{
      "parameter":"field",
      "params":{
        "1":"bg_urgent",
        "map":{
          "bg_urgent":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "bg_urgent":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "bg_urgent":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The urgent clients background color.",
      "name":"beautiful.tasklist_bg_urgent",
      "type":"beautiful",
      "args":"([bg_urgent=nil])",
      "kind":"theme variables",
      "lineno":273
    },{
      "parameter":"field",
      "params":{
        "1":"fg_minimize",
        "map":{
          "fg_minimize":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "fg_minimize":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "fg_minimize":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The minimized clients foreground (text) color.",
      "name":"beautiful.tasklist_fg_minimize",
      "type":"beautiful",
      "args":"([fg_minimize=nil])",
      "kind":"theme variables",
      "lineno":278
    },{
      "parameter":"field",
      "params":{
        "1":"bg_minimize",
        "map":{
          "bg_minimize":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "bg_minimize":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          },
          "bg_minimize":{
            "optchain":"nil",
            "type":"string|pattern",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The minimized clients background color.",
      "name":"beautiful.tasklist_bg_minimize",
      "type":"beautiful",
      "args":"([bg_minimize=nil])",
      "kind":"theme variables",
      "lineno":283
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"bg_image_normal",
        "map":{
          "bg_image_normal":""
        }
      },
      "summary":"The elements default background image.",
      "name":"beautiful.tasklist_bg_image_normal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "bg_image_normal":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "bg_image_normal":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([bg_image_normal=nil])",
      "tags":[],
      "lineno":287
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"bg_image_focus",
        "map":{
          "bg_image_focus":""
        }
      },
      "summary":"The focused client background image.",
      "name":"beautiful.tasklist_bg_image_focus",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "bg_image_focus":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "bg_image_focus":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([bg_image_focus=nil])",
      "tags":[],
      "lineno":291
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"bg_image_urgent",
        "map":{
          "bg_image_urgent":""
        }
      },
      "summary":"The urgent clients background image.",
      "name":"beautiful.tasklist_bg_image_urgent",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "bg_image_urgent":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "bg_image_urgent":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([bg_image_urgent=nil])",
      "tags":[],
      "lineno":295
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"bg_image_minimize",
        "map":{
          "bg_image_minimize":""
        }
      },
      "summary":"The minimized clients background image.",
      "name":"beautiful.tasklist_bg_image_minimize",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "bg_image_minimize":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "bg_image_minimize":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([bg_image_minimize=nil])",
      "tags":[],
      "lineno":299
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tasklist_disable_icon",
        "map":{
          "tasklist_disable_icon":""
        }
      },
      "summary":"Disable the tasklist client icons.",
      "name":"beautiful.tasklist_disable_icon",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "tasklist_disable_icon":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "tasklist_disable_icon":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([tasklist_disable_icon=false])",
      "tags":[],
      "lineno":303
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tasklist_disable_task_name",
        "map":{
          "tasklist_disable_task_name":""
        }
      },
      "summary":"Disable the tasklist client titles.",
      "name":"beautiful.tasklist_disable_task_name",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "tasklist_disable_task_name":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "tasklist_disable_task_name":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([tasklist_disable_task_name=false])",
      "tags":[],
      "lineno":307
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tasklist_plain_task_name",
        "map":{
          "tasklist_plain_task_name":""
        }
      },
      "summary":"Disable the extra tasklist client property notification icons.",
      "name":"beautiful.tasklist_plain_task_name",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "tasklist_plain_task_name":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "tasklist_plain_task_name":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"\n\n See the <a href=\"#status_icons\">Status icons</a> section for more details.\n",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([tasklist_plain_task_name=false])",
      "tags":[],
      "lineno":314
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tasklist_sticky",
        "map":{
          "tasklist_sticky":""
        }
      },
      "summary":"Extra tasklist client property notification icon for clients with the sticky property set.",
      "name":"beautiful.tasklist_sticky",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_sticky":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_sticky":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([tasklist_sticky=nil])",
      "tags":[],
      "lineno":318
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tasklist_ontop",
        "map":{
          "tasklist_ontop":""
        }
      },
      "summary":"Extra tasklist client property notification icon for clients with the ontop property set.",
      "name":"beautiful.tasklist_ontop",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_ontop":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_ontop":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([tasklist_ontop=nil])",
      "tags":[],
      "lineno":322
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tasklist_above",
        "map":{
          "tasklist_above":""
        }
      },
      "summary":"Extra tasklist client property notification icon for clients with the above property set.",
      "name":"beautiful.tasklist_above",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_above":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_above":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([tasklist_above=nil])",
      "tags":[],
      "lineno":326
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tasklist_below",
        "map":{
          "tasklist_below":""
        }
      },
      "summary":"Extra tasklist client property notification icon for clients with the below property set.",
      "name":"beautiful.tasklist_below",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_below":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_below":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([tasklist_below=nil])",
      "tags":[],
      "lineno":330
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tasklist_floating",
        "map":{
          "tasklist_floating":""
        }
      },
      "summary":"Extra tasklist client property notification icon for clients with the floating property set.",
      "name":"beautiful.tasklist_floating",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_floating":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_floating":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([tasklist_floating=nil])",
      "tags":[],
      "lineno":334
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tasklist_maximized",
        "map":{
          "tasklist_maximized":""
        }
      },
      "summary":"Extra tasklist client property notification icon for clients with the maximized property set.",
      "name":"beautiful.tasklist_maximized",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_maximized":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "tasklist_maximized":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([tasklist_maximized=nil])",
      "tags":[],
      "lineno":338
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"maximized_horizontal",
        "map":{
          "maximized_horizontal":""
        }
      },
      "summary":"Extra tasklist client property notification icon for clients with the maximized_horizontal property set.",
      "name":"beautiful.tasklist_maximized_horizontal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "maximized_horizontal":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "maximized_horizontal":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([maximized_horizontal=nil])",
      "tags":[],
      "lineno":342
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"maximized_vertical",
        "map":{
          "maximized_vertical":""
        }
      },
      "summary":"Extra tasklist client property notification icon for clients with the maximized_vertical property set.",
      "name":"beautiful.tasklist_maximized_vertical",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "maximized_vertical":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "maximized_vertical":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([maximized_vertical=nil])",
      "tags":[],
      "lineno":346
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"minimized",
        "map":{
          "minimized":""
        }
      },
      "summary":"Extra tasklist client property notification icon for clients with the minimized property set.",
      "name":"beautiful.tasklist_minimized",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "minimized":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "minimized":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([minimized=nil])",
      "tags":[],
      "lineno":350
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"font",
        "map":{
          "font":""
        }
      },
      "summary":"The tasklist font.",
      "name":"beautiful.tasklist_font",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "font":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "font":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([font=nil])",
      "tags":[],
      "lineno":354
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"align",
        "map":{
          "align":" *left*, *right* or *center*"
        }
      },
      "summary":"The focused client alignment.",
      "name":"beautiful.tasklist_align",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"left",
            "type":"string",
            "opt":"left"
          },
          "align":{
            "optchain":"left",
            "type":"string",
            "opt":"left"
          }
        },
        "field":{
          "1":{
            "optchain":"left",
            "type":"string",
            "opt":"left"
          },
          "align":{
            "optchain":"left",
            "type":"string",
            "opt":"left"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([align=left])",
      "tags":[],
      "lineno":358
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"font_focus",
        "map":{
          "font_focus":""
        }
      },
      "summary":"The focused client title alignment.",
      "name":"beautiful.tasklist_font_focus",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "font_focus":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "font_focus":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([font_focus=nil])",
      "tags":[],
      "lineno":362
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"font_minimized",
        "map":{
          "font_minimized":""
        }
      },
      "summary":"The minimized clients font.",
      "name":"beautiful.tasklist_font_minimized",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "font_minimized":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "font_minimized":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([font_minimized=nil])",
      "tags":[],
      "lineno":366
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"font_urgent",
        "map":{
          "font_urgent":""
        }
      },
      "summary":"The urgent clients font.",
      "name":"beautiful.tasklist_font_urgent",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "font_urgent":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "font_urgent":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([font_urgent=nil])",
      "tags":[],
      "lineno":370
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"spacing",
        "map":{
          "spacing":" The spacing between tasks."
        }
      },
      "summary":"The space between the tasklist elements.",
      "name":"beautiful.tasklist_spacing",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "spacing":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "spacing":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([spacing=0])",
      "tags":[],
      "lineno":374
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "summary":"The default tasklist elements shape.",
      "name":"beautiful.tasklist_shape",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          },
          "shape":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          },
          "shape":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([shape=nil])",
      "tags":[],
      "lineno":378
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape_border_width",
        "map":{
          "shape_border_width":""
        }
      },
      "summary":"The default tasklist elements border width.",
      "name":"beautiful.tasklist_shape_border_width",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "shape_border_width":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "shape_border_width":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([shape_border_width=0])",
      "tags":[],
      "lineno":382
    },{
      "parameter":"field",
      "params":{
        "1":"shape_border_color",
        "map":{
          "shape_border_color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          },
          "shape_border_color":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          },
          "shape_border_color":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default tasklist elements border color.",
      "name":"beautiful.tasklist_shape_border_color",
      "type":"beautiful",
      "args":"([shape_border_color=nil])",
      "kind":"theme variables",
      "lineno":387
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape_focus",
        "map":{
          "shape_focus":""
        }
      },
      "summary":"The focused client shape.",
      "name":"beautiful.tasklist_shape_focus",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          },
          "shape_focus":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          },
          "shape_focus":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([shape_focus=nil])",
      "tags":[],
      "lineno":391
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape_border_width_focus",
        "map":{
          "shape_border_width_focus":""
        }
      },
      "summary":"The focused client border width.",
      "name":"beautiful.tasklist_shape_border_width_focus",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "shape_border_width_focus":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "shape_border_width_focus":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([shape_border_width_focus=0])",
      "tags":[],
      "lineno":395
    },{
      "parameter":"field",
      "params":{
        "1":"shape_border_color_focus",
        "map":{
          "shape_border_color_focus":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          },
          "shape_border_color_focus":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          },
          "shape_border_color_focus":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The focused client border color.",
      "name":"beautiful.tasklist_shape_border_color_focus",
      "type":"beautiful",
      "args":"([shape_border_color_focus=nil])",
      "kind":"theme variables",
      "lineno":400
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape_minimized",
        "map":{
          "shape_minimized":""
        }
      },
      "summary":"The minimized clients shape.",
      "name":"beautiful.tasklist_shape_minimized",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          },
          "shape_minimized":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          },
          "shape_minimized":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([shape_minimized=nil])",
      "tags":[],
      "lineno":404
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape_border_width_minimized",
        "map":{
          "shape_border_width_minimized":""
        }
      },
      "summary":"The minimized clients border width.",
      "name":"beautiful.tasklist_shape_border_width_minimized",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "shape_border_width_minimized":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "shape_border_width_minimized":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([shape_border_width_minimized=0])",
      "tags":[],
      "lineno":408
    },{
      "parameter":"field",
      "params":{
        "1":"shape_border_color_minimized",
        "map":{
          "shape_border_color_minimized":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          },
          "shape_border_color_minimized":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          },
          "shape_border_color_minimized":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The minimized clients border color.",
      "name":"beautiful.tasklist_shape_border_color_minimized",
      "type":"beautiful",
      "args":"([shape_border_color_minimized=nil])",
      "kind":"theme variables",
      "lineno":413
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape_urgent",
        "map":{
          "shape_urgent":""
        }
      },
      "summary":"The urgent clients shape.",
      "name":"beautiful.tasklist_shape_urgent",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          },
          "shape_urgent":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          },
          "shape_urgent":{
            "optchain":"nil",
            "type":"gears.shape",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([shape_urgent=nil])",
      "tags":[],
      "lineno":417
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape_border_width_urgent",
        "map":{
          "shape_border_width_urgent":""
        }
      },
      "summary":"The urgent clients border width.",
      "name":"beautiful.tasklist_shape_border_width_urgent",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "shape_border_width_urgent":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "shape_border_width_urgent":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([shape_border_width_urgent=0])",
      "tags":[],
      "lineno":421
    },{
      "parameter":"field",
      "params":{
        "1":"shape_border_color_urgent",
        "map":{
          "shape_border_color_urgent":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          },
          "shape_border_color_urgent":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          },
          "shape_border_color_urgent":{
            "optchain":"nil",
            "type":"string|color",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The urgent clients border color.",
      "name":"beautiful.tasklist_shape_border_color_urgent",
      "type":"beautiful",
      "args":"([shape_border_color_urgent=nil])",
      "kind":"theme variables",
      "lineno":426
    },{
      "inferred":true,
      "subparams":{
        "args":["args.screen","args.filter","args.buttons","args.update_function","args.layout","args.source","args.widget_template","args.style","args.style.fg_normal","args.style.bg_normal","args.style.fg_focus","args.style.bg_focus","args.style.fg_urgent","args.style.bg_urgent","args.style.fg_minimize","args.style.bg_minimize","args.style.bg_image_normal","args.style.bg_image_focus","args.style.bg_image_urgent","args.style.bg_image_minimize","args.style.tasklist_disable_icon","args.style.icon_size","args.style.sticky","args.style.ontop","args.style.above","args.style.below","args.style.floating","args.style.maximized","args.style.maximized_horizontal","args.style.maximized_vertical","args.style.disable_task_name","args.style.font","args.style.align","args.style.font_focus","args.style.font_minimized","args.style.font_urgent","args.style.spacing","args.style.shape","args.style.shape_border_width","args.style.shape_border_color","args.style.shape_focus","args.style.shape_border_width_focus","args.style.shape_border_color_focus","args.style.shape_minimized","args.style.shape_border_width_minimized","args.style.shape_border_color_minimized","args.style.shape_urgent","args.style.shape_border_width_urgent","args.style.shape_border_color_urgent"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "2":"filter",
        "3":"buttons",
        "4":"style",
        "5":"update_function",
        "6":"base_widget",
        "map":{
          "args.style.shape":"",
          "args.style.bg_image_normal":"",
          "args.layout":" Container widget for tag widgets. Default\n   is `wibox.layout.flex.horizontal`.",
          "args.style.shape_border_width":"",
          "args.style.bg_image_focus":"",
          "args.style.shape_border_color":"",
          "args.style.bg_image_urgent":"",
          "args.style.shape_minimized":"",
          "args.style.bg_image_minimize":"",
          "args.style.shape_border_width_minimized":"",
          "args.source":" The\n  function used to generate the list of client.",
          "args.style.shape_border_color_minimized":"",
          "args.style.icon_size":" The size of the icon",
          "args.style.shape_urgent":"",
          "args.style.fg_focus":"",
          "args.style.sticky":" Extra icon when client is sticky",
          "args.style.shape_border_width_urgent":"",
          "args.style.bg_focus":"",
          "args.style.ontop":" Extra icon when client is ontop",
          "args.style.fg_urgent":"",
          "args.style":" The style overrides default theme.",
          "args.style.above":" Extra icon when client is above",
          "args.buttons":" A table with buttons binding to set.",
          "update_function":" **DEPRECATED** use args.update_function",
          "args.style.below":" Extra icon when client is below",
          "args.style.shape_border_color_urgent":"",
          "args.style.shape_focus":"",
          "filter":" **DEPRECATED** use args.filter",
          "args.style.floating":" Extra icon when client is floating",
          "style":" **DEPRECATED** use args.style",
          "args.style.shape_border_color_focus":"",
          "args.style.fg_normal":"",
          "args.style.maximized":" Extra icon when client is maximized",
          "args.style.shape_border_width_focus":"",
          "args.style.bg_normal":"",
          "buttons":" **DEPRECATED** use args.buttons",
          "args.style.maximized_horizontal":" Extra icon when client is maximized_horizontal",
          "args.style.spacing":" The spacing between tags.",
          "args.style.font_urgent":"",
          "args.widget_template":" A custom widget to be used for each client",
          "args.style.maximized_vertical":" Extra icon when client is maximized_vertical",
          "args.style.font_focus":"",
          "args.screen":" The screen to draw tasklist for.",
          "args.style.font":"",
          "args.style.disable_task_name":"",
          "base_widget":" **DEPRECATED** use args.base_widget",
          "args.style.tasklist_disable_icon":"",
          "args.filter":" Filter function to define what clients will be listed.",
          "args.style.bg_urgent":"",
          "args.style.align":" *left*, *right* or *center*",
          "args.style.font_minimized":"",
          "args.style.fg_minimize":"",
          "args":"",
          "args.update_function":" Function to create a tag widget on each\n   update. See `awful.widget.common.list_update`.",
          "args.style.bg_minimize":""
        }
      },
      "summary":"Create a new tasklist widget.",
      "name":"awful.widget.tasklist",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"screen"
          },
          "3":{
            "type":"function"
          },
          "4":{
            "type":"table"
          },
          "5":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "6":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "7":{
            "type":"function",
            "opt":"awful.widget.tasklist.source.all_clients"
          },
          "8":{
            "type":"table",
            "opt":true
          },
          "9":{
            "type":"table",
            "opt":"{}"
          },
          "10":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "11":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "12":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "13":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "14":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "15":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "16":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "17":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "18":{
            "type":"string",
            "opt":"nil"
          },
          "19":{
            "type":"string",
            "opt":"nil"
          },
          "20":{
            "type":"string",
            "opt":"nil"
          },
          "21":{
            "type":"string",
            "opt":"nil"
          },
          "22":{
            "type":"boolean",
            "opt":"nil"
          },
          "23":{
            "type":"number",
            "opt":"nil"
          },
          "24":{
            "type":"string",
            "opt":"'▪'"
          },
          "25":{
            "type":"string",
            "opt":"'⌃'"
          },
          "26":{
            "type":"string",
            "opt":"'▴'"
          },
          "27":{
            "type":"string",
            "opt":"'▾'"
          },
          "28":{
            "type":"string",
            "opt":"'✈'"
          },
          "29":{
            "type":"string",
            "opt":"'<b>+</b>'"
          },
          "30":{
            "type":"string",
            "opt":"'⬌'"
          },
          "31":{
            "type":"string",
            "opt":"'⬍'"
          },
          "32":{
            "type":"boolean",
            "opt":"false"
          },
          "33":{
            "type":"string",
            "opt":"nil"
          },
          "34":{
            "type":"string",
            "opt":"left"
          },
          "35":{
            "type":"string",
            "opt":"nil"
          },
          "36":{
            "type":"string",
            "opt":"nil"
          },
          "37":{
            "type":"string",
            "opt":"nil"
          },
          "38":{
            "type":"number",
            "opt":"nil"
          },
          "39":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "40":{
            "type":"number",
            "opt":"nil"
          },
          "41":{
            "type":"string|color",
            "opt":"nil"
          },
          "42":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "43":{
            "type":"number",
            "opt":"nil"
          },
          "44":{
            "type":"string|color",
            "opt":"nil"
          },
          "45":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "46":{
            "type":"number",
            "opt":"nil"
          },
          "47":{
            "type":"string|color",
            "opt":"nil"
          },
          "48":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "49":{
            "type":"number",
            "opt":"nil"
          },
          "50":{
            "type":"string|color",
            "opt":"nil"
          },
          "51":[],
          "52":[],
          "53":[],
          "54":[],
          "55":[],
          "args.style.shape":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "args.style.bg_image_normal":{
            "type":"string",
            "opt":"nil"
          },
          "args.layout":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "args.style.shape_border_width":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.bg_image_focus":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.shape_border_color":{
            "type":"string|color",
            "opt":"nil"
          },
          "args.style.bg_image_urgent":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.shape_minimized":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "args.style.bg_image_minimize":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.shape_border_width_minimized":{
            "type":"number",
            "opt":"nil"
          },
          "args.source":{
            "type":"function",
            "opt":"awful.widget.tasklist.source.all_clients"
          },
          "args.style.shape_border_color_minimized":{
            "type":"string|color",
            "opt":"nil"
          },
          "args.style.icon_size":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.shape_urgent":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "args.style.fg_focus":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.sticky":{
            "type":"string",
            "opt":"'▪'"
          },
          "args.style.shape_border_width_urgent":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.bg_focus":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.ontop":{
            "type":"string",
            "opt":"'⌃'"
          },
          "args.style.fg_urgent":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style":{
            "type":"table",
            "opt":"{}"
          },
          "args.style.above":{
            "type":"string",
            "opt":"'▴'"
          },
          "args.buttons":{
            "type":"table"
          },
          "update_function":[],
          "args.style.below":{
            "type":"string",
            "opt":"'▾'"
          },
          "args.style.shape_border_color_urgent":{
            "type":"string|color",
            "opt":"nil"
          },
          "args.style.shape_focus":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "filter":[],
          "args.style.floating":{
            "type":"string",
            "opt":"'✈'"
          },
          "style":[],
          "args.style.shape_border_color_focus":{
            "type":"string|color",
            "opt":"nil"
          },
          "args.style.fg_normal":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.maximized":{
            "type":"string",
            "opt":"'<b>+</b>'"
          },
          "args.style.shape_border_width_focus":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.bg_normal":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "buttons":[],
          "args.style.maximized_horizontal":{
            "type":"string",
            "opt":"'⬌'"
          },
          "args.style.spacing":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.font_urgent":{
            "type":"string",
            "opt":"nil"
          },
          "args.widget_template":{
            "type":"table",
            "opt":true
          },
          "args.style.maximized_vertical":{
            "type":"string",
            "opt":"'⬍'"
          },
          "args.style.font_focus":{
            "type":"string",
            "opt":"nil"
          },
          "args.screen":{
            "type":"screen"
          },
          "args.style.font":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.disable_task_name":{
            "type":"boolean",
            "opt":"false"
          },
          "base_widget":[],
          "args.style.tasklist_disable_icon":{
            "type":"boolean",
            "opt":"nil"
          },
          "args.filter":{
            "type":"function"
          },
          "args.style.bg_urgent":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.align":{
            "type":"string",
            "opt":"left"
          },
          "args.style.font_minimized":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.fg_minimize":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args":{
            "type":"table"
          },
          "args.update_function":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "args.style.bg_minimize":{
            "type":"string|pattern",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"screen"
          },
          "3":{
            "type":"function"
          },
          "4":{
            "type":"table"
          },
          "5":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "6":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "7":{
            "type":"function",
            "opt":"awful.widget.tasklist.source.all_clients"
          },
          "8":{
            "type":"table",
            "opt":true
          },
          "9":{
            "type":"table",
            "opt":"{}"
          },
          "10":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "11":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "12":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "13":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "14":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "15":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "16":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "17":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "18":{
            "type":"string",
            "opt":"nil"
          },
          "19":{
            "type":"string",
            "opt":"nil"
          },
          "20":{
            "type":"string",
            "opt":"nil"
          },
          "21":{
            "type":"string",
            "opt":"nil"
          },
          "22":{
            "type":"boolean",
            "opt":"nil"
          },
          "23":{
            "type":"number",
            "opt":"nil"
          },
          "24":{
            "type":"string",
            "opt":"'▪'"
          },
          "25":{
            "type":"string",
            "opt":"'⌃'"
          },
          "26":{
            "type":"string",
            "opt":"'▴'"
          },
          "27":{
            "type":"string",
            "opt":"'▾'"
          },
          "28":{
            "type":"string",
            "opt":"'✈'"
          },
          "29":{
            "type":"string",
            "opt":"'<b>+</b>'"
          },
          "30":{
            "type":"string",
            "opt":"'⬌'"
          },
          "31":{
            "type":"string",
            "opt":"'⬍'"
          },
          "32":{
            "type":"boolean",
            "opt":"false"
          },
          "33":{
            "type":"string",
            "opt":"nil"
          },
          "34":{
            "type":"string",
            "opt":"left"
          },
          "35":{
            "type":"string",
            "opt":"nil"
          },
          "36":{
            "type":"string",
            "opt":"nil"
          },
          "37":{
            "type":"string",
            "opt":"nil"
          },
          "38":{
            "type":"number",
            "opt":"nil"
          },
          "39":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "40":{
            "type":"number",
            "opt":"nil"
          },
          "41":{
            "type":"string|color",
            "opt":"nil"
          },
          "42":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "43":{
            "type":"number",
            "opt":"nil"
          },
          "44":{
            "type":"string|color",
            "opt":"nil"
          },
          "45":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "46":{
            "type":"number",
            "opt":"nil"
          },
          "47":{
            "type":"string|color",
            "opt":"nil"
          },
          "48":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "49":{
            "type":"number",
            "opt":"nil"
          },
          "50":{
            "type":"string|color",
            "opt":"nil"
          },
          "51":[],
          "52":[],
          "53":[],
          "54":[],
          "55":[],
          "args.style.shape":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "args.style.bg_image_normal":{
            "type":"string",
            "opt":"nil"
          },
          "args.layout":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "args.style.shape_border_width":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.bg_image_focus":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.shape_border_color":{
            "type":"string|color",
            "opt":"nil"
          },
          "args.style.bg_image_urgent":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.shape_minimized":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "args.style.bg_image_minimize":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.shape_border_width_minimized":{
            "type":"number",
            "opt":"nil"
          },
          "args.source":{
            "type":"function",
            "opt":"awful.widget.tasklist.source.all_clients"
          },
          "args.style.shape_border_color_minimized":{
            "type":"string|color",
            "opt":"nil"
          },
          "args.style.icon_size":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.shape_urgent":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "args.style.fg_focus":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.sticky":{
            "type":"string",
            "opt":"'▪'"
          },
          "args.style.shape_border_width_urgent":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.bg_focus":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.ontop":{
            "type":"string",
            "opt":"'⌃'"
          },
          "args.style.fg_urgent":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style":{
            "type":"table",
            "opt":"{}"
          },
          "args.style.above":{
            "type":"string",
            "opt":"'▴'"
          },
          "args.buttons":{
            "type":"table"
          },
          "update_function":[],
          "args.style.below":{
            "type":"string",
            "opt":"'▾'"
          },
          "args.style.shape_border_color_urgent":{
            "type":"string|color",
            "opt":"nil"
          },
          "args.style.shape_focus":{
            "type":"gears.shape",
            "opt":"nil"
          },
          "filter":[],
          "args.style.floating":{
            "type":"string",
            "opt":"'✈'"
          },
          "style":[],
          "args.style.shape_border_color_focus":{
            "type":"string|color",
            "opt":"nil"
          },
          "args.style.fg_normal":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.maximized":{
            "type":"string",
            "opt":"'<b>+</b>'"
          },
          "args.style.shape_border_width_focus":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.bg_normal":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "buttons":[],
          "args.style.maximized_horizontal":{
            "type":"string",
            "opt":"'⬌'"
          },
          "args.style.spacing":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.font_urgent":{
            "type":"string",
            "opt":"nil"
          },
          "args.widget_template":{
            "type":"table",
            "opt":true
          },
          "args.style.maximized_vertical":{
            "type":"string",
            "opt":"'⬍'"
          },
          "args.style.font_focus":{
            "type":"string",
            "opt":"nil"
          },
          "args.screen":{
            "type":"screen"
          },
          "args.style.font":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.disable_task_name":{
            "type":"boolean",
            "opt":"false"
          },
          "base_widget":[],
          "args.style.tasklist_disable_icon":{
            "type":"boolean",
            "opt":"nil"
          },
          "args.filter":{
            "type":"function"
          },
          "args.style.bg_urgent":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.align":{
            "type":"string",
            "opt":"left"
          },
          "args.style.font_minimized":{
            "type":"string",
            "opt":"nil"
          },
          "args.style.fg_minimize":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args":{
            "type":"table"
          },
          "args.update_function":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "args.style.bg_minimize":{
            "type":"string|pattern",
            "opt":"nil"
          }
        }
      },
      "description":"\n The last two arguments (update_function\n and layout) serve to customize the layout of the tasklist (eg. to\n make it vertical). For that, you will need to copy the\n awful.widget.common.list_update function, make your changes to it\n and pass it as update_function here. Also change the layout if the\n default is not what you want.\n",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(args, filter, buttons, style[, update_function[, base_widget]])",
      "tags":[],
      "lineno":705
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Filtering function to include all clients.",
      "name":"awful.widget.tasklist.filter.allscreen",
      "modifiers":{
        "field":[],
        "return":[[]]
      },
      "description":"",
      "type":"filterfunction",
      "section":"filterfunction",
      "kind":"list filters",
      "args":"()",
      "tags":[],
      "lineno":834
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"screen",
        "map":{
          "c":" The client.",
          "screen":" The screen we are drawing on."
        }
      },
      "summary":"Filtering function to include the clients from all tags on the screen.",
      "name":"awful.widget.tasklist.filter.alltags",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "2":[],
          "c":[],
          "screen":[]
        },
        "field":{
          "1":[],
          "2":[],
          "c":[],
          "screen":[]
        }
      },
      "description":"",
      "type":"filterfunction",
      "section":"filterfunction",
      "kind":"list filters",
      "args":"(c, screen)",
      "tags":[],
      "lineno":843
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"screen",
        "map":{
          "c":" The client.",
          "screen":" The screen we are drawing on."
        }
      },
      "summary":"Filtering function to include only the clients from currently selected tags.",
      "name":"awful.widget.tasklist.filter.currenttags",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "2":[],
          "c":[],
          "screen":[]
        },
        "field":{
          "1":[],
          "2":[],
          "c":[],
          "screen":[]
        }
      },
      "description":"",
      "type":"filterfunction",
      "section":"filterfunction",
      "kind":"list filters",
      "args":"(c, screen)",
      "tags":[],
      "lineno":853
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"screen",
        "map":{
          "c":" The client.",
          "screen":" The screen we are drawing on."
        }
      },
      "summary":"Filtering function to include only the minimized clients from currently selected tags.",
      "name":"awful.widget.tasklist.filter.minimizedcurrenttags",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "2":[],
          "c":[],
          "screen":[]
        },
        "field":{
          "1":[],
          "2":[],
          "c":[],
          "screen":[]
        }
      },
      "description":"",
      "type":"filterfunction",
      "section":"filterfunction",
      "kind":"list filters",
      "args":"(c, screen)",
      "tags":[],
      "lineno":878
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"screen",
        "map":{
          "c":" The client.",
          "screen":" The screen we are drawing on."
        }
      },
      "summary":"Filtering function to include only the currently focused client.",
      "name":"awful.widget.tasklist.filter.focused",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "2":[],
          "c":[],
          "screen":[]
        },
        "field":{
          "1":[],
          "2":[],
          "c":[],
          "screen":[]
        }
      },
      "description":"",
      "type":"filterfunction",
      "section":"filterfunction",
      "kind":"list filters",
      "args":"(c, screen)",
      "tags":[],
      "lineno":906
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get all the clients in an undefined order.",
      "name":"awful.widget.tasklist.source.all_clients",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This is the default source.\n",
      "type":"sourcefunction",
      "section":"sourcefunction",
      "kind":"list source functions",
      "args":"()",
      "tags":[],
      "lineno":916
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get or set the children elements.",
      "name":"children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":940
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get all direct and indirect children widgets.",
      "name":"all_children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"\n This will scan all containers recursively to find widgets\n Warning: This method it prone to stack overflow id the widget, or any of its\n children, contain (directly or indirectly) itself.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":948
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":954
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":" The height (`nil` for automatic)"
        }
      },
      "summary":"Force a widget height.",
      "name":"forced_height",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":959
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":" The width (`nil` for automatic)"
        }
      },
      "summary":"Force a widget width.",
      "name":"forced_width",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":964
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" The opacity (between 0 and 1)"
        }
      },
      "summary":"The widget opacity (transparency).",
      "name":"opacity",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([opacity=1])",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":969
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"The widget visibility.",
      "name":"visible",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":974
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "table":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "table":[]
        },
        "return":[]
      },
      "description":"\n\n The table contains a list of `awful.button` objects.\n",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The widget buttons.",
      "name":"buttons",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":983
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button to add."
        }
      },
      "summary":"Add a new `awful.button` to this widget.",
      "name":"add_button",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(button)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":988
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"signal_name",
        "2":"...",
        "map":{
          "signal_name":"",
          "...":" Other arguments"
        }
      },
      "summary":"Emit a signal and ensure all parent widgets in the hierarchies also\n forward the signal.",
      "name":"emit_signal_recursive",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":" This is useful to track signals when there is a dynamic\n set of containers and layouts wrapping the widget.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(signal_name, ...)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":996
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the previous results of `:layout()` and `:fit()`\n are no longer valid.  Unless this signal is emitted, `:layout()` and `:fit()`\n must return the same result when called with the same arguments.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the layout (size) change.",
      "name":"widget::layout_changed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":1004
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the content of the widget changes. The widget will\n be redrawn, it is not re-layouted. Put differently, it is assumed that\n `:layout()` and `:fit()` would still return the same results as before.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the widget content changed.",
      "name":"widget::redraw_needed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":1012
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is pressed over the widget.",
      "name":"button::press",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":1043
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is released over the widget.",
      "name":"button::release",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":1074
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse enter a widget.",
      "name":"mouse::enter",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":1099
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse leave a widget.",
      "name":"mouse::leave",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":1124
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1140
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1146
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1159
    }],
  "type":"widgetmod",
  "file":"/home/cji/portless/awesome/build/lib/awful/widget/tasklist.lua",
  "package":"",
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2008-2009 Julien Danjou"
  },
  "lineno":213
}