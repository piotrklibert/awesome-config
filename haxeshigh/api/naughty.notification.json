{
  "inferred":true,
  "kind":"core_components",
  "mod_name":"naughty.notification",
  "summary":"A notification object.",
  "sections":{
    "by_name":[]
  },
  "name":"naughty.notification",
  "modifiers":{
    "copyright":[[],[]],
    "author":[[]]
  },
  "description":"\n\n This class creates individual notification objects that can be manipulated\n to extend the default behavior.\n\n This class doesn't define the actual widget, but is rather intended as a data\n object to hold the properties. All examples assume the default widgets, but\n the whole implementation can be replaced.\n\n\n\n![Usage example](../images/AUTOGEN_naughty_actions.svg)\n\n",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_font",
        "map":{
          "notification_font":""
        }
      },
      "summary":"Notifications font.",
      "name":"beautiful.notification_font",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string|lgi.Pango.FontDescription"
          },
          "notification_font":{
            "type":"string|lgi.Pango.FontDescription"
          }
        },
        "field":{
          "1":{
            "type":"string|lgi.Pango.FontDescription"
          },
          "notification_font":{
            "type":"string|lgi.Pango.FontDescription"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(notification_font)",
      "tags":[],
      "lineno":37
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_bg",
        "map":{
          "notification_bg":""
        }
      },
      "summary":"Notifications background color.",
      "name":"beautiful.notification_bg",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"color"
          },
          "notification_bg":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"color"
          },
          "notification_bg":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(notification_bg)",
      "tags":[],
      "lineno":41
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_fg",
        "map":{
          "notification_fg":""
        }
      },
      "summary":"Notifications foreground color.",
      "name":"beautiful.notification_fg",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"color"
          },
          "notification_fg":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"color"
          },
          "notification_fg":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(notification_fg)",
      "tags":[],
      "lineno":45
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_border_width",
        "map":{
          "notification_border_width":""
        }
      },
      "summary":"Notifications border width.",
      "name":"beautiful.notification_border_width",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "notification_border_width":{
            "type":"int"
          }
        },
        "field":{
          "1":{
            "type":"int"
          },
          "notification_border_width":{
            "type":"int"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(notification_border_width)",
      "tags":[],
      "lineno":49
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_border_color",
        "map":{
          "notification_border_color":""
        }
      },
      "summary":"Notifications border color.",
      "name":"beautiful.notification_border_color",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"color"
          },
          "notification_border_color":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"color"
          },
          "notification_border_color":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(notification_border_color)",
      "tags":[],
      "lineno":53
    },{
      "parameter":"field",
      "params":{
        "1":"notification_shape",
        "map":{
          "notification_shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "type":"gears.shape",
            "opt":true
          },
          "notification_shape":{
            "optchain":true,
            "type":"gears.shape",
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"gears.shape",
            "opt":true
          },
          "notification_shape":{
            "optchain":true,
            "type":"gears.shape",
            "opt":true
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"Notifications shape.",
      "name":"beautiful.notification_shape",
      "type":"beautiful",
      "args":"([notification_shape])",
      "kind":"theme variables",
      "lineno":58
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_opacity",
        "map":{
          "notification_opacity":""
        }
      },
      "summary":"Notifications opacity.",
      "name":"beautiful.notification_opacity",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "type":"int",
            "opt":true
          },
          "notification_opacity":{
            "optchain":true,
            "type":"int",
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"int",
            "opt":true
          },
          "notification_opacity":{
            "optchain":true,
            "type":"int",
            "opt":true
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([notification_opacity])",
      "tags":[],
      "lineno":62
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_margin",
        "map":{
          "notification_margin":""
        }
      },
      "summary":"The margins inside of the notification widget (or popup).",
      "name":"beautiful.notification_margin",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "notification_margin":{
            "type":"int"
          }
        },
        "field":{
          "1":{
            "type":"int"
          },
          "notification_margin":{
            "type":"int"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(notification_margin)",
      "tags":[],
      "lineno":66
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_width",
        "map":{
          "notification_width":""
        }
      },
      "summary":"Notifications width.",
      "name":"beautiful.notification_width",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "notification_width":{
            "type":"int"
          }
        },
        "field":{
          "1":{
            "type":"int"
          },
          "notification_width":{
            "type":"int"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(notification_width)",
      "tags":[],
      "lineno":70
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_height",
        "map":{
          "notification_height":""
        }
      },
      "summary":"Notifications height.",
      "name":"beautiful.notification_height",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "notification_height":{
            "type":"int"
          }
        },
        "field":{
          "1":{
            "type":"int"
          },
          "notification_height":{
            "type":"int"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(notification_height)",
      "tags":[],
      "lineno":74
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"2",
            "opt":"2"
          },
          "number":{
            "optchain":"2",
            "opt":"2"
          }
        },
        "field":{
          "1":{
            "optchain":"2",
            "opt":"2"
          },
          "number":{
            "optchain":"2",
            "opt":"2"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The spacing between the notifications.",
      "name":"beautiful.notification_spacing",
      "type":"beautiful",
      "args":"([number=2])",
      "kind":"theme variables",
      "lineno":79
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n This exists only for the pre-AwesomeWM v4.4 new notification implementation.\n Please always use `title`.\n",
      "tags":{
        "see":[]
      },
      "section":"deprecatedproperty",
      "inferred":true,
      "subparams":[],
      "summary":"Text of the notification.",
      "name":"text",
      "type":"deprecatedproperty",
      "args":"(string)",
      "kind":"deprecated object properties",
      "lineno":95
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"title",
        "map":{
          "title":""
        }
      },
      "summary":"Title of the notification.",
      "name":"title",
      "modifiers":{
        "param":{
          "1":{
            "type":"string"
          },
          "title":{
            "type":"string"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "title":{
            "type":"string"
          }
        }
      },
      "description":"\n\n\n![Usage example](../images/AUTOGEN_naughty_helloworld.svg)\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(title)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":104
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"timeout",
        "map":{
          "timeout":""
        }
      },
      "summary":"Time in seconds after which popup expires.",
      "name":"timeout",
      "modifiers":{
        "param":{
          "1":{
            "type":"number"
          },
          "timeout":{
            "type":"number"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"number"
          },
          "timeout":{
            "type":"number"
          }
        }
      },
      "description":"\n   Set 0 for no timeout.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(timeout)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":110
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"The notification urgency level.",
      "name":"urgency",
      "modifiers":{
        "param":{
          "1":[],
          "string":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n The default urgency levels are:\n\n * low\n * normal\n * critical\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":122
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"category",
        "map":{
          "category":""
        }
      },
      "summary":"The notification category.",
      "name":"category",
      "modifiers":{
        "param":{
          "1":{
            "type":"string|nil"
          },
          "category":{
            "type":"string|nil"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"string|nil"
          },
          "category":{
            "type":"string|nil"
          }
        }
      },
      "description":"\n\n The category should be named using the `x-vendor.class.name` naming scheme or\n use one of the default categories:\n\n <table class='widget_list' border=1>\n  <tr style='font-weight: bold;'>\n   <th align='center'>Name</th>\n   <th align='center'>Description</th>\n  </tr>\n <tr><td><b>device</b></td><td>A generic device-related notification that\n  doesn't fit into any other category.</td></tr>\n <tr><td><b>device.added</b></td><td>A device, such as a USB device, was added to the system.</td></tr>\n <tr><td><b>device.error</b></td><td>A device had some kind of error.</td></tr>\n <tr><td><b>device.removed</b></td><td>A device, such as a USB device, was removed from the system.</td></tr>\n <tr><td><b>email</b></td><td>A generic e-mail-related notification that doesn't fit into\n  any other category.</td></tr>\n <tr><td><b>email.arrived</b></td><td>A new e-mail notification.</td></tr>\n <tr><td><b>email.bounced</b></td><td>A notification stating that an e-mail has bounced.</td></tr>\n <tr><td><b>im</b></td><td>A generic instant message-related notification that doesn't fit into\n  any other category.</td></tr>\n <tr><td><b>im.error</b></td><td>An instant message error notification.</td></tr>\n <tr><td><b>im.received</b></td><td>A received instant message notification.</td></tr>\n <tr><td><b>network</b></td><td>A generic network notification that doesn't fit into any other\n  category.</td></tr>\n <tr><td><b>network.connected</b></td><td>A network connection notification, such as successful\n  sign-on to a network service. <br />\n  This should not be confused with device.added for new network devices.</td></tr>\n <tr><td><b>network.disconnected</b></td><td>A network disconnected notification. This should not\n  be confused with <br />\n  device.removed for disconnected network devices.</td></tr>\n <tr><td><b>network.error</b></td><td>A network-related or connection-related error.</td></tr>\n <tr><td><b>presence</b></td><td>A generic presence change notification that doesn't fit into any\n  other category, <br />\n  such as going away or idle.</td></tr>\n <tr><td><b>presence.offline</b></td><td>An offline presence change notification.</td></tr>\n <tr><td><b>presence.online</b></td><td>An online presence change notification.</td></tr>\n <tr><td><b>transfer</b></td><td>A generic file transfer or download notification that doesn't\n  fit into any other category.</td></tr>\n <tr><td><b>transfer.complete</b></td><td>A file transfer or download complete notification.</td></tr>\n <tr><td><b>transfer.error</b></td><td>A file transfer or download error.</td></tr>\n </table>\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(category)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":169
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"True if the notification should be kept when an action is pressed.",
      "name":"resident",
      "modifiers":{
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n\n By default, invoking an action will destroy the notification. Some actions,\n like the \"Snooze\" action of alarm clock, will cause the notification to\n be updated with a date further in the future.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([boolean=false])",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":179
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"Delay in seconds after which hovered popup disappears.",
      "name":"hover_timeout",
      "modifiers":{
        "param":{
          "1":[],
          "number":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":184
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":""
        }
      },
      "summary":"Target screen for the notification.",
      "name":"screen",
      "modifiers":{
        "param":{
          "1":[],
          "screen":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "screen":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(screen)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":189
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n The possible values are:\n\n * *top_right*\n * *top_left*\n * *bottom_left*\n * *bottom_right*\n * *top_middle*\n * *bottom_middle*\n * *middle*\n\n\n\n![Usage example](../images/AUTOGEN_awful_notification_box_corner.svg)\n\n \n  \n  \n    for _, pos in ipairs {\n        &#34top_left&#34   , &#34top_middle&#34   , &#34top_right&#34,\n        &#34bottom_left&#34, &#34bottom_middle&#34, &#34bottom_right&#34,\n    } do\n        for i=1, 3 do\n            naughty.notification {\n                position = pos,\n                title    = pos .. &#34 &#34 .. i,\n                message  = ever_longer_messages(i)\n            }\n        end\n    end\n",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Corner of the workarea displaying the popups.",
      "name":"position",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":226
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Boolean forcing popups to display on top.",
      "name":"ontop",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":[],
      "lineno":230
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "number":[]
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":[],
          "number":[]
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_awful_notification_geometry.svg)\n\n \n  \n    for _, pos in ipairs {\n        &#34top_left&#34   , &#34top_middle&#34   , &#34top_right&#34,\n        &#34bottom_left&#34, &#34bottom_middle&#34, &#34bottom_right&#34,\n    } do\n        for i=1, 2 do\n            naughty.notification {\n                position = pos,\n                title    = pos .. &#34 &#34 .. i,\n                width    = 50*i,\n                height   = 50*i,\n                message  = &#34This is a very, very, very, &#34..\n                    &#34very, very very long message&#34,\n            }\n        end\n    end\n",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Popup height.",
      "name":"height",
      "type":"property",
      "args":"(number)",
      "kind":"object properties",
      "lineno":259
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "number":[]
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Popup width.",
      "name":"width",
      "type":"property",
      "args":"(number)",
      "kind":"object properties",
      "lineno":265
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "field":{
          "1":[],
          "string":[]
        },
        "usage":[[]],
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "propemits":[[]]
      },
      "description":"\n\n\n![Usage example](../images/AUTOGEN_naughty_colors.svg)\n",
      "tags":{
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Notification font.",
      "name":"font",
      "kind":"object properties",
      "usage":["local text = [[An <b>important</b>;<i>notification</i>;]]\n \nrequire(&#34naughty&#34).notification {\n    title        = &#34Hello world!&#34,\n    text         = text,\n    icon         = beautiful.icon,\n    bg           = &#34#0000ff&#34,\n    fg           = &#34#ff0000&#34,\n    font         = &#34verdana 14&#34,\n    border_width = 1,\n    border_color = &#34#ff0000&#34\n}\n"],
      "args":"(string)",
      "type":"property",
      "lineno":287
    },{
      "parameter":"field",
      "params":{
        "1":"icon",
        "map":{
          "icon":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"string|surface"
          },
          "icon":{
            "type":"string|surface"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"string|surface"
          },
          "icon":{
            "type":"string|surface"
          }
        }
      },
      "description":"\n\n A notification can provide a combination of an icon, a static image, or if\n enabled, a looping animation. Add to that the ability to import the icon\n information from the client or from a `.desktop` file, there is multiple\n conflicting sources of \"icons\".\n\n On the other hand, the vast majority of notifications don't multiple or\n ambiguous sources of icons. This property will pick the first of the\n following.\n\n * The `image`.\n * The `app_icon`.\n * The `icon` from a client with `normal` type.\n * The `icon` of a client with `dialog` type.\n",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"\"All in one\" way to access the default image or icon.",
      "name":"icon",
      "type":"property",
      "args":"(icon)",
      "kind":"object properties",
      "lineno":309
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"Desired icon size in px.",
      "name":"icon_size",
      "modifiers":{
        "param":{
          "1":[],
          "number":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":314
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"The icon provided in the `app_icon` field of the DBus notification.",
      "name":"app_icon",
      "modifiers":{
        "param":{
          "1":[],
          "string":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n This should always be either the URI (path) to an icon or a valid XDG\n icon name to be fetched from the theme.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":323
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"image",
        "map":{
          "image":""
        }
      },
      "summary":"The notification image.",
      "name":"image",
      "modifiers":{
        "param":{
          "1":{
            "type":"string|surface"
          },
          "image":{
            "type":"string|surface"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"string|surface"
          },
          "image":{
            "type":"string|surface"
          }
        }
      },
      "description":"\n\n This is usually provided as a `gears.surface` object. The image is used\n instead of the `app_icon` by notification assets which are auto-generated\n or stored elsewhere than the filesystem (databases, web, Android phones, etc).\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(image)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":333
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"images",
        "map":{
          "images":""
        }
      },
      "summary":"The notification (animated) images.",
      "name":"images",
      "modifiers":{
        "param":{
          "1":{
            "type":"nil|table"
          },
          "images":{
            "type":"nil|table"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"nil|table"
          },
          "images":{
            "type":"nil|table"
          }
        }
      },
      "description":"\n\n Note that calling this without first setting\n `naughty.image_animations_enabled` to true will throw an exception.\n\n Also note that there is *zero* support for this anywhere else in `naughty`\n and very, very few applications support this.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(images)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":345
    },{
      "parameter":"field",
      "params":{
        "1":"fg",
        "map":{
          "fg":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"string|color|pattern"
          },
          "fg":{
            "type":"string|color|pattern"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"string|color|pattern"
          },
          "fg":{
            "type":"string|color|pattern"
          }
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_awful_notification_fg.svg)\n\n \n  \n    -- A notification popup using the default widget_template.\n    naughty.connect_signal(&#34request::display&#34, function(n)\n        naughty.layout.box {notification = n}\n    end)\n  \n    -- Notifications as widgets for any `wibox`/`awful.wibar`/`awful.popup`\n    some_wibar.widget = naughty.list.notifications {}\n  \n    for _, color in ipairs {&#34#ff0000&#34, &#34#00ff00&#34, &#34#0000ff&#34} do\n        naughty.notification {\n            title   = &#34A &#34.. color ..&#34 notification&#34,\n            message = &#34Message&#34,\n            fg      = color,\n        }\n    end\n require(&#34gears.timer&#34).run_delayed_calls_now()\n",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Foreground color.",
      "name":"fg",
      "type":"property",
      "args":"(fg)",
      "kind":"object properties",
      "lineno":376
    },{
      "parameter":"field",
      "params":{
        "1":"bg",
        "map":{
          "bg":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"string|color|pattern"
          },
          "bg":{
            "type":"string|color|pattern"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"string|color|pattern"
          },
          "bg":{
            "type":"string|color|pattern"
          }
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_awful_notification_bg.svg)\n\n \n  \n    -- A notification popup using the default widget_template.\n    naughty.connect_signal(&#34request::display&#34, function(n)\n        naughty.layout.box {notification = n}\n    end)\n  \n    -- Notifications as widgets for any `wibox`/`awful.wibar`/`awful.popup`\n    some_wibar.widget = naughty.list.notifications {}\n  \n    for _, color in ipairs {&#34#ff0000&#34, &#34#00ff00&#34, &#34#0000ff&#34} do\n        naughty.notification {\n            title = &#34A &#34.. color ..&#34 notification&#34,\n            bg    = color,\n        }\n    end\n require(&#34gears.timer&#34).run_delayed_calls_now()\n",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Background color.",
      "name":"bg",
      "type":"property",
      "args":"(bg)",
      "kind":"object properties",
      "lineno":406
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"Border width.",
      "name":"border_width",
      "modifiers":{
        "param":{
          "1":[],
          "number":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":411
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_awful_notification_border_color.svg)\n\n \n  \n    -- A notification popup using the default widget_template.\n    naughty.connect_signal(&#34request::display&#34, function(n)\n        naughty.layout.box {notification = n}\n    end)\n  \n    -- Notifications as widgets for any `wibox`/`awful.wibar`/`awful.popup`\n    some_wibar.widget = naughty.list.notifications {}\n  \n    for bw, color in ipairs {&#34#ff0000&#34, &#34#00ff00&#34, &#34#0000ff&#34} do\n        naughty.notification {\n            title        = &#34A &#34.. color ..&#34 notification&#34,\n            border_color = color,\n            border_width = bw*2,\n        }\n    end\n require(&#34gears.timer&#34).run_delayed_calls_now()\n",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Border color.",
      "name":"border_color",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":441
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "summary":"Widget shape.",
      "name":"shape",
      "modifiers":{
        "param":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        }
      },
      "description":"\n\n Note that when using a custom `request::display` handler or `naughty.rules`,\n choosing between multiple shapes depending on the content can be done using\n expressions like:\n\n    -- The notification object is called `n`\n    shape = #n.actions > 0 and\n        gears.shape.rounded_rect or gears.shape.rounded_bar,\n\n\n\n![Usage example](../images/AUTOGEN_awful_notification_shape.svg)\n\n \n  \n    -- A notification popup using the default widget_template.\n    naughty.connect_signal(&#34request::display&#34, function(n)\n        naughty.layout.box {notification = n}\n    end)\n  \n    -- Notifications as widgets for any `wibox`/`awful.wibar`/`awful.popup`\n    some_wibar.widget = naughty.list.notifications {}\n  \n    local shapes = {\n        gears.shape.octogon,\n        gears.shape.rounded_rect,\n        gears.shape.rounded_bar\n    }\n  \n    for idx=1, 3 do\n        naughty.notification {\n            title        = &#34A notification&#34,\n            border_color = &#34#0000ff&#34,\n            border_width = idx*2,\n            shape        = shapes[idx],\n        }\n    end\n require(&#34gears.timer&#34).run_delayed_calls_now()\n\n\n\n![Usage example](../images/AUTOGEN_naughty_shape.svg)\n\n \n    local text = [[An <b>important</b>;   <i>notification</i>;   ]]\n  \n    local shapes = {\n        gears.shape.rounded_rect,\n        gears.shape.hexagon,\n        gears.shape.octogon,\n        function(cr, w, h)\n            return gears.shape.infobubble(cr, w, h, 20, 10, w/2 - 10)\n        end\n    }\n  \n    for _, s in ipairs(shapes) do\n        naughty.notify {\n            title        = &#34Hello world!&#34,\n            text         = text,\n            icon         = beautiful.icon,\n            shape        = s,\n            border_width = 3,\n            border_color = beautiful.bg_highlight,\n            margin       = 15,\n        }\n    end\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(shape)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":513
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" Between 0 to 1."
        }
      },
      "summary":"Widget opacity.",
      "name":"opacity",
      "modifiers":{
        "param":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(opacity)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":518
    },{
      "parameter":"field",
      "params":{
        "1":"margin",
        "map":{
          "margin":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"number|table"
          },
          "margin":{
            "type":"number|table"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"number|table"
          },
          "margin":{
            "type":"number|table"
          }
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_awful_notification_margin.svg)\n\n \n  \n    -- A notification popup using the default widget_template.\n    naughty.connect_signal(&#34request::display&#34, function(n)\n        naughty.layout.box {notification = n}\n    end)\n  \n    -- Notifications as widgets for any `wibox`/`awful.wibar`/`awful.popup`\n    some_wibar.widget = naughty.list.notifications {\n        base_layout = wibox.widget {\n             spacing = beautiful.notification_spacing,\n             layout  = wibox.layout.fixed.horizontal\n        },\n    }\n  \n    for margin = 10, 20, 5 do\n        naughty.notification {\n            title        = &#34A notification&#34,\n            margin       = margin,\n            border_width = 1,\n            border_color = &#34#ff0000&#34,\n        }\n    end\n require(&#34gears.timer&#34).run_delayed_calls_now()\n",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Widget margin.",
      "name":"margin",
      "type":"property",
      "args":"(margin)",
      "kind":"object properties",
      "lineno":554
    },{
      "parameter":"field",
      "params":{
        "1":"function",
        "map":{
          "function":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "function":[]
        },
        "field":{
          "1":[],
          "function":[]
        }
      },
      "description":"\n\n Use the signals rather than this.\n",
      "tags":{
        "see":[]
      },
      "section":"deprecatedproperty",
      "inferred":true,
      "subparams":[],
      "summary":"Function to run on left click.",
      "name":"run",
      "type":"deprecatedproperty",
      "args":"(function)",
      "kind":"deprecated object properties",
      "lineno":562
    },{
      "parameter":"field",
      "params":{
        "1":"function",
        "map":{
          "function":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "function":[]
        },
        "field":{
          "1":[],
          "function":[]
        }
      },
      "description":"\n\n Use the signals rather than this.\n",
      "tags":{
        "see":[]
      },
      "section":"deprecatedproperty",
      "inferred":true,
      "subparams":[],
      "summary":"Function to run when notification is destroyed.",
      "name":"destroy",
      "type":"deprecatedproperty",
      "args":"(function)",
      "kind":"deprecated object properties",
      "lineno":570
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "summary":"Table with any of the above parameters.",
      "name":"preset",
      "modifiers":{
        "param":{
          "1":[],
          "table":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n args will override ones defined\n   in the preset.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(table)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":577
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"function",
        "map":{
          "function":""
        }
      },
      "summary":"Function that will be called with all arguments.",
      "name":"callback",
      "modifiers":{
        "param":{
          "1":[],
          "function":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "function":[]
        }
      },
      "description":"\n   The notification will only be displayed if the function returns true.\n   Note: this function is only relevant to notifications sent via dbus.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(function)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":584
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "summary":"A table containing strings that represents actions to buttons.",
      "name":"actions",
      "modifiers":{
        "param":{
          "1":[],
          "table":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n The table key (a number) is used by DBus to set map the action.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(table)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":592
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Ignore this notification, do not display.",
      "name":"ignore",
      "modifiers":{
        "param":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"\n\n Note that this property has to be set in a `preset` or in a `request::preset`\n handler.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":601
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Tell if the notification is currently suspended (read only).",
      "name":"suspended",
      "modifiers":{
        "param":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"\n\n This is always equal to `naughty.suspended`",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":608
    },{
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"If the notification is expired.",
      "name":"is_expired",
      "type":"property",
      "args":"(boolean)",
      "kind":"object properties",
      "lineno":614
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"auto_reset_timeout",
        "map":{
          "auto_reset_timeout":""
        }
      },
      "summary":"If the timeout needs to be reset when a property changes.",
      "name":"auto_reset_timeout",
      "modifiers":{
        "param":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "auto_reset_timeout":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "auto_reset_timeout":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"\n\n By default it fallsback to `naughty.auto_reset_timeout`, which itself is\n true by default.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([auto_reset_timeout=true])",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":623
    },{
      "parameter":"field",
      "params":{
        "1":"reason",
        "2":"keep_visible",
        "map":{
          "keep_visible":" If it was kept visible.",
          "reason":" Why it was destroyed"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"boolean"
          },
          "keep_visible":{
            "type":"boolean"
          },
          "reason":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"boolean"
          },
          "keep_visible":{
            "type":"boolean"
          },
          "reason":{
            "type":"number"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"Emitted when the notification is destroyed.",
      "name":"destroyed",
      "type":"signal",
      "args":"(reason, keep_visible)",
      "kind":"signals",
      "lineno":629
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "summary":"A list of clients associated with this notification.",
      "name":"clients",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n When used with DBus notifications, this returns all clients sharing the PID\n of the notification sender. Note that this is highly unreliable.\n Applications that use a different process to send the notification or\n applications (and scripts) calling the `notify-send` command wont have any\n client.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(table)",
      "tags":[],
      "lineno":644
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The maximum popup width.",
      "name":"max_width",
      "modifiers":{
        "param":{
          "1":[],
          "number":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"\n\n Some notifications have overlong message, cap them to this width. Note that\n this is ignored by `naughty.list.notifications` because it delegate this\n decision to the layout.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":654
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"The application name specified by the notification.",
      "name":"app_name",
      "modifiers":{
        "param":{
          "1":[],
          "string":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n This can be anything. It is usually less relevant than the `clients`\n property, but can sometime be specified for remote or headless notifications.\n In these case, it helps to triage and detect the notification from the rules.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":663
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "summary":"The widget template used to represent the notification.",
      "name":"widget_template",
      "modifiers":{
        "param":{
          "1":[],
          "table":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n Some notifications, such as chat messages or music applications are better\n off with a specialized notification widget.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(table)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":672
    },{
      "parameter":"field",
      "params":{
        "1":"reason",
        "2":"keep_visible",
        "map":{
          "keep_visible":" If true, keep the notification visible",
          "reason":" One of the reasons from `notification_closed_reason`"
        }
      },
      "modifiers":{
        "see":[[]],
        "emits":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "keep_visible":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "reason":{
            "type":"string"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "keep_visible":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "reason":{
            "type":"string"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "emits":["destroyed"],
        "emitstparam":["destroyed integer reason The reason.","destroyed boolean keep_visible If the notification should be kept."]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Destroy notification by notification object.",
      "name":"destroy",
      "type":"method",
      "args":"(reason[, keep_visible=false])",
      "kind":"object methods ",
      "lineno":682
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"new_timeout",
        "map":{
          "new_timeout":" Time in seconds after which notification disappears."
        }
      },
      "summary":"Set new notification timeout.",
      "name":"reset_timeout",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "new_timeout":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "new_timeout":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(new_timeout)",
      "tags":[],
      "lineno":702
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"new_actions",
        "map":{
          "new_actions":""
        }
      },
      "summary":"Add more actions to the notification.",
      "name":"append_actions",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "new_actions":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "new_actions":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(new_actions)",
      "tags":[],
      "lineno":998
    },{
      "parameter":"field",
      "params":{
        "1":"args",
        "2":"opt",
        "map":{
          "args.ignore_suspend":" If set to true this notification\n   will be shown even if notifications are suspended via `naughty.suspend`.",
          "args.position":" Corner of the workarea displaying the popups.\n   Values: `\"top_right\"`, `\"top_left\"`, `\"bottom_left\"`,\n   `\"bottom_right\"`, `\"top_middle\"`, `\"bottom_middle\"`, `\"middle\"`.",
          "args.bg":" Background color.",
          "args.title":" Title of the notification.",
          "args.actions":" A list of `naughty.action`s.",
          "args.margin":" Widget margin.",
          "args.fg":" Foreground color.",
          "args.callback":" Function that will be called with all arguments.\n   The notification will only be displayed if the function returns true.\n   Note: this function is only relevant to notifications sent via dbus.",
          "args.preset":" Table with any of the above parameters.\n   Note: Any parameters specified directly in args will override ones defined\n   in the preset.",
          "args.run":" Function to run on left click.  The notification\n   object will be passed to it as an argument.\n   You need to call e.g.\n   `notification.die(naughty.notification_closed_reason.dismissedByUser)` from\n   there to dismiss the notification yourself.",
          "args.hover_timeout":" Delay in seconds after which hovered popup disappears.",
          "args.screen":" Target screen for the notification.",
          "args.destroy":" Function to run when notification is destroyed.",
          "args.timeout":" Time in seconds after which popup expires.\n   Set 0 for no timeout.",
          "args.opacity":" Widget opacity.",
          "args.icon":" Path to icon.",
          "args.ontop":" Boolean forcing popups to display on top.",
          "opt":"=`beautiful.notification_border_color` or\n   `beautiful.border_color_active` or `'#535d6c'`] args.border_color Border color.",
          "args.border_width":" Border width.",
          "args.width":" Popup width.",
          "args.shape":" Widget shape.",
          "args.text":" Text of the notification.",
          "args.height":" Popup height.",
          "args":" The argument table containing any of the arguments below.",
          "args.icon_size":" Desired icon size in px.",
          "args.font":" Notification font."
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "optchain":"\"\"",
            "type":"string",
            "opt":"\"\""
          },
          "3":{
            "type":"string",
            "opt":true
          },
          "4":{
            "type":"int",
            "opt":"5"
          },
          "5":{
            "type":"int",
            "opt":true
          },
          "6":{
            "type":"integer|screen",
            "opt":"focused"
          },
          "7":{
            "type":"string",
            "opt":"\"top_right\""
          },
          "8":{
            "type":"bool",
            "opt":"true"
          },
          "9":{
            "type":"int",
            "opt":"`beautiful.notification_height` or auto"
          },
          "10":{
            "type":"int",
            "opt":"`beautiful.notification_width` or auto"
          },
          "11":{
            "type":"string",
            "opt":"`beautiful.notification_font` or `beautiful.font` or `awesome.font`"
          },
          "12":{
            "type":"string",
            "opt":true
          },
          "13":{
            "type":"int",
            "opt":true
          },
          "14":{
            "type":"string",
            "opt":"`beautiful.notification_fg` or `beautiful.fg_focus` or `'#ffffff'`"
          },
          "15":{
            "type":"string",
            "opt":"`beautiful.notification_fg` or `beautiful.bg_focus` or `'#535d6c'`"
          },
          "16":{
            "type":"int",
            "opt":"`beautiful.notification_border_width` or 1"
          },
          "17":{
            "type":"string"
          },
          "18":{
            "type":"gears.shape",
            "opt":"`beautiful.notification_shape`"
          },
          "19":{
            "type":"gears.opacity",
            "opt":"`beautiful.notification_opacity`"
          },
          "20":{
            "type":"gears.margin",
            "opt":"`beautiful.notification_margin`"
          },
          "21":{
            "type":"func",
            "opt":true
          },
          "22":{
            "type":"func",
            "opt":true
          },
          "23":{
            "type":"table",
            "opt":true
          },
          "24":{
            "type":"func",
            "opt":true
          },
          "25":{
            "type":"table",
            "opt":true
          },
          "26":{
            "type":"bool",
            "opt":"false"
          },
          "args.ignore_suspend":{
            "type":"bool",
            "opt":"false"
          },
          "args.position":{
            "type":"string",
            "opt":"\"top_right\""
          },
          "args.bg":{
            "type":"string",
            "opt":"`beautiful.notification_fg` or `beautiful.bg_focus` or `'#535d6c'`"
          },
          "args.title":{
            "type":"string",
            "opt":true
          },
          "args.actions":{
            "type":"table",
            "opt":true
          },
          "args.margin":{
            "type":"gears.margin",
            "opt":"`beautiful.notification_margin`"
          },
          "args.fg":{
            "type":"string",
            "opt":"`beautiful.notification_fg` or `beautiful.fg_focus` or `'#ffffff'`"
          },
          "args.callback":{
            "type":"func",
            "opt":true
          },
          "args.preset":{
            "type":"table",
            "opt":true
          },
          "args.run":{
            "type":"func",
            "opt":true
          },
          "args.hover_timeout":{
            "type":"int",
            "opt":true
          },
          "args.screen":{
            "type":"integer|screen",
            "opt":"focused"
          },
          "args.destroy":{
            "type":"func",
            "opt":true
          },
          "args.timeout":{
            "type":"int",
            "opt":"5"
          },
          "args.opacity":{
            "type":"gears.opacity",
            "opt":"`beautiful.notification_opacity`"
          },
          "args.icon":{
            "type":"string",
            "opt":true
          },
          "args.ontop":{
            "type":"bool",
            "opt":"true"
          },
          "opt":{
            "type":"string"
          },
          "args.border_width":{
            "type":"int",
            "opt":"`beautiful.notification_border_width` or 1"
          },
          "args.width":{
            "type":"int",
            "opt":"`beautiful.notification_width` or auto"
          },
          "args.shape":{
            "type":"gears.shape",
            "opt":"`beautiful.notification_shape`"
          },
          "args.text":{
            "optchain":"\"\"",
            "type":"string",
            "opt":"\"\""
          },
          "args.height":{
            "type":"int",
            "opt":"`beautiful.notification_height` or auto"
          },
          "args":{
            "type":"table"
          },
          "args.icon_size":{
            "type":"int",
            "opt":true
          },
          "args.font":{
            "type":"string",
            "opt":"`beautiful.notification_font` or `beautiful.font` or `awesome.font`"
          }
        },
        "return":[{
            "type":"?table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "optchain":"\"\"",
            "type":"string",
            "opt":"\"\""
          },
          "3":{
            "type":"string",
            "opt":true
          },
          "4":{
            "type":"int",
            "opt":"5"
          },
          "5":{
            "type":"int",
            "opt":true
          },
          "6":{
            "type":"integer|screen",
            "opt":"focused"
          },
          "7":{
            "type":"string",
            "opt":"\"top_right\""
          },
          "8":{
            "type":"bool",
            "opt":"true"
          },
          "9":{
            "type":"int",
            "opt":"`beautiful.notification_height` or auto"
          },
          "10":{
            "type":"int",
            "opt":"`beautiful.notification_width` or auto"
          },
          "11":{
            "type":"string",
            "opt":"`beautiful.notification_font` or `beautiful.font` or `awesome.font`"
          },
          "12":{
            "type":"string",
            "opt":true
          },
          "13":{
            "type":"int",
            "opt":true
          },
          "14":{
            "type":"string",
            "opt":"`beautiful.notification_fg` or `beautiful.fg_focus` or `'#ffffff'`"
          },
          "15":{
            "type":"string",
            "opt":"`beautiful.notification_fg` or `beautiful.bg_focus` or `'#535d6c'`"
          },
          "16":{
            "type":"int",
            "opt":"`beautiful.notification_border_width` or 1"
          },
          "17":{
            "type":"string"
          },
          "18":{
            "type":"gears.shape",
            "opt":"`beautiful.notification_shape`"
          },
          "19":{
            "type":"gears.opacity",
            "opt":"`beautiful.notification_opacity`"
          },
          "20":{
            "type":"gears.margin",
            "opt":"`beautiful.notification_margin`"
          },
          "21":{
            "type":"func",
            "opt":true
          },
          "22":{
            "type":"func",
            "opt":true
          },
          "23":{
            "type":"table",
            "opt":true
          },
          "24":{
            "type":"func",
            "opt":true
          },
          "25":{
            "type":"table",
            "opt":true
          },
          "26":{
            "type":"bool",
            "opt":"false"
          },
          "args.ignore_suspend":{
            "type":"bool",
            "opt":"false"
          },
          "args.position":{
            "type":"string",
            "opt":"\"top_right\""
          },
          "args.bg":{
            "type":"string",
            "opt":"`beautiful.notification_fg` or `beautiful.bg_focus` or `'#535d6c'`"
          },
          "args.title":{
            "type":"string",
            "opt":true
          },
          "args.actions":{
            "type":"table",
            "opt":true
          },
          "args.margin":{
            "type":"gears.margin",
            "opt":"`beautiful.notification_margin`"
          },
          "args.fg":{
            "type":"string",
            "opt":"`beautiful.notification_fg` or `beautiful.fg_focus` or `'#ffffff'`"
          },
          "args.callback":{
            "type":"func",
            "opt":true
          },
          "args.preset":{
            "type":"table",
            "opt":true
          },
          "args.run":{
            "type":"func",
            "opt":true
          },
          "args.hover_timeout":{
            "type":"int",
            "opt":true
          },
          "args.screen":{
            "type":"integer|screen",
            "opt":"focused"
          },
          "args.destroy":{
            "type":"func",
            "opt":true
          },
          "args.timeout":{
            "type":"int",
            "opt":"5"
          },
          "args.opacity":{
            "type":"gears.opacity",
            "opt":"`beautiful.notification_opacity`"
          },
          "args.icon":{
            "type":"string",
            "opt":true
          },
          "args.ontop":{
            "type":"bool",
            "opt":"true"
          },
          "opt":{
            "type":"string"
          },
          "args.border_width":{
            "type":"int",
            "opt":"`beautiful.notification_border_width` or 1"
          },
          "args.width":{
            "type":"int",
            "opt":"`beautiful.notification_width` or auto"
          },
          "args.shape":{
            "type":"gears.shape",
            "opt":"`beautiful.notification_shape`"
          },
          "args.text":{
            "optchain":"\"\"",
            "type":"string",
            "opt":"\"\""
          },
          "args.height":{
            "type":"int",
            "opt":"`beautiful.notification_height` or auto"
          },
          "args":{
            "type":"table"
          },
          "args.icon_size":{
            "type":"int",
            "opt":true
          },
          "args.font":{
            "type":"string",
            "opt":"`beautiful.notification_font` or `beautiful.font` or `awesome.font`"
          }
        },
        "usage":[[]]
      },
      "description":"",
      "tags":[],
      "section":"constructorfct",
      "inferred":true,
      "subparams":{
        "args":["args.shape","args.opacity","args.margin","args.run","args.destroy","args.preset","args.callback","args.actions","args.ignore_suspend"]
      },
      "summary":"Create a notification.",
      "name":"naughty.notification",
      "kind":"constructors",
      "usage":["naughty.notify({ title = \"Achtung!\", message = \"You're idling\", timeout = 0 })\n"],
      "args":"(args[, opt=\"\"])",
      "type":"constructorfct",
      "lineno":1150
    },{
      "parameter":"field",
      "params":{
        "1":"permission",
        "2":"context",
        "map":{
          "permission":" The permission name (just the name, no `request::`).",
          "context":" The reason why this permission is requested."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "permission":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "permission":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Grant a permission for a notification.",
      "name":"grant",
      "type":"method",
      "args":"(permission, context)",
      "kind":"object methods ",
      "lineno":1267
    },{
      "parameter":"field",
      "params":{
        "1":"permission",
        "2":"context",
        "map":{
          "permission":" The permission name (just the name, no `request::`).",
          "context":" The reason why this permission is requested."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "permission":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "permission":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Deny a permission for a notification",
      "name":"deny",
      "type":"method",
      "args":"(permission, context)",
      "kind":"object methods ",
      "lineno":1274
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1301
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1307
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1320
    }],
  "type":"coreclassmod",
  "file":"/home/cji/portless/awesome/build/lib/naughty/notification.lua",
  "package":"",
  "tags":{
    "author":["Emmanuel Lepage Vallee"],
    "copyright":["2008 koniu","2017 Emmanuel Lepage Vallee"]
  },
  "lineno":21
}