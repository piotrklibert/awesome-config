{
  "inferred":true,
  "kind":"core_components",
  "mod_name":"tag",
  "summary":"awesome tag API.",
  "sections":{
    "by_name":[]
  },
  "name":"tag",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"\n\n What is a tag?\n ==============\n\n In AwesomeWM, a `tag` is a group of clients. It can either be used as labels\n or as more classical workspaces depending on how they are configured.\n\n ![Client geometry](../images/tag_props.svg)\n\n  * A **tag** can be attached to **multiple clients**\n  * A **client** can be attached to **multiple tags**\n  * A **tag** can only be in 1 screen *any given time*, but can be moved\n  * All **clients** attached to a tag **must be in the same screen as the tag**\n\n Creating tags\n =============\n\n The default config initializes tags like this:\n\n    awful.tag(\n      { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" },\n      s,\n      awful.layout.layouts[1]\n    )\n\n If you wish to have tags with different properties, then `awful.tag.add` is\n a better choice:\n\n    awful.tag.add(\"First tag\", {\n        icon               = \"/path/to/icon1.png\",\n        layout             = awful.layout.suit.tile,\n        master_fill_policy = \"master_width_factor\",\n        gap_single_client  = true,\n        gap                = 15,\n        screen             = s,\n        selected           = true,\n    })\n\n    awful.tag.add(\"Second tag\", {\n        icon = \"/path/to/icon2.png\",\n        layout = awful.layout.suit.max,\n        screen = s,\n    })\n\n Note: the example above sets \"First tag\" to be selected explicitly,\n because otherwise you will find yourself without any selected tag.\n\n Accessing tags\n ==============\n\n To access the \"current tags\", use\n\n    local tags = awful.screen.focused().selected_tags\n\n See: `awful.screen.focused`\n\n See: `screen.selected_tags`\n\n To ignore the corner case where multiple tags are selected:\n\n    local t = awful.screen.focused().selected_tag\n\n See: `screen.selected_tag`\n\n To get all tags for the focused screen:\n\n    local tags = awful.screen.focused().tags\n\n See: `screen.tags`\n\n To get all tags:\n\n    local tags = root.tags()\n\n To get the current tag of the focused client:\n\n    local t = client.focus and client.focus.first_tag or nil\n\n See: `client.focus`\n See: `client.first_tag`\n\n To get a tag from its name:\n\n    local t = awful.tag.find_by_name(awful.screen.focused(), \"name\")\n\n Common keybindings code\n =======================\n\n Here is a few useful shortcuts not part of the default `rc.lua`. Add these\n functions above `-- {{{ Key bindings`:\n\n Delete the current tag\n\n    local function delete_tag()\n        local t = awful.screen.focused().selected_tag\n        if not t then return end\n        t:delete()\n    end\n\n Create a new tag at the end of the list\n\n    local function add_tag()\n        awful.tag.add(\"NewTag\", {\n            screen = awful.screen.focused(),\n            layout = awful.layout.suit.floating }):view_only()\n    end\n\n Rename the current tag\n\n    local function rename_tag()\n        awful.prompt.run {\n            prompt       = \"New tag name: \",\n            textbox      = awful.screen.focused().mypromptbox.widget,\n            exe_callback = function(new_name)\n                if not new_name or #new_name == 0 then return end\n\n                local t = awful.screen.focused().selected_tag\n                if t then\n                    t.name = new_name\n                end\n            end\n        }\n    end\n\n Move the focused client to a new tag\n\n    local function move_to_new_tag()\n        local c = client.focus\n        if not c then return end\n\n        local t = awful.tag.add(c.class,{screen= c.screen })\n        c:tags({t})\n        t:view_only()\n    end\n\n Copy the current tag at the end of the list\n\n    local function copy_tag()\n        local t = awful.screen.focused().selected_tag\n        if not t then return end\n\n        local clients = t:clients()\n        local t2 = awful.tag.add(t.name, awful.tag.getdata(t))\n        t2:clients(clients)\n        t2:view_only()\n    end\n\n And, in the `globalkeys` table:\n\n    awful.key({ modkey,           }, \"a\", add_tag,\n              {description = \"add a tag\", group = \"tag\"}),\n    awful.key({ modkey, \"Shift\"   }, \"a\", delete_tag,\n              {description = \"delete the current tag\", group = \"tag\"}),\n    awful.key({ modkey, \"Control\"   }, \"a\", move_to_new_tag,\n              {description = \"add a tag with the focused client\", group = \"tag\"}),\n    awful.key({ modkey, \"Mod1\"   }, \"a\", copy_tag,\n              {description = \"create a copy of the current tag\", group = \"tag\"}),\n    awful.key({ modkey, \"Shift\"   }, \"r\", rename_tag,\n              {description = \"rename the current tag\", group = \"tag\"}),\n\n See the\n <a href=\"../documentation/05-awesomerc.md.html#global_keybindings\">\n   global keybindings\n </a> for more information about the keybindings.\n\n Some signal names are starting with a dot. These dots are artefacts from\n the documentation generation, you get the real signal name by\n removing the starting dot.\n\n \n \n ![Usage example](../images/AUTOGEN_uml_nav_tables_tag.svg)\n \n \n",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"context",
        "map":{
          "context":" The reason why it was called."
        }
      },
      "summary":"Emitted when a tag requests to be selected.",
      "name":"request::select",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "request":[[]]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(context)",
      "tags":{
        "request":[" tag select ewmh granted When the client request to be moved to a\n  specific virtual desktop. AwesomeWM interprets virtual desktop as indexed\n  tags."]
      },
      "lineno":264
    },{
      "parameter":"field",
      "params":{
        "1":"context",
        "map":{
          "context":" The context (currently always \"startup\")."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "request":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "classsignal":[[]]
      },
      "description":"\n\n It is emitted on the global `tag` class rather than individual tag objects.\n This default handler is part of `rc.lua`:\n\n \n \n \n  \n      tag.connect_signal(&#34request::default_layouts&#34, function()\n          awful.layout.append_default_layouts({\n              awful.layout.suit.floating,\n              awful.layout.suit.tile,\n              awful.layout.suit.tile.left,\n              awful.layout.suit.tile.bottom,\n              awful.layout.suit.tile.top,\n              awful.layout.suit.fair,\n              awful.layout.suit.fair.horizontal,\n              awful.layout.suit.spiral,\n              awful.layout.suit.spiral.dwindle,\n              awful.layout.suit.max,\n              awful.layout.suit.max.fullscreen,\n              awful.layout.suit.magnifier,\n              awful.layout.suit.corner.nw,\n          })\n      end)\n\n External modules can also use this signal to dynamically add additional\n default layouts.\n\n \n \n \n  \n      tag.connect_signal(&#34request::default_layouts&#34, function()\n          awful.layout.append_default_layouts({\n              custom_module.layout_1,\n              custom_module.layout_2,\n          })\n      end)\n",
      "tags":{
        "see":[],
        "request":["tag default_layouts startup granted When AwesomeWM starts, it queries\n  for default layout using this request."],
        "classsignal":[""]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"This signal is emitted to request the list of default layouts.",
      "name":"request::default_layouts",
      "type":"signal",
      "args":"(context)",
      "kind":"signals",
      "lineno":274
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"context",
        "2":"hints",
        "map":{
          "hints":" A, currently empty, table with hints.",
          "context":" The context (currently always \"awful\")."
        }
      },
      "summary":"This signals is emitted when a tag needs layouts for the first time.",
      "name":"request::layouts",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"table"
          },
          "hints":{
            "type":"table"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"table"
          },
          "hints":{
            "type":"table"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"\n\n If no handler implement it, it will fallback to the content added by\n `request::default_layouts`\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(context, hints)",
      "tags":[],
      "lineno":279
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The tagged client."
        }
      },
      "summary":"Emitted when a client gets tagged with this tag.",
      "name":"tagged",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(c)",
      "tags":[],
      "lineno":284
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The untagged client."
        }
      },
      "summary":"Emitted when a client gets untagged with this tag.",
      "name":"untagged",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(c)",
      "tags":[],
      "lineno":305
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "map":{
          "name":""
        }
      },
      "summary":"Tag name.",
      "name":"name",
      "modifiers":{
        "param":{
          "1":{
            "type":"string"
          },
          "name":{
            "type":"string"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "name":{
            "type":"string"
          }
        }
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_tag_name.svg)\n \n  \n      -- Calling awful.tag.new\n      awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n       \n      screen[1].tags[2]:view_only()\n   \n      -- Change the name to New*tag*name.\n      screen[1].tags[2].name = &#34New*tag*name&#34\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(name)",
      "tags":{
        "propemits":["false false"]
      },
      "lineno":326
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"selected",
        "map":{
          "selected":""
        }
      },
      "summary":"True if the tag is selected to be viewed.",
      "name":"selected",
      "modifiers":{
        "param":{
          "1":{
            "type":"boolean"
          },
          "selected":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "selected":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_tag_selected.svg)\n \n  \n      -- Calling awful.tag.new\n      awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n   \n      -- Change the selection.\n      screen[1].tags[1].selected = not screen[1].tags[1].selected\n      screen[1].tags[2].selected = true\n      screen[1].tags[3].selected = true\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(selected)",
      "tags":{
        "propemits":["false false"]
      },
      "lineno":334
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"activated",
        "map":{
          "activated":""
        }
      },
      "summary":"True if the tag is active and can be used.",
      "name":"activated",
      "modifiers":{
        "param":{
          "1":{
            "type":"boolean"
          },
          "activated":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "activated":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(activated)",
      "tags":{
        "propemits":["false false"]
      },
      "lineno":340
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the number of instances.",
      "name":"instances",
      "modifiers":{
        "field":[],
        "return":[[]]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":345
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"clients_table",
        "map":{
          "clients_table":" None or a table of clients to set as being tagged with\n  this tag."
        }
      },
      "summary":"Get or set the clients attached to this tag.",
      "name":"clients",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "clients_table":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "clients_table":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"([clients_table=nil])",
      "tags":[],
      "lineno":512
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback that should be disconnected."
        }
      },
      "summary":"Disconnect from a signal.",
      "name":"disconnect_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, func)",
      "tags":[],
      "lineno":696
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, ...)",
      "tags":[],
      "lineno":702
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, func)",
      "tags":[],
      "lineno":704
    },{
      "inferred":false,
      "subparams":{
        "awful":["awful.tag.history.limit"]
      },
      "parameter":"field",
      "params":{
        "1":"limit",
        "map":{
          "awful.tag.history.limit":"",
          "limit":""
        }
      },
      "summary":"The number of elements kept in the history.",
      "name":"awful.tag.history.limit",
      "modifiers":{
        "return":[],
        "param":[{
            "type":"integer",
            "opt":"20"
          }],
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer",
            "opt":"20"
          },
          "awful.tag.history.limit":{
            "type":"integer"
          },
          "limit":{
            "type":"integer",
            "opt":"20"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(limit)",
      "tags":[],
      "lineno":144
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":""
        }
      },
      "summary":"The tag index.",
      "name":"index",
      "modifiers":{
        "param":{
          "1":{
            "type":"integer"
          },
          "index":{
            "type":"integer"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "index":{
            "type":"integer"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_index.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n  \n     -- Send the first tag to index 3.\n     screen[1].tags[1].index = 3\n  \n     -- Send the first tag to index 3.\n     screen[1].tags[4].index = 1\n\n The index is the position as shown in the `awful.widget.taglist`.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(index)",
      "tags":{
        "propemits":["false false"]
      },
      "lineno":166
    },{
      "parameter":"field",
      "params":{
        "1":"new_index",
        "2":"target_tag",
        "map":{
          "new_index":" Integer absolute position in the table to insert.",
          "target_tag":" The tag that should be moved. If null, the currently\n selected tag is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "new_index":[],
          "target_tag":[]
        },
        "field":{
          "1":[],
          "2":[],
          "new_index":[],
          "target_tag":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Move a tag to an absolute position in the screen[]:tags() table.",
      "name":"awful.tag.move",
      "type":"deprecated",
      "args":"(new_index, target_tag)",
      "kind":"deprecated functions",
      "lineno":224
    },{
      "parameter":"field",
      "params":{
        "1":"tag2",
        "map":{
          "tag2":" The second tag"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "tag2":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "tag2":{
            "type":"tag"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_swap.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n      \n     screen[1].tags[2]:view_only()\n  \n     -- Swap tag 2 with tag 4.\n     screen[1].tags[2]:swap(screen[1].tags[4])\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Swap 2 tags.",
      "name":"swap",
      "type":"method",
      "args":"(tag2)",
      "kind":"object methods ",
      "lineno":249
    },{
      "parameter":"field",
      "params":{
        "1":"tag1",
        "2":"tag2",
        "map":{
          "tag1":" The first tag",
          "tag2":" The second tag"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "tag1":[],
          "tag2":[]
        },
        "field":{
          "1":[],
          "2":[],
          "tag1":[],
          "tag2":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Swap 2 tags",
      "name":"awful.tag.swap",
      "type":"deprecated",
      "args":"(tag1, tag2)",
      "kind":"deprecated functions",
      "lineno":271
    },{
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"props",
        "map":{
          "name":" The tag name, a string",
          "props":" The tags initial properties, a table"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          },
          "name":{
            "type":"string"
          },
          "props":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          },
          "name":{
            "type":"string"
          },
          "props":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          }
        }
      },
      "description":"\n\n This function allow to create tags from a set of properties:\n\n    local t = awful.tag.add(\"my new tag\", {\n        screen = screen.primary,\n        layout = awful.layout.suit.max,\n    })\n",
      "tags":{
        "see":[]
      },
      "section":"constructorfct",
      "inferred":true,
      "subparams":[],
      "summary":"Add a tag.",
      "name":"awful.tag.add",
      "type":"constructorfct",
      "args":"(name[, props=nil])",
      "kind":"constructors",
      "lineno":291
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"names",
        "2":"screen",
        "3":"layout",
        "map":{
          "layout":" The layout or layout table to set for this tags by default.",
          "names":" The tag name, in a table",
          "screen":" The tag screen (defaults to screen 1)."
        }
      },
      "summary":"Create a set of tags and attach it to a screen.",
      "name":"awful.tag.new",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"screen|number",
            "opt":"1"
          },
          "3":{
            "type":"table"
          },
          "layout":{
            "type":"table"
          },
          "names":{
            "type":"table"
          },
          "screen":{
            "type":"screen|number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"screen|number",
            "opt":"1"
          },
          "3":{
            "type":"table"
          },
          "layout":{
            "type":"table"
          },
          "names":{
            "type":"table"
          },
          "screen":{
            "type":"screen|number",
            "opt":"1"
          }
        }
      },
      "description":"\n\n This is what's performed by the default config:\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_default_config.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#341&#34, &#342&#34, &#343&#34, &#344&#34, &#345&#34, &#346&#34, &#347&#34, &#348&#34, &#349&#34 }, screen[1], awful.layout.layouts[1])\n\n It is also possible to set multiple layouts:\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_new_with_layouts.svg)\n\n \n     local some_layouts = {\n         awful.layout.suit.fair,\n         awful.layout.suit.spiral,\n         awful.layout.suit.spiral.dwindle,\n         awful.layout.suit.magnifier,\n         awful.layout.suit.corner.nw,\n     }\n      \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34, &#34five&#34 }, screen[1], some_layouts)\n  \n     -- Add some clients\n     for _, t in ipairs(screen[1].tags) do\n         for _ = 1, 5 do\n             awful.spawn(&#34xterm&#34, {tag = t})\n         end\n     end\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(names[, screen=1], layout)",
      "tags":[],
      "lineno":364
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "2":"invalids",
        "map":{
          "invalids":" A table of tags considered unacceptable. [selectedlist(scr)]",
          "screen":" The screen to look for a tag on. [awful.screen.focused()]"
        }
      },
      "summary":"Find a suitable fallback tag.",
      "name":"awful.tag.find_fallback",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"screen"
          },
          "2":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          },
          "invalids":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          },
          "screen":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "type":"screen"
          },
          "2":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          },
          "invalids":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          },
          "screen":{
            "type":"screen"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(screen[, invalids=nil])",
      "tags":[],
      "lineno":389
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"Emitted when all clients are removed from the tag.",
      "name":"cleared",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":402
    },{
      "inferred":true,
      "subparams":{
        "args":["args.fallback_tag","args.allow_untagged"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.fallback_tag":" A fallback tag.",
          "args":" The arguments.",
          "args.allow_untagged":" Allow the untagged clients to remain untagged."
        }
      },
      "summary":"Remove all tagged clients.",
      "name":"clear",
      "modifiers":{
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"tag"
          },
          "3":{
            "type":"boolean",
            "opt":"false"
          },
          "args.fallback_tag":{
            "type":"tag"
          },
          "args":{
            "type":"table"
          },
          "args.allow_untagged":{
            "type":"boolean",
            "opt":"false"
          }
        },
        "emits":[[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"tag"
          },
          "3":{
            "type":"boolean",
            "opt":"false"
          },
          "args.fallback_tag":{
            "type":"tag"
          },
          "args":{
            "type":"table"
          },
          "args.allow_untagged":{
            "type":"boolean",
            "opt":"false"
          }
        },
        "emitstparam":[[]]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_clear.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34 }, screen[1], some_layouts)\n  \n     -- Call :clear() on the first tag.\n     screen[1].tags[1]:clear{}\n end)\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "emitstparam":["untagged client c The untagged client."],
        "emits":["cleared After all clients have been untagged.","untagged For each currently tagged clients."]
      },
      "lineno":423
    },{
      "parameter":"field",
      "params":{
        "1":"fallback_tag",
        "2":"force",
        "map":{
          "force":" Move even non-sticky clients to the fallback\n tag.",
          "fallback_tag":" Tag to assign\n  stickied tags to."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[[]],
        "param":{
          "1":{
            "optchain":"awful.tag.find_fallback()",
            "type":"tag",
            "opt":"awful.tag.find_fallback()"
          },
          "2":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "force":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "fallback_tag":{
            "optchain":"awful.tag.find_fallback()",
            "type":"tag",
            "opt":"awful.tag.find_fallback()"
          }
        },
        "field":{
          "1":{
            "optchain":"awful.tag.find_fallback()",
            "type":"tag",
            "opt":"awful.tag.find_fallback()"
          },
          "2":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "force":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "fallback_tag":{
            "optchain":"awful.tag.find_fallback()",
            "type":"tag",
            "opt":"awful.tag.find_fallback()"
          }
        }
      },
      "description":"\n\n To delete the current tag:\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_delete.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n      \n     screen[1].tags[2]:view_only()\n  \n     -- Delete the selected tag.\n     mouse.screen.selected_tag:delete()\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Delete a tag.",
      "name":"delete",
      "type":"method",
      "args":"([fallback_tag=awful.tag.find_fallback()[, force=false]])",
      "kind":"object methods ",
      "lineno":476
    },{
      "parameter":"field",
      "params":{
        "1":"target_tag",
        "2":"fallback_tag",
        "map":{
          "fallback_tag":" Tag to assign stickied tags to. [~selected()]",
          "target_tag":" Optional tag object to delete. [selected()]"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "param":{
          "1":[],
          "2":[],
          "fallback_tag":[],
          "target_tag":[]
        },
        "field":{
          "1":[],
          "2":[],
          "fallback_tag":[],
          "target_tag":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Delete a tag.",
      "name":"awful.tag.delete",
      "type":"deprecated",
      "args":"(target_tag, fallback_tag)",
      "kind":"deprecated functions",
      "lineno":546
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"obj",
        "map":{
          "obj":" Screen object."
        }
      },
      "summary":"Update the tag history.",
      "name":"awful.tag.history.update",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"screen"
          },
          "obj":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "type":"screen"
          },
          "obj":{
            "type":"screen"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(obj)",
      "tags":[],
      "lineno":555
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "2":"idx",
        "map":{
          "idx":" Index in history. Defaults to \"previous\" which is a special index\n toggling between last two selected sets of tags. Number (eg 1) will go back\n to the given index in history.",
          "screen":" The screen."
        }
      },
      "summary":"Revert tag history.",
      "name":"awful.tag.history.restore",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"screen"
          },
          "2":{
            "type":"number"
          },
          "idx":{
            "type":"number"
          },
          "screen":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "type":"screen"
          },
          "2":{
            "type":"number"
          },
          "idx":{
            "type":"number"
          },
          "screen":{
            "type":"screen"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(screen, idx)",
      "tags":[],
      "lineno":599
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "map":{
          "s":" Screen"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "param":{
          "1":{
            "type":"screen"
          },
          "s":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "type":"screen"
          },
          "s":{
            "type":"screen"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get a list of all tags on a screen",
      "name":"awful.tag.gettags",
      "type":"deprecated",
      "args":"(s)",
      "kind":"deprecated functions",
      "lineno":634
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "2":"name",
        "map":{
          "s":" The screen of the tag",
          "name":" The name of the tag"
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "type":"screen"
          },
          "2":{
            "type":"string"
          },
          "s":{
            "type":"screen"
          },
          "name":{
            "type":"string"
          }
        },
        "return":[[]],
        "param":{
          "1":{
            "type":"screen"
          },
          "2":{
            "type":"string"
          },
          "s":{
            "type":"screen"
          },
          "name":{
            "type":"string"
          }
        },
        "usage":[[]]
      },
      "description":"",
      "tags":[],
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Find a tag by name.",
      "name":"awful.tag.find_by_name",
      "kind":"static module functions",
      "usage":["-- For the current screen\nlocal t = awful.tag.find_by_name(awful.screen.focused(), \"name\")\n\n-- For a screen index\nlocal t = awful.tag.find_by_name(screen[1], \"name\")\n\n-- For all screens\nlocal t = awful.tag.find_by_name(nil, \"name\")\n"],
      "args":"(s, name)",
      "type":"staticfct",
      "lineno":655
    },{
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"screen"
          },
          "screen":{
            "type":"screen"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"screen"
          },
          "screen":{
            "type":"screen"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The tag screen.",
      "name":"screen",
      "type":"property",
      "args":"(screen)",
      "kind":"object properties",
      "lineno":672
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "2":"t",
        "map":{
          "s":" Screen",
          "t":" tag object"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "s":[],
          "t":[]
        },
        "field":{
          "1":[],
          "2":[],
          "s":[],
          "t":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Set a tag's screen",
      "name":"awful.tag.setscreen",
      "type":"deprecated",
      "args":"(s, t)",
      "kind":"deprecated functions",
      "lineno":713
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" tag object"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "param":{
          "1":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get a tag's screen",
      "name":"awful.tag.getscreen",
      "type":"deprecated",
      "args":"([t])",
      "kind":"deprecated functions",
      "lineno":730
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "map":{
          "s":" Screen."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "param":{
          "1":[],
          "s":[]
        },
        "field":{
          "1":[],
          "s":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Return a table with all visible tags",
      "name":"awful.tag.selectedlist",
      "type":"deprecated",
      "args":"(s)",
      "kind":"deprecated functions",
      "lineno":745
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "map":{
          "s":" Screen."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "s":[]
        },
        "field":{
          "1":[],
          "s":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Return only the first visible tag.",
      "name":"awful.tag.selected",
      "type":"deprecated",
      "args":"(s)",
      "kind":"deprecated functions",
      "lineno":757
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" (default: 0.5)"
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default master width factor",
      "name":"beautiful.master_width_factor",
      "type":"beautiful",
      "args":"(number)",
      "kind":"theme variables",
      "lineno":772
    },{
      "parameter":"field",
      "params":{
        "1":"master_width_factor",
        "map":{
          "master_width_factor":" Between 0 and 1"
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "field":{
          "1":{
            "type":"number"
          },
          "master_width_factor":{
            "type":"number"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "master_width_factor":{
            "type":"number"
          }
        },
        "emits":[[],[]]
      },
      "description":"\n\n The master width factor is one of the 5 main properties used to configure\n the `layout`. Each layout interpret (or ignore) this property differently.\n\n See the layout suit documentation for information about how the master width\n factor is used.\n\n \n\n![Usage example](../images/AUTOGEN_screen_mwfact.svg)\n\n\n When multiple columns are used, the master width remains the same, but\n the other columns split the remaining space among them:\n\n \n\n![Usage example](../images/AUTOGEN_screen_mwfact2.svg)\n\n",
      "tags":{
        "see":[],
        "emits":["property::mwfact When the value changes (deprecated).","property::master_width_factor When the value changes."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The tag master width factor.",
      "name":"master_width_factor",
      "type":"property",
      "args":"(master_width_factor)",
      "kind":"object properties",
      "lineno":803
    },{
      "parameter":"field",
      "params":{
        "1":"mwfact",
        "2":"t",
        "map":{
          "t":" The tag to modify, if null tag.selected() is used.",
          "mwfact":" Master width factor."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "t":[],
          "mwfact":[]
        },
        "field":{
          "1":[],
          "2":[],
          "t":[],
          "mwfact":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Set master width factor.",
      "name":"awful.tag.setmwfact",
      "type":"deprecated",
      "args":"(mwfact, t)",
      "kind":"deprecated functions",
      "lineno":822
    },{
      "parameter":"field",
      "params":{
        "1":"add",
        "2":"t",
        "map":{
          "add":" Value to add to master width factor.",
          "t":" The tag to modify, if null tag.selected() is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"tag"
          },
          "add":{
            "type":"number"
          },
          "t":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"tag"
          },
          "add":{
            "type":"number"
          },
          "t":{
            "type":"tag"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Increase master width factor.",
      "name":"awful.tag.incmwfact",
      "type":"staticfct",
      "args":"(add, t)",
      "kind":"static module functions",
      "lineno":833
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get master width factor.",
      "name":"awful.tag.getmwfact",
      "type":"deprecated",
      "args":"([t])",
      "kind":"deprecated functions",
      "lineno":843
    },{
      "inferred":false,
      "subparams":{
        "awful":["awful.tag.layouts"]
      },
      "parameter":"field",
      "params":{
        "map":{
          "awful.tag.layouts":""
        }
      },
      "summary":"An ordered list of layouts.",
      "name":"awful.tag.layouts",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"table"
          },
          "awful.tag.layouts":{
            "type":"table"
          }
        }
      },
      "description":"\n `awful.tag.layout` Is usually defined in `rc.lua`. It store the list of\n layouts used when selecting the previous and next layouts. This is the\n default:\n\n     -- Table of layouts to cover with awful.layout.inc, order matters.\n     awful.layout.layouts = {\n         awful.layout.suit.floating,\n         awful.layout.suit.tile,\n         awful.layout.suit.tile.left,\n         awful.layout.suit.tile.bottom,\n         awful.layout.suit.tile.top,\n         awful.layout.suit.fair,\n         awful.layout.suit.fair.horizontal,\n         awful.layout.suit.spiral,\n         awful.layout.suit.spiral.dwindle,\n         awful.layout.suit.max,\n         awful.layout.suit.max.fullscreen,\n         awful.layout.suit.magnifier,\n         awful.layout.suit.corner.nw,\n         -- awful.layout.suit.corner.ne,\n         -- awful.layout.suit.corner.sw,\n         -- awful.layout.suit.corner.se,\n     }\n",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"()",
      "tags":[],
      "lineno":876
    },{
      "parameter":"field",
      "params":{
        "1":"layout",
        "map":{
          "layout":" A layout table or a constructor function"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"layout|function"
          },
          "layout":{
            "type":"layout|function"
          }
        },
        "return":[[]],
        "param":{
          "1":{
            "type":"layout|function"
          },
          "layout":{
            "type":"layout|function"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n This property holds the layout. A layout can be either stateless or stateful.\n Stateless layouts are used by default by Awesome. They tile clients without\n any other overhead. They take an ordered list of clients and place them on\n the screen. Stateful layouts create an object instance for each tags and\n can store variables and metadata. Because of this, they are able to change\n over time and be serialized (saved).\n\n Both types of layouts have valid usage scenarios.\n\n **Stateless layouts:**\n\n These layouts are stored in `awful.layout.suit`. They expose a table with 2\n fields:\n\n * **name** (*string*): The layout name. This should be unique.\n * **arrange** (*function*): The function called when the clients need to be\n     placed. The only parameter is a table or arguments returned by\n     `awful.layout.parameters`\n\n **Stateful layouts:**\n\n The stateful layouts API is the same as stateless, but they are a function\n returining a layout instead of a layout itself. They also should have an\n `is_dynamic = true` property. If they don't, `awful.tag` will create a new\n instance every time the layout is set. If they do, the instance will be\n cached and re-used.\n\n\n The client organized by the layout will fill the screen `tiling_area`\n section:\n\n \n\n![Usage example](../images/AUTOGEN_screen_taglayout.svg)\n\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The tag client layout.",
      "name":"layout",
      "type":"property",
      "args":"(layout)",
      "kind":"object properties",
      "lineno":920
    },{
      "parameter":"field",
      "params":{
        "1":"layouts",
        "map":{
          "layouts":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"table"
          },
          "layouts":{
            "type":"table"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "layouts":{
            "type":"table"
          }
        },
        "request":[[]]
      },
      "description":"\n\n This property allows to define a subset (or superset) of layouts available\n in the \"rotation table\". In the default configuration file, `Mod4+Space`\n and `Mod4+Shift+Space` are used to switch between tags. The\n `awful.widget.layoutlist` also uses this as its default layout filter.\n\n By default, it will be the same as `awful.layout.layouts` unless there the\n a layout not present is used. If that's the case they will be added at the\n front of the list.\n",
      "tags":{
        "see":[],
        "request":["tag layouts awful granted When the `layouts` property is first called\n  and there is no layouts, then that signal is called."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The (proposed) list of available layouts for this tag.",
      "name":"layouts",
      "type":"property",
      "args":"(layouts)",
      "kind":"object properties",
      "lineno":938
    },{
      "parameter":"field",
      "params":{
        "1":"layout",
        "2":"t",
        "map":{
          "t":" The tag to modify",
          "layout":" a layout table or a constructor function"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "param":{
          "1":[],
          "2":[],
          "t":[],
          "layout":[]
        },
        "field":{
          "1":[],
          "2":[],
          "t":[],
          "layout":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Set layout.",
      "name":"awful.tag.setlayout",
      "type":"deprecated",
      "args":"(layout, t)",
      "kind":"deprecated functions",
      "lineno":1088
    },{
      "parameter":"field",
      "params":{
        "1":"volatile",
        "map":{
          "volatile":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "volatile":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "volatile":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n This is useful to create \"throw-away\" tags for operation like 50/50\n (Windows \"Aero Snap) side-by-side views. This keybinding code for this is:\n\n    local function aero_tag()\n        local c = client.focus\n\n        if not c then return end\n\n        local c2 = awful.client.focus.history.list[2]\n\n        if (not c2) or c2 == c then return end\n\n        local t = awful.tag.add(\"Aero\", {\n            screen              = c.screen,\n            volatile            = true,\n            layout              = awful.layout.suit.tile,\n            master_width_factor = 0.5\n        })\n\n        t:clients({c, c2})\n\n        t:view_only()\n    end\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_volatile.svg)\n\n \n     -- Create a non-volatile and a volatile tag.\n     awful.tag.add(&#34Non-Volatile&#34, {\n         screen   = screen[1],\n         layout   = awful.layout.suit.corner.nw,\n         volatile = false,\n     })\n  \n     awful.tag.add(&#34Volatile&#34, {\n         screen   = screen[1],\n         layout   = awful.layout.suit.corner.nw,\n         volatile = true,\n     })\n  \n     -- Add some clients.\n     for _, t in ipairs(screen[1].tags) do\n         for _ = 1, 5 do\n             awful.spawn(&#34xterm&#34, {tag = t})\n         end\n     end\n  \n     -- Kill all clients.\n     while #client.get() ~= 0 do\n         client.get()[1]:kill()\n     end\n\n As you can see, the \"Volatile\" tag has been automatically discarded while\n the \"Non-volatile\" tag is still there (but with zero clients).\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Define if the tag must be deleted when the last client is untagged.",
      "name":"volatile",
      "type":"property",
      "args":"(volatile)",
      "kind":"object properties",
      "lineno":1158
    },{
      "parameter":"field",
      "params":{
        "1":"volatile",
        "2":"t",
        "map":{
          "volatile":" If the tag must be deleted when the last client is untagged",
          "t":" The tag to modify, if null tag.selected() is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"boolean"
          },
          "2":[],
          "volatile":{
            "type":"boolean"
          },
          "t":[]
        },
        "field":{
          "1":{
            "type":"boolean"
          },
          "2":[],
          "volatile":{
            "type":"boolean"
          },
          "t":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Set if the tag must be deleted when the last client is untagged",
      "name":"awful.tag.setvolatile",
      "type":"deprecated",
      "args":"(volatile, t)",
      "kind":"deprecated functions",
      "lineno":1165
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag to modify, if null tag.selected() is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":[],
          "t":[]
        },
        "field":{
          "1":[],
          "t":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get if the tag must be deleted when the last client closes",
      "name":"awful.tag.getvolatile",
      "type":"deprecated",
      "args":"(t)",
      "kind":"deprecated functions",
      "lineno":1176
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" (default: 0)"
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default gap.",
      "name":"beautiful.useless_gap",
      "type":"beautiful",
      "args":"(number)",
      "kind":"theme variables",
      "lineno":1189
    },{
      "parameter":"field",
      "params":{
        "1":"gap",
        "map":{
          "gap":" The value has to be greater than zero."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"number"
          },
          "gap":{
            "type":"number"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "gap":{
            "type":"number"
          }
        },
        "emits":[[]]
      },
      "description":"\n\n This property allows to waste space on the screen in the name of style,\n unicorns and readability.\n\n In this example, the value of `gap` is set to 20:\n\n \n\n![Usage example](../images/AUTOGEN_screen_gaps.svg)\n\n\n Compared to setting to the (very high) value of 50:\n\n \n\n![Usage example](../images/AUTOGEN_screen_gaps2.svg)\n\n",
      "tags":{
        "see":[],
        "emits":["property::useless_gap When the gap changes."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The gap (spacing, also called `useless_gap`) between clients.",
      "name":"gap",
      "type":"property",
      "args":"(gap)",
      "kind":"object properties",
      "lineno":1214
    },{
      "parameter":"field",
      "params":{
        "1":"useless_gap",
        "2":"t",
        "map":{
          "t":" The tag to modify, if null tag.selected() is used.",
          "useless_gap":" The spacing between clients"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "t":[],
          "useless_gap":[]
        },
        "field":{
          "1":[],
          "2":[],
          "t":[],
          "useless_gap":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Set the spacing between clients",
      "name":"awful.tag.setgap",
      "type":"deprecated",
      "args":"(useless_gap, t)",
      "kind":"deprecated functions",
      "lineno":1231
    },{
      "parameter":"field",
      "params":{
        "1":"add",
        "2":"t",
        "map":{
          "add":" Value to add to the spacing between clients",
          "t":" The tag to modify, if null tag.selected() is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"tag"
          },
          "add":{
            "type":"number"
          },
          "t":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"tag"
          },
          "add":{
            "type":"number"
          },
          "t":{
            "type":"tag"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Increase the spacing between clients",
      "name":"awful.tag.incgap",
      "type":"staticfct",
      "args":"(add, t)",
      "kind":"static module functions",
      "lineno":1242
    },{
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":" (default: true)"
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"Enable gaps for a single client.",
      "name":"beautiful.gap_single_client",
      "type":"beautiful",
      "args":"(boolean)",
      "kind":"theme variables",
      "lineno":1254
    },{
      "parameter":"field",
      "params":{
        "1":"gap_single_client",
        "map":{
          "gap_single_client":" Enable gaps for a single client"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "gap_single_client":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "gap_single_client":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n If the gaps are used purely for readability when multiple\n clients are tiled, then it may make sense to disable it\n when there is only a single client (to recover that space).\n In that case, set `gap_single_client` to `false`.\n\n Default (with a 20px gap):\n\n \n\n![Usage example](../images/AUTOGEN_screen_gap_single_client_true.svg)\n\n\n when set to false:\n\n \n\n![Usage example](../images/AUTOGEN_screen_gap_single_client_false.svg)\n\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Enable gaps for a single client.",
      "name":"gap_single_client",
      "type":"property",
      "args":"(gap_single_client)",
      "kind":"object properties",
      "lineno":1280
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "2":"numclients",
        "map":{
          "numclients":" Number of (tiled) clients.  Passing this will\n   return 0 for a single client.  You can override this function to change\n   this behavior.",
          "t":" The tag."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          },
          "2":{
            "optchain":true,
            "type":"int",
            "opt":true
          },
          "numclients":{
            "optchain":true,
            "type":"int",
            "opt":true
          },
          "t":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          }
        },
        "field":{
          "1":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          },
          "2":{
            "optchain":true,
            "type":"int",
            "opt":true
          },
          "numclients":{
            "optchain":true,
            "type":"int",
            "opt":true
          },
          "t":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get the spacing between clients.",
      "name":"awful.tag.getgap",
      "type":"deprecated",
      "args":"([t=tag.selected()[, numclients]])",
      "kind":"deprecated functions",
      "lineno":1303
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":" (default: \"expand\")"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n ** Possible values**:\n\n * *expand*: Take all the space\n * *master_width_factor*: Only take the ratio defined by the\n   `master_width_factor`\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default fill policy.",
      "name":"beautiful.master_fill_policy",
      "type":"beautiful",
      "args":"(string)",
      "kind":"theme variables",
      "lineno":1325
    },{
      "parameter":"field",
      "params":{
        "1":"master_fill_policy",
        "map":{
          "master_fill_policy":" \"expand\" or \"master_width_factor\""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "master_fill_policy":{
            "type":"string"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "master_fill_policy":{
            "type":"string"
          }
        }
      },
      "description":"\n\n Some multi-column layouts can be configured so that the space is\n redistributed when there is not enough clients to fill all columns.\n\n ** Possible values**:\n\n * *expand*: Take all the space\n * *master\\_width\\_factor*: Only take the ratio defined by the\n   `master_width_factor`\n\n This is the default behavior of the `tile.left` layout (*expand*):\n\n \n\n![Usage example](../images/AUTOGEN_screen_mfpol2.svg)\n\n\n This is what happends when set to `master_width_factor`:\n\n \n\n![Usage example](../images/AUTOGEN_screen_mfpol.svg)\n\n\n The remaining space that would have been used for the second column is\n redistributed on both side.\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set size fill policy for the master client(s).",
      "name":"master_fill_policy",
      "type":"property",
      "args":"(master_fill_policy)",
      "kind":"object properties",
      "lineno":1358
    },{
      "parameter":"field",
      "params":{
        "1":"policy",
        "2":"t",
        "map":{
          "policy":" Can be set to\n \"expand\" (fill all the available workarea) or\n \"master_width_factor\" (fill only an area inside the master width factor)",
          "t":" The tag to modify"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          },
          "policy":{
            "type":"string"
          },
          "t":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          },
          "policy":{
            "type":"string"
          },
          "t":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Set size fill policy for the master client(s)",
      "name":"awful.tag.setmfpol",
      "type":"deprecated",
      "args":"(policy[, t=tag.selected()])",
      "kind":"deprecated functions",
      "lineno":1371
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag to modify, if null tag.selected() is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Toggle size fill policy for the master client(s)\n between \"expand\" and \"master_width_factor\".",
      "name":"awful.tag.togglemfpol",
      "type":"staticfct",
      "args":"(t)",
      "kind":"static module functions",
      "lineno":1383
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"string"
          }],
        "param":{
          "1":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          },
          "t":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          }
        },
        "field":{
          "1":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          },
          "t":{
            "optchain":"tag.selected()",
            "type":"tag",
            "opt":"tag.selected()"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get size fill policy for the master client(s)",
      "name":"awful.tag.getmfpol",
      "type":"deprecated",
      "args":"([t=tag.selected()])",
      "kind":"deprecated functions",
      "lineno":1400
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":" (default: 1)"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default number of master windows.",
      "name":"beautiful.master_count",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":1415
    },{
      "parameter":"field",
      "params":{
        "1":"master_count",
        "map":{
          "master_count":" nmaster Only positive values are accepted"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "master_count":{
            "type":"integer"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "master_count":{
            "type":"integer"
          }
        },
        "emits":[[],[]]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_master_count.svg)\n\n \n     -- Create a tag with master count of 1 and tag with count of 2\n     awful.tag.add(&#34Master 1&#34, {\n         screen   = screen[1],\n         layout   = awful.layout.suit.tile,\n         master_count = 1,\n     })\n  \n     awful.tag.add(&#34Master 2&#34, {\n         screen   = screen[1],\n         layout   = awful.layout.suit.tile,\n         master_count = 2,\n     })\n  \n     -- Add some clients.\n     for _, t in ipairs(screen[1].tags) do\n         for _ = 1, 5 do\n             awful.spawn(&#34xterm&#34, {tag = t})\n         end\n     end\n",
      "tags":{
        "see":[],
        "emits":["property::nmaster Deprecated.","property::master_count When the value changes."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set the number of master windows.",
      "name":"master_count",
      "type":"property",
      "args":"(master_count)",
      "kind":"object properties",
      "lineno":1448
    },{
      "parameter":"field",
      "params":{
        "1":"nmaster",
        "2":"t",
        "map":{
          "t":" The tag.",
          "nmaster":" The number of master windows."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "2":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          },
          "nmaster":[]
        },
        "field":{
          "1":[],
          "2":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          },
          "nmaster":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"The number of master clients.",
      "name":"awful.tag.setnmaster",
      "type":"deprecated",
      "args":"(nmaster[, t])",
      "kind":"deprecated functions",
      "lineno":1466
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get the number of master windows.",
      "name":"awful.tag.getnmaster",
      "type":"deprecated",
      "args":"([t])",
      "kind":"deprecated functions",
      "lineno":1476
    },{
      "parameter":"field",
      "params":{
        "1":"add",
        "2":"t",
        "3":"sensible",
        "map":{
          "sensible":" Limit nmaster based on the number of\n   visible tiled windows?",
          "add":" Value to add to number of master windows.",
          "t":" The tag to modify, if null tag.selected() is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"tag",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "sensible":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "add":{
            "type":"number"
          },
          "t":{
            "optchain":true,
            "type":"tag",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"tag",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "sensible":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "add":{
            "type":"number"
          },
          "t":{
            "optchain":true,
            "type":"tag",
            "opt":true
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Increase the number of master windows.",
      "name":"awful.tag.incnmaster",
      "type":"staticfct",
      "args":"(add[, t[, sensible=false]])",
      "kind":"static module functions",
      "lineno":1490
    },{
      "parameter":"field",
      "params":{
        "1":"icon",
        "map":{
          "icon":" The icon"
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"path|surface"
          },
          "icon":{
            "type":"path|surface"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"path|surface"
          },
          "icon":{
            "type":"path|surface"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_wibox_awidget_taglist_icon.svg)\n\n \n     awful.tag.add(&#34one&#34, {})\n  \n     awful.tag.add(&#34two&#34, {\n         icon = beautiful.awesome_icon\n     })\n  \n     awful.tag.add(&#34three&#34, {})\n  \n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set the tag icon.",
      "name":"icon",
      "type":"property",
      "args":"(icon)",
      "kind":"object properties",
      "lineno":1534
    },{
      "parameter":"field",
      "params":{
        "1":"icon",
        "2":"tag",
        "map":{
          "icon":" the icon to set, either path or image object",
          "tag":" the tag"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "2":{
            "type":"tag"
          },
          "icon":[],
          "tag":{
            "type":"tag"
          }
        },
        "field":{
          "1":[],
          "2":{
            "type":"tag"
          },
          "icon":[],
          "tag":{
            "type":"tag"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Set the tag icon",
      "name":"awful.tag.seticon",
      "type":"deprecated",
      "args":"(icon, tag)",
      "kind":"deprecated functions",
      "lineno":1541
    },{
      "parameter":"field",
      "params":{
        "1":"tag",
        "map":{
          "tag":" the tag"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "tag":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "tag":{
            "type":"tag"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get the tag icon",
      "name":"awful.tag.geticon",
      "type":"deprecated",
      "args":"(tag)",
      "kind":"deprecated functions",
      "lineno":1552
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":" (default: 1)"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default number of columns.",
      "name":"beautiful.column_count",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":1565
    },{
      "parameter":"field",
      "params":{
        "1":"ncol",
        "map":{
          "ncol":" Has to be greater than 1"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "ncol":{
            "type":"integer"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "ncol":{
            "type":"integer"
          }
        },
        "emits":[[],[]]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_column_count.svg)\n\n \n     -- Create a tag with column count of 1 and tag with count of 2\n     awful.tag.add(&#341 column&#34, {\n         screen   = screen[1],\n         layout   = awful.layout.suit.tile,\n         column_count = 1,\n     })\n  \n     awful.tag.add(&#342 columns&#34, {\n         screen   = screen[1],\n         layout   = awful.layout.suit.tile,\n         column_count = 2,\n     })\n  \n     awful.tag.add(&#343 columns&#34, {\n         screen   = screen[1],\n         layout   = awful.layout.suit.tile,\n         column_count = 3,\n     })\n  \n     -- Add some clients.\n     for _, t in ipairs(screen[1].tags) do\n         for _ = 1, 6 do\n             awful.spawn(&#34xterm&#34, {tag = t})\n         end\n     end\n",
      "tags":{
        "see":[],
        "emits":["property::ncol Deprecated.","property::column_count When the value changes."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set the number of columns.",
      "name":"column_count",
      "type":"property",
      "args":"(ncol)",
      "kind":"object properties",
      "lineno":1604
    },{
      "parameter":"field",
      "params":{
        "1":"ncol",
        "2":"t",
        "map":{
          "t":" The tag to modify, if null tag.selected() is used.",
          "ncol":" The number of column."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "t":[],
          "ncol":[]
        },
        "field":{
          "1":[],
          "2":[],
          "t":[],
          "ncol":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Set number of column windows.",
      "name":"awful.tag.setncol",
      "type":"deprecated",
      "args":"(ncol, t)",
      "kind":"deprecated functions",
      "lineno":1622
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "opt":true
          },
          "t":{
            "optchain":true,
            "opt":true
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get number of column windows.",
      "name":"awful.tag.getncol",
      "type":"deprecated",
      "args":"([t])",
      "kind":"deprecated functions",
      "lineno":1636
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"add",
        "2":"t",
        "3":"sensible",
        "map":{
          "sensible":" Limit column_count based on the number\n   of visible tiled windows?",
          "add":" Value to add to number of column windows.",
          "t":" The tag to modify, if null tag.selected() is used."
        }
      },
      "summary":"Increase number of column windows.",
      "name":"awful.tag.incncol",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"tag",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "sensible":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "add":{
            "type":"number"
          },
          "t":{
            "optchain":true,
            "type":"tag",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"tag",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "sensible":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "add":{
            "type":"number"
          },
          "t":{
            "optchain":true,
            "type":"tag",
            "opt":true
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(add[, t[, sensible=false]])",
      "tags":[],
      "lineno":1649
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":" The screen."
        }
      },
      "summary":"View no tag.",
      "name":"awful.tag.viewnone",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "type":"int|screen",
            "opt":true
          },
          "screen":{
            "optchain":true,
            "type":"int|screen",
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"int|screen",
            "opt":true
          },
          "screen":{
            "optchain":true,
            "type":"int|screen",
            "opt":true
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_viewnone.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n      \n     -- Manually select some tags (tag 1 was auto selected).\n     screen[1].tags[3].selected = true\n     screen[1].tags[4].selected = true\n  \n     -- Deselect all tags.\n     awful.tag.viewnone()\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"([screen])",
      "tags":[],
      "lineno":1693
    },{
      "parameter":"field",
      "params":{
        "1":"i",
        "2":"screen",
        "map":{
          "i":" The **relative** index to see.",
          "screen":" The screen."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"screen",
            "opt":true
          },
          "i":{
            "type":"number"
          },
          "screen":{
            "optchain":true,
            "type":"screen",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"screen",
            "opt":true
          },
          "i":{
            "type":"number"
          },
          "screen":{
            "optchain":true,
            "type":"screen",
            "opt":true
          }
        }
      },
      "description":"\n\n Note that this doesn't work well with multiple selection.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_viewidx.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n      \n     screen[1].tags[2]:view_only()\n  \n     -- Select the tag relative to idx 2.\n     awful.tag.viewidx(2)\n  \n     -- Select the tag relative to idx -2.\n     awful.tag.viewidx(-2)\n\n This is equivalent to `screen.tags[i]:view_only()`",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Select a tag relative to the currently selected one.",
      "name":"awful.tag.viewidx",
      "type":"staticfct",
      "args":"(i[, screen])",
      "kind":"static module functions",
      "lineno":1728
    },{
      "parameter":"field",
      "params":{
        "1":"query_tag",
        "map":{
          "query_tag":" The tag object to find. [selected()]"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "param":{
          "1":[],
          "query_tag":[]
        },
        "field":{
          "1":[],
          "query_tag":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get a tag's index in the gettags() table.",
      "name":"awful.tag.getidx",
      "type":"deprecated",
      "args":"(query_tag)",
      "kind":"deprecated functions",
      "lineno":1752
    },{
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":" The screen."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"screen"
          },
          "screen":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "type":"screen"
          },
          "screen":{
            "type":"screen"
          }
        }
      },
      "description":" This is the same as `tag.viewidx(1)`.\n\n Note that this doesn't work well with multiple selection.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_viewnext.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n      \n     screen[1].tags[3]:view_only()\n  \n     -- Select the next tag.\n     awful.tag.viewnext()\n  \n     -- Select the next tag (again).\n     awful.tag.viewnext()\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"View next tag.",
      "name":"awful.tag.viewnext",
      "type":"staticfct",
      "args":"(screen)",
      "kind":"static module functions",
      "lineno":1783
    },{
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":" The screen."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"screen"
          },
          "screen":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "type":"screen"
          },
          "screen":{
            "type":"screen"
          }
        }
      },
      "description":" This is the same a `tag.viewidx(-1)`.\n\n Note that this doesn't work well with multiple selection.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_viewprev.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n      \n     screen[1].tags[2]:view_only()\n  \n     -- Select the previous tag.\n     awful.tag.viewprev()\n  \n     -- Select the previous tag (again).\n     awful.tag.viewprev()\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"View previous tag.",
      "name":"awful.tag.viewprev",
      "type":"staticfct",
      "args":"(screen)",
      "kind":"static module functions",
      "lineno":1811
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_tag_view_only.svg)\n\n \n     -- Calling awful.tag.new\n     awful.tag({ &#34one&#34, &#34two&#34, &#34three&#34, &#34four&#34 }, screen[1])\n      \n     -- Manually select some tags (tag 1 was auto selected).\n     screen[1].tags[3].selected = true\n     screen[1].tags[4].selected = true\n  \n     -- Call :view_only() on the second tag.\n     screen[1].tags[2]:view_only()\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"View only a tag.",
      "name":"view_only",
      "type":"method",
      "args":"()",
      "kind":"object methods ",
      "lineno":1834
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag object."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"View only a tag.",
      "name":"awful.tag.viewonly",
      "type":"deprecated",
      "args":"(t)",
      "kind":"deprecated functions",
      "lineno":1853
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"tags",
        "2":"screen",
        "3":"maximum",
        "map":{
          "maximum":" The maximum number of tags to select.",
          "tags":" A table with tags to view only.",
          "screen":" The screen of the tags."
        }
      },
      "summary":"View only a set of tags.",
      "name":"awful.tag.viewmore",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "optchain":true,
            "type":"screen",
            "opt":true
          },
          "3":{
            "optchain":"#tags",
            "type":"number",
            "opt":"#tags"
          },
          "maximum":{
            "optchain":"#tags",
            "type":"number",
            "opt":"#tags"
          },
          "tags":{
            "type":"table"
          },
          "screen":{
            "optchain":true,
            "type":"screen",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "optchain":true,
            "type":"screen",
            "opt":true
          },
          "3":{
            "optchain":"#tags",
            "type":"number",
            "opt":"#tags"
          },
          "maximum":{
            "optchain":"#tags",
            "type":"number",
            "opt":"#tags"
          },
          "tags":{
            "type":"table"
          },
          "screen":{
            "optchain":true,
            "type":"screen",
            "opt":true
          }
        }
      },
      "description":"\n\n If `maximum` is set, there will be a limit on the number of new tag being\n selected. The tags already selected do not count. To do nothing if one or\n more of the tags are already selected, set `maximum` to zero.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(tags[, screen[, maximum=#tags]])",
      "tags":[],
      "lineno":1869
    },{
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" Tag to be toggled"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Toggle selection of a tag",
      "name":"awful.tag.viewtoggle",
      "type":"staticfct",
      "args":"(t)",
      "kind":"static module functions",
      "lineno":1901
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"_tag",
        "map":{
          "_tag":" The tag."
        }
      },
      "summary":"Get tag data table.",
      "name":"awful.tag.getdata",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"tag"
          },
          "_tag":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "_tag":{
            "type":"tag"
          }
        }
      },
      "description":"\n\n Do not use.\n",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(_tag)",
      "tags":[],
      "lineno":1913
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"_tag",
        "2":"prop",
        "map":{
          "prop":" The property name.",
          "_tag":" The tag."
        }
      },
      "summary":"Get a tag property.",
      "name":"awful.tag.getproperty",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"tag"
          },
          "2":{
            "type":"string"
          },
          "prop":{
            "type":"string"
          },
          "_tag":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "2":{
            "type":"string"
          },
          "prop":{
            "type":"string"
          },
          "_tag":{
            "type":"tag"
          }
        }
      },
      "description":"\n\n Use `_tag.prop` directly.\n",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(_tag, prop)",
      "tags":[],
      "lineno":1925
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"_tag",
        "2":"prop",
        "3":"value",
        "map":{
          "value":" The value.",
          "prop":" The property name.",
          "_tag":" The tag."
        }
      },
      "summary":"Set a tag property.",
      "name":"awful.tag.setproperty",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "3":[],
          "value":[],
          "prop":[],
          "_tag":[]
        },
        "field":{
          "1":[],
          "2":[],
          "3":[],
          "value":[],
          "prop":[],
          "_tag":[]
        }
      },
      "description":"\n This properties are internal to awful. Some are used to draw taglist, or to\n handle layout, etc.\n\n Use `_tag.prop = value`\n",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(_tag, prop, value)",
      "tags":[],
      "lineno":1943
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The client to tag."
        }
      },
      "summary":"Tag a client with the set of current tags.",
      "name":"awful.tag.withcurrent",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "c":[]
        },
        "field":{
          "1":[],
          "c":[]
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c)",
      "tags":[],
      "lineno":1957
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "2":"signal",
        "3":"Callback",
        "map":{
          "screen":" The screen concerned, or all if nil.",
          "Callback":"",
          "signal":" The signal name."
        }
      },
      "summary":"Add a signal to all attached tags and all tags that will be attached in the\n future.",
      "name":"awful.tag.attached_connect_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"screen"
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "3":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "screen":{
            "type":"screen"
          },
          "Callback":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "signal":{
            "optchain":true,
            "type":"string",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"screen"
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "3":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "screen":{
            "type":"screen"
          },
          "Callback":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "signal":{
            "optchain":true,
            "type":"string",
            "opt":true
          }
        }
      },
      "description":" When a tag is detached from the screen, its signal is removed.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(screen[, signal[, Callback]])",
      "tags":[],
      "lineno":1996
    },{
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":" `true` if there is at least one urgent client on the tag."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"Emitted when the number of urgent clients on this tag changes.",
      "name":"property::urgent",
      "type":"signal",
      "args":"(boolean)",
      "kind":"signals",
      "lineno":2073
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":" The number of urgent clients on the tag."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"Emitted when the number of urgent clients on this tag changes.",
      "name":"property::urgent_count",
      "type":"signal",
      "args":"(integer)",
      "kind":"signals",
      "lineno":2078
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"context",
        "map":{
          "context":" Why it was called."
        }
      },
      "summary":"Emitted when a screen is removed.",
      "name":"request::screen",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"\n\n This can be used to salvage existing tags by moving them to a new\n screen (or creating a virtual screen).\n\n By default, there is no handler for this request and the tags will be deleted.\n To prevent this, an handler for this request must simply set a new screen\n for the tag.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(context)",
      "tags":[],
      "lineno":2090
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted after `request::screen` if no new screen has been set.",
      "name":"removal-pending",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n The tag will be deleted, this is a last chance to move its clients\n before they are sent to a fallback tag. Connect to `request::screen`\n if you wish to salvage the tag.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":2096
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":2172
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":2178
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":2191
    }],
  "type":"coreclassmod",
  "file":"/home/cji/portless/awesome/build/objects/tag.c",
  "package":"",
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2008-2009 Julien Danjou"
  },
  "lineno":203
}