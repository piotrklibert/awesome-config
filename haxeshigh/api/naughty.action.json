{
  "inferred":true,
  "kind":"core_components",
  "mod_name":"naughty.action",
  "summary":"A notification action.",
  "sections":{
    "by_name":[]
  },
  "name":"naughty.action",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"\n\n A notification can have multiple actions to chose from. This module allows\n to manage such actions. An action object can be shared by multiple\n notifications.\n",
  "items":[{
      "inferred":true,
      "subparams":{
        "args":["args.name","args.position","args.icon","args.notification","args.selected"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.notification":" The notification object.",
          "args.position":" The position.",
          "args.name":" The name.",
          "args":" The arguments.",
          "args.selected":" If this action is currently selected.",
          "args.icon":" The icon."
        }
      },
      "summary":"Create a new action.",
      "name":"naughty.action",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"string"
          },
          "5":{
            "type":"naughty.notification"
          },
          "6":{
            "type":"boolean"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args.position":{
            "type":"string"
          },
          "args.name":{
            "type":"string"
          },
          "args":{
            "type":"table"
          },
          "args.selected":{
            "type":"boolean"
          },
          "args.icon":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"string"
          },
          "5":{
            "type":"naughty.notification"
          },
          "6":{
            "type":"boolean"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args.position":{
            "type":"string"
          },
          "args.name":{
            "type":"string"
          },
          "args":{
            "type":"table"
          },
          "args.selected":{
            "type":"boolean"
          },
          "args.icon":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(args)",
      "tags":[],
      "lineno":27
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The action position (index).",
      "name":"position",
      "modifiers":{
        "param":{
          "1":[],
          "number":[]
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(number)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":46
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"icon",
        "map":{
          "icon":""
        }
      },
      "summary":"The action icon.",
      "name":"icon",
      "modifiers":{
        "param":{
          "1":{
            "type":"gears.surface|string"
          },
          "icon":{
            "type":"gears.surface|string"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"gears.surface|string"
          },
          "icon":{
            "type":"gears.surface|string"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(icon)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":51
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"If the action should hide the label and only display the icon.",
      "name":"icon_only",
      "modifiers":{
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_wibox_nwidget_actionlist_icon_only.svg)\n\n \n     local notif = naughty.notification {\n         title   = &#34A notification&#34,\n         message = &#34This notification has actions!&#34,\n         actions = {\n             naughty.action {\n                 name = &#34Accept&#34,\n                 icon = beautiful.awesome_icon,\n                 icon_only = true,\n             },\n             naughty.action {\n                 name = &#34Refuse&#34,\n                 icon = beautiful.awesome_icon,\n                 icon_only = true,\n             },\n             naughty.action {\n                 name = &#34Ignore&#34,\n                 icon = beautiful.awesome_icon,\n                 icon_only = true,\n             },\n         }\n     }\n  \n     wibox.widget {\n         notification = notif,\n         widget = naughty.list.actions,\n     }\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([boolean=false])",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":89
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"action",
        "2":"notification",
        "map":{
          "notification":" The notification, if known.",
          "action":" The action."
        }
      },
      "summary":"When a notification is invoked.",
      "name":"invoked",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"naughty.action"
          },
          "2":{
            "type":"naughty.notification|nil"
          },
          "notification":{
            "type":"naughty.notification|nil"
          },
          "action":{
            "type":"naughty.action"
          }
        },
        "field":{
          "1":{
            "type":"naughty.action"
          },
          "2":{
            "type":"naughty.notification|nil"
          },
          "notification":{
            "type":"naughty.notification|nil"
          },
          "action":{
            "type":"naughty.action"
          }
        }
      },
      "description":"\n\n Note that it is possible to call `:invoke()` without a notification object.\n It is possible the `notification` parameter will be nil.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(action, notification)",
      "tags":[],
      "lineno":98
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notif",
        "map":{
          "notif":" A notification object on which\n  the action was invoked. If a notification is shared by many object (like\n  a \"mute\" or \"snooze\" action added to all notification), calling `:invoke()`\n  without adding the `notif` context will cause unexpected results."
        }
      },
      "summary":"Execute this action.",
      "name":"invoke",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"{}",
            "type":"naughty.notification",
            "opt":"{}"
          },
          "notif":{
            "optchain":"{}",
            "type":"naughty.notification",
            "opt":"{}"
          }
        },
        "field":{
          "1":{
            "optchain":"{}",
            "type":"naughty.notification",
            "opt":"{}"
          },
          "notif":{
            "optchain":"{}",
            "type":"naughty.notification",
            "opt":"{}"
          }
        }
      },
      "description":"\n\n This only emits the `invoked` signal.\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"([notif={}])",
      "tags":[],
      "lineno":153
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":196
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":202
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":215
    }],
  "type":"coreclassmod",
  "file":"/home/cji/portless/awesome/build/lib/naughty/action.lua",
  "package":"",
  "tags":{
    "author":["Emmanuel Lepage Vallee &lt;elv1313@gmail.com&gt;"],
    "copyright":"2019 Emmanuel Lepage Vallee"
  },
  "lineno":12
}