{
  "inferred":true,
  "kind":"widget_layouts",
  "mod_name":"wibox.layout.fixed",
  "summary":"A `fixed` layout may be initialized with any number of child widgets, and\n during runtime widgets may be added and removed dynamically.",
  "sections":{
    "by_name":[]
  },
  "name":"wibox.layout.fixed",
  "modifiers":{
    "usage":[[]],
    "author":[[]],
    "supermodule":[[]],
    "copyright":[]
  },
  "description":"\n\n On the main axis, child widgets are given a fixed size of exactly as much\n space as they ask for. The layout will then resize according to the sum of\n all child widgets. If the space available to the layout is not enough to\n include all child widgets, the excessive ones are not drawn at all.\n\n Additionally, the layout allows adding empty spacing or even placing a custom\n spacing widget between the child widget.\n\n On its secondary axis, the layout's size is determined by the largest child\n widget. Smaller child widgets are then placed with the same size.\n Therefore, child widgets may ignore their `forced_width` or `forced_height`\n properties for vertical and horizontal layouts respectively.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_defaults_fixed.svg)\n",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"...",
        "map":{
          "...":" Widgets that should be added (must at least be one)."
        }
      },
      "summary":"Add some widgets to the given layout.",
      "name":"add",
      "modifiers":{
        "param":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        },
        "return":[],
        "interface":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(...)",
      "tags":{
        "interface":["layout"]
      },
      "lineno":148
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" The widget index to remove"
        }
      },
      "summary":"Remove a widget from the layout.",
      "name":"remove",
      "modifiers":{
        "param":{
          "1":{
            "type":"number"
          },
          "index":{
            "type":"number"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "interface":[[]],
        "field":{
          "1":{
            "type":"number"
          },
          "index":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index)",
      "tags":{
        "interface":["layout"]
      },
      "lineno":167
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"...",
        "map":{
          "...":" Widgets that should be removed (must at least be one)"
        }
      },
      "summary":"Remove one or more widgets from the layout.",
      "name":"remove_widgets",
      "modifiers":{
        "param":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "interface":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        }
      },
      "description":"\n\n The last parameter can be a boolean, forcing a recursive seach of the\n widget(s) to remove.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(...)",
      "tags":{
        "interface":["layout"]
      },
      "lineno":185
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"widget2",
        "3":"recursive",
        "map":{
          "widget2":" The widget to replace `widget` with",
          "widget":" The widget to replace",
          "recursive":" Digg in all compatible layouts to find the widget."
        }
      },
      "summary":"Replace the first instance of `widget` in the layout with `widget2`.",
      "name":"replace_widget",
      "modifiers":{
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "interface":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget, widget2[, recursive=false])",
      "tags":{
        "interface":["layout"]
      },
      "lineno":225
    },{
      "parameter":"field",
      "params":{
        "1":"spacing_widget",
        "map":{
          "spacing_widget":""
        }
      },
      "modifiers":{
        "interface":[[]],
        "usage":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "spacing_widget":{
            "type":"widget"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "spacing_widget":{
            "type":"widget"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n If this property is a valid widget and `spacing` is greater than `0`, a\n copy of this widget is inserted between each child widget, with its size in\n the layout's main direction determined by `spacing`.\n\n By default no widget is used and any `spacing` is applied as an empty offset.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_fixed_spacing_widget.svg)\n",
      "tags":{
        "propemits":["true false"],
        "interface":["layout"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"A widget to insert as a separator between child widgets.",
      "name":"spacing_widget",
      "kind":"object properties",
      "usage":["-- Use the separator widget directly\nlocal w1 = wibox.widget {\n    spacing        = 10,\n    spacing_widget = wibox.widget.separator,\n    layout         = wibox.layout.fixed.horizontal\n}\n-- Use a standard declarative widget construct\nlocal w2 = wibox.widget {\n    spacing = 10,\n    spacing_widget = {\n        color  = &#34#00ff00&#34,\n        shape  = gears.shape.circle,\n        widget = wibox.widget.separator,\n    },\n    layout = wibox.layout.fixed.horizontal\n}\n-- Use composed widgets\nlocal w3 = wibox.widget {\n    spacing = 10,\n    spacing_widget = {\n        {\n            text   = &#34F&#34,\n            widget = wibox.widget.textbox,\n        },\n        bg     = &#34#ff0000&#34,\n        widget = wibox.container.background,\n    },\n    layout = wibox.layout.fixed.horizontal\n}\n-- Use negative spacing to create a powerline effect\nlocal w4 = wibox.widget {\n    spacing = -12,\n    spacing_widget = {\n        color  = &#34#ff0000&#34,\n        shape  = gears.shape.powerline,\n        widget = wibox.widget.separator,\n    },\n    layout = wibox.layout.fixed.horizontal\n}\n"],
      "args":"(spacing_widget)",
      "type":"property",
      "lineno":356
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"widget",
        "map":{
          "index":" The position.",
          "widget":" The widget."
        }
      },
      "summary":"Insert a new widget in the layout at position `index`.",
      "name":"insert",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index, widget)",
      "tags":{
        "emits":["widget::inserted"],
        "interface":["layout"],
        "emitstparam":["widget::inserted widget self The fixed layout.","widget::inserted widget widget index The inserted widget.","widget::inserted number count The widget count."]
      },
      "lineno":373
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"fill_space",
        "map":{
          "fill_space":""
        }
      },
      "summary":"Set the layout's fill_space property.",
      "name":"fill_space",
      "modifiers":{
        "param":{
          "1":{
            "type":"boolean"
          },
          "fill_space":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "fill_space":{
            "type":"boolean"
          }
        }
      },
      "description":" If this property is true, the last\n widget will get all the space that is left. If this is false, the last widget\n won't be handled specially and there can be space left unused.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(fill_space)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":460
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"...",
        "map":{
          "...":" Widgets that should be added to the layout."
        }
      },
      "summary":"Creates and returns a new horizontal fixed layout.",
      "name":"horizontal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(...)",
      "tags":[],
      "lineno":489
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"...",
        "map":{
          "...":" Widgets that should be added to the layout."
        }
      },
      "summary":"Creates and returns a new vertical fixed layout.",
      "name":"vertical",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(...)",
      "tags":[],
      "lineno":497
    },{
      "parameter":"field",
      "params":{
        "1":"spacing",
        "map":{
          "spacing":" Spacing between widgets."
        }
      },
      "modifiers":{
        "interface":[[]],
        "usage":[[]],
        "field":{
          "1":{
            "type":"number"
          },
          "spacing":{
            "type":"number"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "spacing":{
            "type":"number"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n If a `spacing_widget` is defined, this value is used for its size.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_fixed_spacing.svg)\n",
      "tags":{
        "propemits":["true false"],
        "interface":["layout"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The amount of space inserted between the child widgets.",
      "name":"spacing",
      "kind":"object properties",
      "usage":["for i=1, 5 do\n    local w = wibox.widget {\n        first,\n        second,\n        third,\n        spacing = i*3,\n        layout  = wibox.layout.fixed.horizontal\n    }\nend\n"],
      "args":"(spacing)",
      "type":"property",
      "lineno":525
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"widget2",
        "map":{
          "index":" A widget or a widget index",
          "widget2":" The widget to replace the previous one with"
        }
      },
      "summary":"Set a widget at a specific index, replacing the current one.",
      "name":"set",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget2":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget2":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index, widget2)",
      "tags":{
        "emits":["widget::replaced"],
        "interface":["layout"],
        "emitstparam":["widget::replaced widget self The layout.","widget::replaced widget widget The inserted widget.","widget::replaced widget previous The previous widget.","widget::replaced number index The replaced index."]
      },
      "lineno":551
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"widget2",
        "3":"recursive",
        "map":{
          "widget2":" The widget to replace `widget` with",
          "widget":" The widget to replace",
          "recursive":" Recurse into all compatible layouts to\n   find the widget."
        }
      },
      "summary":"Replace the first instance of `widget` in the layout with `widget2`.",
      "name":"replace_widget",
      "modifiers":{
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget, widget2[, recursive=false])",
      "tags":{
        "emits":["widget::replaced"],
        "interface":["layout"],
        "emitstparam":["widget::replaced widget self The layout.","widget::replaced widget widget index The inserted widget.","widget::replaced widget previous The previous widget.","widget::replaced number index The replaced index."]
      },
      "lineno":567
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index1",
        "2":"index2",
        "map":{
          "index2":" The second widget index",
          "index1":" The first widget index"
        }
      },
      "summary":"Swap 2 widgets in a layout.",
      "name":"swap",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index2":{
            "type":"number"
          },
          "index1":{
            "type":"number"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index2":{
            "type":"number"
          },
          "index1":{
            "type":"number"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index1, index2)",
      "tags":{
        "emits":["widget::swapped"],
        "interface":["layout"],
        "emitstparam":["widget::swapped widget self The layout.","widget::swapped widget widget1 The first widget.","widget::swapped widget widget2 The second widget.","widget::swapped number index1 The first index.","widget::swapped number index1 The second index."]
      },
      "lineno":582
    },{
      "parameter":"field",
      "params":{
        "1":"widget1",
        "2":"widget2",
        "3":"recursive",
        "map":{
          "widget2":" The second widget",
          "recursive":" Recurse into all compatible layouts to\n   find the widget.",
          "widget1":" The first widget"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget1":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget1":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[],[]],
        "interface":[[]]
      },
      "description":"\n\n If `widget1` is present multiple time, only the first instance is swapped.\n\n Calls `set` internally, so the signal `widget::replaced` is emitted for both\n widgets as well.\n",
      "tags":{
        "see":[],
        "emits":["widget::swapped"],
        "interface":["layout"],
        "emitstparam":["widget::swapped widget self The layout.","widget::swapped widget widget1 The first widget.","widget::swapped widget widget2 The second widget.","widget::swapped number index1 The first index.","widget::swapped number index1 The second index."]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Swap 2 widgets in a layout.",
      "name":"swap_widgets",
      "type":"method",
      "args":"(widget1, widget2[, recursive=false])",
      "kind":"object methods ",
      "lineno":605
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Reset the layout.",
      "name":"reset",
      "modifiers":{
        "emits":[[]],
        "field":[],
        "return":[],
        "emitstparam":[[]],
        "interface":[[]]
      },
      "description":" This removes all widgets from the layout.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":{
        "interface":["layout"],
        "emits":["widget::reset"],
        "emitstparam":["widget::reset widget self The layout."]
      },
      "lineno":611
    }],
  "type":"layoutmod",
  "usage":["wibox.widget {\n    generic_widget( &#34first&#34  ),\n    generic_widget( &#34second&#34 ),\n    generic_widget( &#34third&#34  ),\n    layout  = wibox.layout.fixed.horizontal\n}\n"],
  "file":"/home/cji/portless/awesome/build/lib/wibox/layout/fixed.lua",
  "package":"",
  "tags":{
    "author":["Uli Schlachter"],
    "copyright":"2010 Uli Schlachter",
    "supermodule":["wibox.widget.base"]
  },
  "lineno":36
}