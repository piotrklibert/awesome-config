{
  "inferred":true,
  "kind":"utility_libraries",
  "mod_name":"gears.geometry",
  "summary":"Helper functions used to compute geometries.",
  "sections":{
    "by_name":[]
  },
  "name":"gears.geometry",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"\n\n When this module refer to a geometry table, this assume a table with at least\n an *x*, *y*, *width* and *height* keys and numeric values.\n",
  "items":[{
      "inferred":true,
      "subparams":{
        "geom":["geom.x","geom.y","geom.width","geom.height"]
      },
      "parameter":"field",
      "params":{
        "1":"geom",
        "2":"x",
        "3":"y",
        "map":{
          "geom.height":" The rectangle height",
          "geom.y":" The vertical coordinate",
          "geom":" A rectangle",
          "y":" Y coordinate of point",
          "geom.x":" The horizontal coordinate",
          "geom.width":" The rectangle width",
          "x":" X coordinate of point"
        }
      },
      "summary":"Get the square distance between a rectangle and a point.",
      "name":"gears.geometry.rectangle.get_square_distance",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "geom.height":{
            "type":"number"
          },
          "geom.y":{
            "type":"number"
          },
          "geom":{
            "type":"table"
          },
          "y":{
            "type":"number"
          },
          "geom.x":{
            "type":"number"
          },
          "geom.width":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "geom.height":{
            "type":"number"
          },
          "geom.y":{
            "type":"number"
          },
          "geom":{
            "type":"table"
          },
          "y":{
            "type":"number"
          },
          "geom.x":{
            "type":"number"
          },
          "geom.width":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(geom, x, y)",
      "tags":[],
      "lineno":26
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"list",
        "2":"x",
        "3":"y",
        "map":{
          "y":" The y coordinate",
          "list":" A list of geometry tables.",
          "x":" The x coordinate"
        }
      },
      "summary":"Return the closest rectangle from `list` for a given point.",
      "name":"gears.geometry.rectangle.get_closest_by_coord",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "list":{
            "type":"table"
          },
          "x":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "list":{
            "type":"table"
          },
          "x":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(list, x, y)",
      "tags":[],
      "lineno":47
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"list",
        "2":"x",
        "3":"y",
        "map":{
          "y":" The y coordinate",
          "list":" A list of geometry tables.",
          "x":" The x coordinate"
        }
      },
      "summary":"Return the rectangle containing the [x, y] point.",
      "name":"gears.geometry.rectangle.get_by_coord",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "list":{
            "type":"table"
          },
          "x":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "list":{
            "type":"table"
          },
          "x":{
            "type":"number"
          }
        }
      },
      "description":"\n\n Note that if multiple element from the geometry list contains the point, the\n returned result is nondeterministic.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(list, x, y)",
      "tags":[],
      "lineno":72
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"dir",
        "2":"recttbl",
        "3":"cur",
        "map":{
          "cur":" The current rectangle.",
          "dir":" The direction, can be either *up*, *down*, *left* or *right*.",
          "recttbl":" A table of rectangle specifications."
        }
      },
      "summary":"Get the nearest rectangle in the given direction.",
      "name":"gears.geometry.rectangle.get_in_direction",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"table"
          },
          "cur":{
            "type":"table"
          },
          "dir":{
            "type":"string"
          },
          "recttbl":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"table"
          },
          "cur":{
            "type":"table"
          },
          "dir":{
            "type":"string"
          },
          "recttbl":{
            "type":"table"
          }
        }
      },
      "description":" Every rectangle is specified as a table\n with *x*, *y*, *width*, *height* keys, the same as client or screen geometries.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(dir, recttbl, cur)",
      "tags":[],
      "lineno":149
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"a",
        "2":"b",
        "map":{
          "b":" The other area.",
          "a":" The area."
        }
      },
      "summary":"Return true if the area are exactly identical.",
      "name":"gears.geometry.rectangle.are_equal",
      "modifiers":{
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "b":{
            "type":"table"
          },
          "a":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "b":{
            "type":"table"
          },
          "a":{
            "type":"table"
          }
        }
      },
      "description":"\n\n The areas are table with a `x`, `y`, `width` and `height` keys.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(a, b)",
      "tags":[],
      "lineno":178
    },{
      "parameter":"field",
      "params":{
        "1":"a",
        "2":"b",
        "map":{
          "b":" The larger area.",
          "a":" The smaller area."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "b":{
            "type":"table"
          },
          "a":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "b":{
            "type":"table"
          },
          "a":{
            "type":"table"
          }
        }
      },
      "description":"\n\n This includes the edges. 100% of `a` area has to be within `b` for this\n function to return true. If you wish to know if any part of `a` intersect\n with `b`, use `gears.geometry.rectangle.get_intersection`.\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Return if rectangle `a` is within rectangle `b`.",
      "name":"gears.geometry.rectangle.is_inside",
      "type":"staticfct",
      "args":"(a, b)",
      "kind":"static module functions",
      "lineno":196
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"a",
        "2":"b",
        "map":{
          "b":" The other area.",
          "a":" The area."
        }
      },
      "summary":"Check if an area intersect another area.",
      "name":"gears.geometry.rectangle.area_intersect_area",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "b":{
            "type":"table"
          },
          "a":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "b":{
            "type":"table"
          },
          "a":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(a, b)",
      "tags":[],
      "lineno":209
    },{
      "parameter":"field",
      "params":{
        "1":"a",
        "2":"b",
        "map":{
          "b.y":" The vertical coordinate",
          "a.width":" The rectangle width",
          "b.height":" The rectangle height",
          "b":" The other area.",
          "a.height":" The rectangle height",
          "b.width":" The rectangle width",
          "a.y":" The vertical coordinate",
          "a.x":" The horizontal coordinate",
          "b.x":" The horizontal coordinate",
          "a":" The area."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "b.y":{
            "type":"number"
          },
          "a.width":{
            "type":"number"
          },
          "b.height":{
            "type":"number"
          },
          "b":{
            "type":"table"
          },
          "a.height":{
            "type":"number"
          },
          "b.width":{
            "type":"number"
          },
          "a.y":{
            "type":"number"
          },
          "a.x":{
            "type":"number"
          },
          "b.x":{
            "type":"number"
          },
          "a":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "b.y":{
            "type":"number"
          },
          "a.width":{
            "type":"number"
          },
          "b.height":{
            "type":"number"
          },
          "b":{
            "type":"table"
          },
          "a.height":{
            "type":"number"
          },
          "b.width":{
            "type":"number"
          },
          "a.y":{
            "type":"number"
          },
          "a.x":{
            "type":"number"
          },
          "b.x":{
            "type":"number"
          },
          "a":{
            "type":"table"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":{
        "b":["b.x","b.y","b.width","b.height"],
        "a":["a.x","a.y","a.width","a.height"]
      },
      "summary":"Get the intersect area between a and b.",
      "name":"gears.geometry.rectangle.get_intersection",
      "type":"staticfct",
      "args":"(a, b)",
      "kind":"static module functions",
      "lineno":230
    },{
      "inferred":true,
      "subparams":{
        "elem":["elem.x","elem.y","elem.width","elem.height"]
      },
      "parameter":"field",
      "params":{
        "1":"areas",
        "2":"elem",
        "map":{
          "elem.height":" The rectangle height",
          "elem.x":" The horizontal coordinate",
          "elem.width":" The rectangle width",
          "elem":" Area to remove.",
          "areas":" Table of areas.",
          "elem.y":" The vertical coordinate"
        }
      },
      "summary":"Remove an area from a list, splitting the space between several area that\n can overlap.",
      "name":"gears.geometry.rectangle.area_remove",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "elem.height":{
            "type":"number"
          },
          "elem.x":{
            "type":"number"
          },
          "elem.width":{
            "type":"number"
          },
          "elem":{
            "type":"table"
          },
          "areas":{
            "type":"table"
          },
          "elem.y":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "6":{
            "type":"number"
          },
          "elem.height":{
            "type":"number"
          },
          "elem.x":{
            "type":"number"
          },
          "elem.width":{
            "type":"number"
          },
          "elem":{
            "type":"table"
          },
          "areas":{
            "type":"table"
          },
          "elem.y":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(areas, elem)",
      "tags":[],
      "lineno":252
    }],
  "type":"utillib",
  "file":"/home/cji/portless/awesome/build/lib/gears/geometry.lua",
  "package":"",
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2008 Julien Danjou"
  },
  "lineno":12
}