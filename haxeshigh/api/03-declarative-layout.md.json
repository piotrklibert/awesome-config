{
  "postprocess":<type 'function' is not supported by JSON.>,
  "kind":"documentation",
  "display_name":"The Widget system",
  "section":{
    "display_name":"Creating and placing widgets using the declarative style",
    "lineno":1,
    "type":"section",
    "tags":[],
    "file":{
      "modules":[<reference cycle>],
      "args":[],
      "sections":{
        "14":"The_default_widgets",
        "436":"The_different_syntaxes_to_initiate_widgets",
        "5":"The_default_configuration",
        "523":"Creating_and_placing_widgets_using_the_declarative_style"
      },
      "filename":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
      "items":[<reference cycle>,{
          "display_name":"The default configuration",
          "lineno":1,
          "type":"section",
          "tags":[],
          "file":<reference cycle>,
          "summary":"",
          "name":"The_default_configuration",
          "modifiers":[]
        },{
          "subparams":[],
          "parameter":"param",
          "params":{
            "map":[]
          },
          "name":"dumbo",
          "modifiers":{
            "param":[],
            "return":[]
          },
          "kind":"the default configuration ",
          "type":"function",
          "section":"The default configuration",
          "args":"()",
          "tags":[],
          "lineno":1
        },{
          "display_name":"The default widgets",
          "lineno":1,
          "type":"section",
          "tags":[],
          "file":<reference cycle>,
          "summary":"",
          "name":"The_default_widgets",
          "modifiers":[]
        },{
          "subparams":[],
          "parameter":"param",
          "params":{
            "map":[]
          },
          "name":"dumbo",
          "modifiers":{
            "param":[],
            "return":[]
          },
          "kind":"the default widgets ",
          "type":"function",
          "section":"The default widgets",
          "args":"()",
          "tags":[],
          "lineno":1
        },{
          "display_name":"The different syntaxes to initiate widgets",
          "lineno":1,
          "type":"section",
          "tags":[],
          "file":<reference cycle>,
          "summary":"",
          "name":"The_different_syntaxes_to_initiate_widgets",
          "modifiers":[]
        },{
          "subparams":[],
          "parameter":"param",
          "params":{
            "map":[]
          },
          "name":"dumbo",
          "modifiers":{
            "param":[],
            "return":[]
          },
          "kind":"the different syntaxes to initiate widgets ",
          "type":"function",
          "section":"The different syntaxes to initiate widgets",
          "args":"()",
          "tags":[],
          "lineno":1
        },<reference cycle>,{
          "subparams":[],
          "parameter":"param",
          "params":{
            "map":[]
          },
          "name":"dumbo",
          "modifiers":{
            "param":[],
            "return":[]
          },
          "kind":"creating and placing widgets using the declarative style ",
          "type":"function",
          "section":"Creating and placing widgets using the declarative style",
          "args":"()",
          "tags":[],
          "lineno":1
        }],
      "display_name":"The Widget system"
    },
    "summary":"",
    "name":"Creating_and_placing_widgets_using_the_declarative_style",
    "modifiers":[]
  },
  "body":"# The Widget system\n\nThis document explains how to define, place and manage widgets.\n\n## The default configuration\n\nThis is what the widgets present in the default configuration are named:\n\n\n\n![Usage example](../images/AUTOGEN_awful_popup_defaultconfig.svg)\n\n\n## The default widgets\n\n### Widgets\n\nAwesome provides 2 collections of widgets:\n\n * `wibox.widget`: Generic widgets, containers and layouts\n * `awful.widget`: The Awesome specific widgets\n\n\n<table class='widget_list' border=1>\n <tr style='font-weight: bold;'>\n  <th align='center'>Name</th>\n  <th align='center'>Example</th>\n </tr>\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.calendar.html'>wibox.widget.calendar</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_calendar.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.checkbox.html'>wibox.widget.checkbox</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_checkbox.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.graph.html'>wibox.widget.graph</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_graph.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.imagebox.html'>wibox.widget.imagebox</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_imagebox.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.piechart.html'>wibox.widget.piechart</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_piechart.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.progressbar.html'>wibox.widget.progressbar</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_progressbar.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.separator.html'>wibox.widget.separator</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_separator.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.slider.html'>wibox.widget.slider</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_slider.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.textbox.html'>wibox.widget.textbox</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_textbox.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widgets/wibox.widget.textclock.html'>wibox.widget.textclock</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_widget_defaults_textclock.svg' /></td>\n</tr>\n</table>\n\n\n\n### Containers\n\nA container is a widget that wraps another widget. It can be used to add\ndecorations or to modify the content of the child widget.\n\n<table class='widget_list' border=1>\n <tr style='font-weight: bold;'>\n  <th align='center'>Name</th>\n  <th align='center'>Example</th>\n </tr>\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.arcchart.html'>wibox.container.arcchart</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_arcchart.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.background.html'>wibox.container.background</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_background.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.constraint.html'>wibox.container.constraint</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_constraint.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.margin.html'>wibox.container.margin</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_margin.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.mirror.html'>wibox.container.mirror</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_mirror.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.only_on_screen.html'>wibox.container.only_on_screen</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_only_on_screen.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.place.html'>wibox.container.place</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_place.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.radialprogressbar.html'>wibox.container.radialprogressbar</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_radialprogressbar.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.rotate.html'>wibox.container.rotate</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_rotate.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.scroll.html'>wibox.container.scroll</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_scroll.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_containers/wibox.container.tile.html'>wibox.container.tile</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_container_defaults_tile.svg' /></td>\n</tr>\n</table>\n\n\n\n### Layouts\n\nLayouts are collections of children widgets. They are placed according to\nconfigurable rules.\n\n<table class='widget_list' border=1>\n <tr style='font-weight: bold;'>\n  <th align='center'>Name</th>\n  <th align='center'>Example</th>\n </tr>\n<tr>\n <td>\n  <a href='../widget_layouts/wibox.layout.align.html'>wibox.layout.align</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_layout_defaults_align.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_layouts/wibox.layout.fixed.html'>wibox.layout.fixed</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_layout_defaults_fixed.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_layouts/wibox.layout.flex.html'>wibox.layout.flex</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_layout_defaults_flex.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_layouts/wibox.layout.grid.html'>wibox.layout.grid</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_layout_defaults_grid.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_layouts/wibox.layout.manual.html'>wibox.layout.manual</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_layout_defaults_manual.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_layouts/wibox.layout.ratio.html'>wibox.layout.ratio</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_layout_defaults_ratio.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_layouts/wibox.layout.stack.html'>wibox.layout.stack</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_layout_defaults_stack.svg' /></td>\n</tr>\n</table>\n\n\n\n### Awful widgets\n\nThis modules contains the higher level window manager widgets. Since most of them\nare used by the default config, here is how it maps:\n\n\n\n![Usage example](../images/AUTOGEN_awful_wibar_defaultwibar.svg)\n\n\n<table class='widget_list' border=1>\n <tr style='font-weight: bold;'>\n  <th align='center'>Name</th>\n  <th align='center'>Example</th>\n </tr>\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.button.html'>wibox.awidget.button</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_button.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.clienticon.html'>wibox.awidget.clienticon</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_clienticon.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.keyboardlayout.html'>wibox.awidget.keyboardlayout</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_keyboardlayout.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.launcher.html'>wibox.awidget.launcher</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_launcher.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.layoutbox.html'>wibox.awidget.layoutbox</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_layoutbox.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.layoutlist.html'>wibox.awidget.layoutlist</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_layoutlist.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.prompt.html'>wibox.awidget.prompt</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_prompt.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.taglist.html'>wibox.awidget.taglist</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_taglist.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.tasklist.html'>wibox.awidget.tasklist</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_tasklist.svg' /></td>\n</tr>\n\n<tr>\n <td>\n  <a href='../widget_awidgets/wibox.awidget.watch.html'>wibox.awidget.watch</a>\n </td>\n <td><img src='../images/AUTOGEN_wibox_awidget_defaults_watch.svg' /></td>\n</tr>\n</table>\n\n\n\n### Titlebar widgets\n\nThe titlebar comes with some convinient default widgets. It simplify the most\nbasic \"Windows/macOS\" like titlebars.\n\n\n\n![Usage example](../images/AUTOGEN_awful_titlebar_defaulttitlebar.svg)\n\n\nNote that titlebars can also be added on\neach side. This is how \"active\" titlebars (click to resize) can be implemented.\nThe default `rc.lua` does not add active borders:\n\n![](../images/client_geo.svg)\n\n<table class=\"widget_list\" border=\"1\">\n <tr>\n   <th>Widget</th><th>Description</th>\n </tr>\n <tr>\n  <td>`awful.titlebar.widget.iconwidget`</td><td>The client icon (see `client.icon`)</td>\n </tr>\n <tr>\n  <td>`awful.titlebar.widget.titlewidget`</td><td>The client title (see `client.name`)</td>\n </tr>\n <tr>\n  <td>`awful.titlebar.widget.floatingbutton`</td><td> Toggle the floating (toggled) vs. tiling mode (untoggled). </td>\n </tr>\n <tr>\n  <td>`awful.titlebar.widget.maximizedbutton`</td><td>Toggle the maximized mode (toggled). Note that this is the<br/>\"full\" maximized mode, not vertical or horizontal maximization.<br/>See `client.maximized`.</td>\n </tr>\n <tr>\n  <td>`awful.titlebar.widget.stickybutton`</td><td>When toggled, a client will be displayed in all (screen) tags. See `client.sticky`)</td>\n </tr>\n <tr>\n  <td>`awful.titlebar.widget.ontopbutton`</td><td>When toggled, the client will be part of the `ontop` layer (see `client.ontop`).</td>\n </tr>\n <tr>\n  <td>`awful.titlebar.widget.closebutton`</td><td></td>\n </tr>\n <tr>\n  <td>`titlebar.widget.minimizebutton`</td><td></td>\n </tr>\n</table>\n\n### Notification widgets\n\nNotifications also have their own widgets.\n\n<img src=\"../images/AUTOGEN_wibox_nwidget_default.svg\" />\n\nMore information about the notification widgets can be found on the\n`naughty.notification` documentation page.\n\n### The different type of widget boxes (Wibox)\n\nThe Awesome API uses the word \"wibox\" (widget box) to describe an area of the\nscreen filled with widgets. There are many subvariants of wiboxes with\nspecialized roles such as widget bars or tooltips. All variants mostly share the\nsame characteristics, but add some extra features to make those specialized\nwidget boxes easier to work with.\n\n\n\n![Usage example](../images/AUTOGEN_awful_popup_wiboxtypes.svg)\n\n\nThe normal `wibox` is the base class for each of these types. It is extremely\nflexible and allows to place just about anything on the screen. However it\nrequires a lot of repetitive boilerplate code to use directly. For example,\nthe user needs to compute the optimal size by hand or use `awful.placement`.\n\nThe `awful.wibar` specialization allows to attach a `wibox` to a screen edge\nand prevents clients from using this area when tiled.\n\nThe `awful.popup` allows to easily place widgets on the screen. It automatically\nresizes itself to fit the optimal widget size. It also has helper properties\nand methods to make it easy to place it on the screen. It supports absolute\npositioning, relative positioning, and manual positioning.\n\nThe `awful.tooltip` is a very simple `wibox` that allows to display text next\nto an object such as the mouse.\n\nThe `naughty.layout.box` allows to provide custom widgets to use within the\nnotifications.\n\nThe `awful.wallpaper` provides a non-intereactive \"backgroud\" for one or more\n`screen`. While it uses normal widget, it will not automatically be repainted\nif they change. It will also not provide any mouse events.\n\nFinally, the `awful.titlebar`, while not technically a real `wibox`, acts\nexactly the same way and allows to attach widgets on each side of clients.\n\n## The different syntaxes to initiate widgets\n\nAwesome provides 2 totally different API access styles to manage widgets. Both\nsuit different use cases. Under the hood, both produce the\nexact same code. Consider the declarative API to be compiled into the\nimperative syntax when loaded. Also note that in contrast to technologies such\nas QML, it is interpreted only once and isn't automatically updated when\nvalues change.\n\nThe **imperative** widget initialization is similar to QtWidgets, GTK and Win32.\nYou create the object, then set the property and add the widget as a child to\nanother already declared widget. It is quite simple to use but very verbose\nand full of boilerplate code. The imperative API also offers properties both\nwith accessors or directly. It is useful when creating highly dynamic layouts\nwhere widgets are added and removed over the course of their lifecycle.\n\nThe **declarative** syntax resembles HTML style code\nwritten in JSON or YAML. The widget instances are created automatically and\nthe hierarchy is related to the table nesting (indentation). It is preferred\nwhen creating static layouts that won't change over the course of their\nlifecycle.\n\nHere is the same code written in both the imperative and declarative style\n\n**Imperative with accessors**\n\nCode:\n\n    local bg = wibox.container.background()\n    bg:set_bg(\"#ff0000\")\n\n    local tb1 = wibox.widget.textbox()\n    local tb2 = wibox.widget.textbox(\"bar\")\n\n    tb1:set_text(\"foo\")\n    tb2:set_text(\"bar\")\n\n    local l = wibox.layout.fixed.vertical()\n    l:add(tb1)\n    l:add(tb2)\n\n    bg:set_widget(l)\n\n**Imperative with properties**\n\nCode:\n\n    local bg = wibox.container.background()\n    bg.bg = \"#ff0000\"\n\n    local tb1 = wibox.widget.textbox(\"foo\")\n    local tb2 = wibox.widget.textbox(\"bar\")\n\n    tb1.text = \"foo\"\n    tb2.text = \"bar\"\n\n    local l = wibox.layout.fixed.vertical()\n    l:add(tb1)\n    l:add(tb2)\n\n    bg.widget = l\n\n**Declarative**\n\nCode:\n\n    local bg = wibox.widget {\n        {\n            {\n                text = \"foo\",\n                widget = wibox.widget.textbox\n            },\n            {\n                text = \"bar\",\n                widget = wibox.widget.textbox\n            },\n            layout = wibox.layout.fixed.vertical\n        },\n        bg = \"#ff0000\",\n        widget = wibox.container.background\n    }\n\n\nThe Awesome documentation mostly uses the declarative style for consistency,\nbut both are **always** available. Note that each style can be mixed with other\nstyles, but this creates very confusing code and should be avoided.\n\n## Creating and placing widgets using the declarative style\n\nThe examples below explain in detail how to use the declarative layout system.\nThe imperative system is quite self explanatory and the respective widget API\ndocumentation should be enough for most.\n\n### A simple layout\n\n* Display `my_first_widget` only on primary screen\n* Display `my_second_widget` only on screen two\n* Add a background color to `my_fourth_widget`\n* Dispose in a `wibox.layout.fixed.horizontal` layout\n\nCode:\n\n    s.mywibox : setup {\n        {\n            layout = awful.widget.only_on_screen,\n            screen = \"primary\", -- Only display on primary screen\n            my_first_widget,\n        },\n        {\n            layout = awful.widget.only_on_screen,\n            screen = 2, -- Only display on screen 2\n            my_second_widget,\n        },\n        my_third_widget, -- Displayed on all screens\n        { -- Add a background color/pattern for my_fourth_widget\n              my_fourth_widget,\n              bg     = beautiful.bg_focus,\n              widget = wibox.container.background,\n        },\n        layout = wibox.layout.fixed.horizontal,\n    }\n\n\nThis examples uses the `awful.widget.only_on_screen` container to display\nwidgets only on some screens.\n\n### Composite widgets\n\n\n\n![Usage example](../images/AUTOGEN_wibox_widget_progressbar_encapsulation.svg)\n\n \n     -- The progressbars will be on top of each other\n      local mycpubar1 = wibox.widget {\n         { value  = 0.2, color = grad1,\n             widget = wibox.widget.progressbar },\n         { value  = 0.4, color = grad2,\n             widget = wibox.widget.progressbar },\n         { value  = 0.6, color = grad3,\n             widget = wibox.widget.progressbar },\n         layout = wibox.layout.flex.vertical,\n      }\n     -- Now, add a rotate container, the height will become the width.\n     -- It act as if the `wibox.layout.flex.vertical` was\n     -- `wibox.layout.flex.horizontal`\n      local mycpubar2 = wibox.widget {\n         {\n             { value  = 0.2, color = grad1,\n                 widget = wibox.widget.progressbar },\n             { value  = 0.4, color = grad2,\n                 widget = wibox.widget.progressbar },\n             { value  = 0.6, color = grad3,\n                 widget = wibox.widget.progressbar },\n             layout = wibox.layout.flex.vertical,\n         },\n         direction = 'east',\n         widget    = wibox.container.rotate\n      }\n\n\n### Define widgets inline and place them\n\n* Create a `wibox.widget.textbox` with various properties\n* Force the textbox size using `wibox.layout.constraint`\n* Add a margin around another textbox\n* Add a `wibox.container.background` (for visualization)\n\nCode:\n\n    s.mywibox : setup {\n        {\n            -- Force the textbox to always be 300 pixel long\n            {\n                {\n                    markup = \"<b>Hello World!</b>\",\n                    align  = \"center\",\n                    widget = wibox.widget.textbox\n                },\n                bg     = \"#ff0000\",\n                widget = wibox.container.background,\n            },\n            width    = 300,\n            strategy = \"min\",\n            layout   = wibox.layout.constraint\n        },\n        {\n            -- Add a border around the background\n            {\n                {\n                    markup = \"Foobar\",\n                    widget = wibox.widget.textbox\n                },\n                bg     = \"#0000ff\",\n                widget = wibox.container.background\n            },\n            left   = 10,\n            right  = 10,\n            top    = 1,\n            bottom = 2,\n            layout = wibox.container.margin\n        },\n        layout = wibox.layout.fixed.horizontal,\n    }\n\n\nResult:\n![Example2 screenshot](../images/widgetlayout1.png)\n\n\n### Use a `wibox.layout.align` layout\nThe `wibox.layout.align` is a little different. While most layouts will\nignore any `nil` lines, the `align` layout relies on them so `left`, `middle`\nand `right` can be defined.\n\nCode:\n\n    s.mywibox : setup {\n        my_textbox1, -- Left\n        nil,         -- Nothing in the middle\n        my_textbox2, -- Right\n        layout = wibox.layout.align.horizontal,\n    }\n\n\n\n### Define new widgets\n\nNew trivial widgets can be created directly in the layout declaration. Here\nis a simple circle widget:\n\nCode:\n\n    s.mywibox : setup {\n        fit    = function(self, context, width, height)\n            return height, height -- A square taking the full height\n        end,\n        draw   = function(self, context, cr, width, height)\n            cr:set_source_rgb(1, 0, 0) -- Red\n            cr:arc(height/2, height/2, height/2, 0, math.pi*2)\n            cr:fill()\n        end,\n        layout = wibox.widget.base.make_widget,\n    }\n\nResult:\n![Example4 screenshot](../images/widgetlayout2.png)\n\nFor more information about how to draw widgets, refer to the `Cairo` API:\n\n* [Path](http://cairographics.org/manual/cairo-Paths.html)\n* [Context](http://cairographics.org/manual/cairo-cairo-t.html)\n* [Pattern](http://cairographics.org/manual/cairo-cairo-pattern-t.html)\n* [transformation](http://cairographics.org/manual/cairo-Transformations.html)\n* [Operator](http://cairographics.org/operators/)\n* [Pango text](https://developer.gnome.org/pango/stable/)\n\n\n### Externally defined widgets and layouts\n\nThis is useful when the widget is provided by an external module or when it\nrequires complex manipulations which would make the declaration unreadable.\n\nCode:\n\n    local tb = wibox.widget.textbox()\n    tb:set_markup(\"Hello world! \")\n\n    -- Repeat \"tb\" 3 times\n    s.mywibox : setup {\n        tb,\n        tb,\n        tb,\n        layout = wibox.layout.fixed.horizontal,\n    }\n\n\n\n### Accessing widgets\n\nFor each widget or container, it is possible to add an `identifier` attribute\nso that it can be accessed later.\n\nWidgets defined using `setup` can be accessed using these methods:\n\n* Avoiding the issue by using externally created widgets\n* Using `my_wibox.my_first_widget.my_second_widget` style access\n* Using JavaScript like `my_wibox:get_children_by_id(\"my_second_widget\")[1]`\n\nThe first method mixes the imperative and declarative syntax, and makes the code\nless readable. The second is a little verbose and only works if every node in\nthe chain has a valid identifier. The last one doesn't require long paths,\nbut it is not easy to get a specific instance if multiple widgets have the\nsame identifier.\n\nWARNING: The widget identifier must not use a reserved name. This includes all\nmethod names, existing widget attributes, `layout` and `widget`. Names should\nalso respect the Lua variable conventions (case-sensitive, alphanumeric,\nunderscore characters and non-numeric first character).\n\nCode:\n\n    s.mywibox : setup {\n        {\n            id     = \"second\",\n            widget = wibox.widget.textbox\n        },\n        {\n            id     = \"third\",\n            widget = wibox.widget.textbox\n        },\n        id     = \"first\",\n        layout = wibox.layout.fixed.horizontal,\n    }\n\n    s.mywibox.first.second:set_markup(\"changed!\")\n    s.mywibox:get_children_by_id(\"third\")[1]:set_markup(\"Also changed!\")\n\n\n\n### Extending the system\n\nThis system is very flexible. Each section attribute (the entries with string\nkeys) is directly linked to the layout or widget API. When setting the\nimaginary `myproperty`, it will first check if `set_myproperty` exists. If it\ndoesn't, it will check if there is a `myproperty` method. Finally, it will\njust set the `mywidget.myproperty` directly in case it is used later or\ncaught by a Lua `metatable` (operator overload).\n\nCode:\n\n    -- \"Monkeypatch\" a new function to 3 widget classes to add vicious\n    -- extension support\n    for _, wdg in ipairs {\n        wibox.widget.textbox , wibox.widget.progressbar, wibox.widget.graph\n    } do\n        function wdg:vicious(args)\n            local f = unpack or table.unpack -- Lua 5.1 compat\n            vicious.register(self, f(args))\n        end\n    end\n\n    s.mywibox : setup {\n        {\n            vicious = {vicious.widgets.cpu, \"CPU: $1%\", 3},\n            widget  = wibox.widget.textbox\n        },\n        layout = wibox.layout.fixed.horizontal,\n    }\n\n\nIn this example, the system is extended so that the popular\n[Vicious](https://github.com/vicious-widgets/vicious) extension module can be\nused directly in the layout declaration. This example will update the textbox\nevery 3 seconds to show the CPU usage.\n\n\n### Handling sections\n\nThe system allows sections to be defined externally, then composed into\nthe final layout declaration. Here is an example re-using one of the above\nexample:\n\nCode:\n\n    local circle = {\n        fit    = function(self, context, width, height)\n            return height, height -- A square taking the full height\n        end,\n        draw   = function(self, context, cr, width, height)\n            cr:set_source_rgb(1, 0, 0) -- Red\n            cr:arc(height/2, height/2, height/2, 0, math.pi*2)\n            cr:fill()\n        end,\n        layout = wibox.widget.base.make_widget,\n    }\n\n    -- Define a layout with the imperative syntax\n    local l = wibox.widget.align()\n\n    -- 3 circle\n    s.mywibox : setup {\n        circle,\n        circle,\n        circle,\n        l,\n        layout = wibox.layout.align.horizontal\n    }\n\n    -- This can be done instead\n    local three_circle = {layout = wibox.layout.align.horizontal}\n    for i=1, 3 do\n        table.insert(three_circle, circle)\n    end\n\n    s.mywibox : setup (three_circle)\n\n### Instantiation rules\n\nWhenever it can, Awesome tries to be asynchronous. This can take various form\ndepending on the situation. For example, the `connect_signal` method allows to\nexecute code when an event arrives. `awful.screen.connect_for_each_screen` also\nallows to instantiate various elements when a new screen is added. In the later\ncase, it is why some widgets are added as properties to other objects instead of\nbeing global variables like in previous versions of Awesome.\n\nHowever, there is a case where this isn't enough and another abstract widget has\nto be used. This concept is called the `widget_template` and is an optional\nproperty of many widgets such as the `awful.widget.taglist`,\n`awful.widget.tasklist` and `naughty.layout.box`. These templates are a\n**table** using the exact same syntax as the declarative widgets, but without\nthe `wibox.widget` prefix in front of the curly braces. These templates\nrepresents future widgets that will be created by their parent widget. This is\nnecessary for three reasons:\n\n * The widget must create many instances of the template at different points in\n   time.\n * The widget data is only partially available and other fields must be set\n   at a later time (by the parent widget).\n * The code is highly redundant and some of the logic is delegated to the parent\n   widget to simplify everything.\n",
  "sections":{
    "1":{
      "display_name":"The default configuration",
      "lineno":1,
      "type":"section",
      "tags":[],
      "file":{
        "modules":[<reference cycle>],
        "args":[],
        "sections":{
          "14":"The_default_widgets",
          "436":"The_different_syntaxes_to_initiate_widgets",
          "5":"The_default_configuration",
          "523":"Creating_and_placing_widgets_using_the_declarative_style"
        },
        "filename":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
        "items":[<reference cycle>,<reference cycle>,{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the default configuration ",
            "type":"function",
            "section":"The default configuration",
            "args":"()",
            "tags":[],
            "lineno":1
          },{
            "display_name":"The default widgets",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"The_default_widgets",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the default widgets ",
            "type":"function",
            "section":"The default widgets",
            "args":"()",
            "tags":[],
            "lineno":1
          },{
            "display_name":"The different syntaxes to initiate widgets",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"The_different_syntaxes_to_initiate_widgets",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the different syntaxes to initiate widgets ",
            "type":"function",
            "section":"The different syntaxes to initiate widgets",
            "args":"()",
            "tags":[],
            "lineno":1
          },{
            "display_name":"Creating and placing widgets using the declarative style",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"Creating_and_placing_widgets_using_the_declarative_style",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"creating and placing widgets using the declarative style ",
            "type":"function",
            "section":"Creating and placing widgets using the declarative style",
            "args":"()",
            "tags":[],
            "lineno":1
          }],
        "display_name":"The Widget system"
      },
      "summary":"",
      "name":"The_default_configuration",
      "modifiers":[]
    },
    "2":{
      "display_name":"The default widgets",
      "lineno":1,
      "type":"section",
      "tags":[],
      "file":{
        "modules":[<reference cycle>],
        "args":[],
        "sections":{
          "14":"The_default_widgets",
          "436":"The_different_syntaxes_to_initiate_widgets",
          "5":"The_default_configuration",
          "523":"Creating_and_placing_widgets_using_the_declarative_style"
        },
        "filename":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
        "items":[<reference cycle>,{
            "display_name":"The default configuration",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"The_default_configuration",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the default configuration ",
            "type":"function",
            "section":"The default configuration",
            "args":"()",
            "tags":[],
            "lineno":1
          },<reference cycle>,{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the default widgets ",
            "type":"function",
            "section":"The default widgets",
            "args":"()",
            "tags":[],
            "lineno":1
          },{
            "display_name":"The different syntaxes to initiate widgets",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"The_different_syntaxes_to_initiate_widgets",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the different syntaxes to initiate widgets ",
            "type":"function",
            "section":"The different syntaxes to initiate widgets",
            "args":"()",
            "tags":[],
            "lineno":1
          },{
            "display_name":"Creating and placing widgets using the declarative style",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"Creating_and_placing_widgets_using_the_declarative_style",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"creating and placing widgets using the declarative style ",
            "type":"function",
            "section":"Creating and placing widgets using the declarative style",
            "args":"()",
            "tags":[],
            "lineno":1
          }],
        "display_name":"The Widget system"
      },
      "summary":"",
      "name":"The_default_widgets",
      "modifiers":[]
    },
    "3":{
      "display_name":"The different syntaxes to initiate widgets",
      "lineno":1,
      "type":"section",
      "tags":[],
      "file":{
        "modules":[<reference cycle>],
        "args":[],
        "sections":{
          "14":"The_default_widgets",
          "436":"The_different_syntaxes_to_initiate_widgets",
          "5":"The_default_configuration",
          "523":"Creating_and_placing_widgets_using_the_declarative_style"
        },
        "filename":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
        "items":[<reference cycle>,{
            "display_name":"The default configuration",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"The_default_configuration",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the default configuration ",
            "type":"function",
            "section":"The default configuration",
            "args":"()",
            "tags":[],
            "lineno":1
          },{
            "display_name":"The default widgets",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"The_default_widgets",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the default widgets ",
            "type":"function",
            "section":"The default widgets",
            "args":"()",
            "tags":[],
            "lineno":1
          },<reference cycle>,{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the different syntaxes to initiate widgets ",
            "type":"function",
            "section":"The different syntaxes to initiate widgets",
            "args":"()",
            "tags":[],
            "lineno":1
          },{
            "display_name":"Creating and placing widgets using the declarative style",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"Creating_and_placing_widgets_using_the_declarative_style",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"creating and placing widgets using the declarative style ",
            "type":"function",
            "section":"Creating and placing widgets using the declarative style",
            "args":"()",
            "tags":[],
            "lineno":1
          }],
        "display_name":"The Widget system"
      },
      "summary":"",
      "name":"The_different_syntaxes_to_initiate_widgets",
      "modifiers":[]
    },
    "4":{
      "display_name":"Creating and placing widgets using the declarative style",
      "lineno":1,
      "type":"section",
      "tags":[],
      "file":{
        "modules":[<reference cycle>],
        "args":[],
        "sections":{
          "14":"The_default_widgets",
          "436":"The_different_syntaxes_to_initiate_widgets",
          "5":"The_default_configuration",
          "523":"Creating_and_placing_widgets_using_the_declarative_style"
        },
        "filename":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
        "items":[<reference cycle>,{
            "display_name":"The default configuration",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"The_default_configuration",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the default configuration ",
            "type":"function",
            "section":"The default configuration",
            "args":"()",
            "tags":[],
            "lineno":1
          },{
            "display_name":"The default widgets",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"The_default_widgets",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the default widgets ",
            "type":"function",
            "section":"The default widgets",
            "args":"()",
            "tags":[],
            "lineno":1
          },{
            "display_name":"The different syntaxes to initiate widgets",
            "lineno":1,
            "type":"section",
            "tags":[],
            "file":<reference cycle>,
            "summary":"",
            "name":"The_different_syntaxes_to_initiate_widgets",
            "modifiers":[]
          },{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"the different syntaxes to initiate widgets ",
            "type":"function",
            "section":"The different syntaxes to initiate widgets",
            "args":"()",
            "tags":[],
            "lineno":1
          },<reference cycle>,{
            "subparams":[],
            "parameter":"param",
            "params":{
              "map":[]
            },
            "name":"dumbo",
            "modifiers":{
              "param":[],
              "return":[]
            },
            "kind":"creating and placing widgets using the declarative style ",
            "type":"function",
            "section":"Creating and placing widgets using the declarative style",
            "args":"()",
            "tags":[],
            "lineno":1
          }],
        "display_name":"The Widget system"
      },
      "summary":"",
      "name":"Creating_and_placing_widgets_using_the_declarative_style",
      "modifiers":[]
    },
    "by_name":{
      "The_default_widgets":{
        "display_name":"The default widgets",
        "lineno":1,
        "type":"section",
        "tags":[],
        "file":{
          "modules":[<reference cycle>],
          "args":[],
          "sections":{
            "14":"The_default_widgets",
            "436":"The_different_syntaxes_to_initiate_widgets",
            "5":"The_default_configuration",
            "523":"Creating_and_placing_widgets_using_the_declarative_style"
          },
          "filename":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
          "items":[<reference cycle>,{
              "display_name":"The default configuration",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"The_default_configuration",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the default configuration ",
              "type":"function",
              "section":"The default configuration",
              "args":"()",
              "tags":[],
              "lineno":1
            },<reference cycle>,{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the default widgets ",
              "type":"function",
              "section":"The default widgets",
              "args":"()",
              "tags":[],
              "lineno":1
            },{
              "display_name":"The different syntaxes to initiate widgets",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"The_different_syntaxes_to_initiate_widgets",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the different syntaxes to initiate widgets ",
              "type":"function",
              "section":"The different syntaxes to initiate widgets",
              "args":"()",
              "tags":[],
              "lineno":1
            },{
              "display_name":"Creating and placing widgets using the declarative style",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"Creating_and_placing_widgets_using_the_declarative_style",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"creating and placing widgets using the declarative style ",
              "type":"function",
              "section":"Creating and placing widgets using the declarative style",
              "args":"()",
              "tags":[],
              "lineno":1
            }],
          "display_name":"The Widget system"
        },
        "summary":"",
        "name":"The_default_widgets",
        "modifiers":[]
      },
      "Creating_and_placing_widgets_using_the_declarative_style":{
        "display_name":"Creating and placing widgets using the declarative style",
        "lineno":1,
        "type":"section",
        "tags":[],
        "file":{
          "modules":[<reference cycle>],
          "args":[],
          "sections":{
            "14":"The_default_widgets",
            "436":"The_different_syntaxes_to_initiate_widgets",
            "5":"The_default_configuration",
            "523":"Creating_and_placing_widgets_using_the_declarative_style"
          },
          "filename":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
          "items":[<reference cycle>,{
              "display_name":"The default configuration",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"The_default_configuration",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the default configuration ",
              "type":"function",
              "section":"The default configuration",
              "args":"()",
              "tags":[],
              "lineno":1
            },{
              "display_name":"The default widgets",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"The_default_widgets",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the default widgets ",
              "type":"function",
              "section":"The default widgets",
              "args":"()",
              "tags":[],
              "lineno":1
            },{
              "display_name":"The different syntaxes to initiate widgets",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"The_different_syntaxes_to_initiate_widgets",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the different syntaxes to initiate widgets ",
              "type":"function",
              "section":"The different syntaxes to initiate widgets",
              "args":"()",
              "tags":[],
              "lineno":1
            },<reference cycle>,{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"creating and placing widgets using the declarative style ",
              "type":"function",
              "section":"Creating and placing widgets using the declarative style",
              "args":"()",
              "tags":[],
              "lineno":1
            }],
          "display_name":"The Widget system"
        },
        "summary":"",
        "name":"Creating_and_placing_widgets_using_the_declarative_style",
        "modifiers":[]
      },
      "The_default_configuration":{
        "display_name":"The default configuration",
        "lineno":1,
        "type":"section",
        "tags":[],
        "file":{
          "modules":[<reference cycle>],
          "args":[],
          "sections":{
            "14":"The_default_widgets",
            "436":"The_different_syntaxes_to_initiate_widgets",
            "5":"The_default_configuration",
            "523":"Creating_and_placing_widgets_using_the_declarative_style"
          },
          "filename":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
          "items":[<reference cycle>,<reference cycle>,{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the default configuration ",
              "type":"function",
              "section":"The default configuration",
              "args":"()",
              "tags":[],
              "lineno":1
            },{
              "display_name":"The default widgets",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"The_default_widgets",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the default widgets ",
              "type":"function",
              "section":"The default widgets",
              "args":"()",
              "tags":[],
              "lineno":1
            },{
              "display_name":"The different syntaxes to initiate widgets",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"The_different_syntaxes_to_initiate_widgets",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the different syntaxes to initiate widgets ",
              "type":"function",
              "section":"The different syntaxes to initiate widgets",
              "args":"()",
              "tags":[],
              "lineno":1
            },{
              "display_name":"Creating and placing widgets using the declarative style",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"Creating_and_placing_widgets_using_the_declarative_style",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"creating and placing widgets using the declarative style ",
              "type":"function",
              "section":"Creating and placing widgets using the declarative style",
              "args":"()",
              "tags":[],
              "lineno":1
            }],
          "display_name":"The Widget system"
        },
        "summary":"",
        "name":"The_default_configuration",
        "modifiers":[]
      },
      "The_different_syntaxes_to_initiate_widgets":{
        "display_name":"The different syntaxes to initiate widgets",
        "lineno":1,
        "type":"section",
        "tags":[],
        "file":{
          "modules":[<reference cycle>],
          "args":[],
          "sections":{
            "14":"The_default_widgets",
            "436":"The_different_syntaxes_to_initiate_widgets",
            "5":"The_default_configuration",
            "523":"Creating_and_placing_widgets_using_the_declarative_style"
          },
          "filename":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
          "items":[<reference cycle>,{
              "display_name":"The default configuration",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"The_default_configuration",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the default configuration ",
              "type":"function",
              "section":"The default configuration",
              "args":"()",
              "tags":[],
              "lineno":1
            },{
              "display_name":"The default widgets",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"The_default_widgets",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the default widgets ",
              "type":"function",
              "section":"The default widgets",
              "args":"()",
              "tags":[],
              "lineno":1
            },<reference cycle>,{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"the different syntaxes to initiate widgets ",
              "type":"function",
              "section":"The different syntaxes to initiate widgets",
              "args":"()",
              "tags":[],
              "lineno":1
            },{
              "display_name":"Creating and placing widgets using the declarative style",
              "lineno":1,
              "type":"section",
              "tags":[],
              "file":<reference cycle>,
              "summary":"",
              "name":"Creating_and_placing_widgets_using_the_declarative_style",
              "modifiers":[]
            },{
              "subparams":[],
              "parameter":"param",
              "params":{
                "map":[]
              },
              "name":"dumbo",
              "modifiers":{
                "param":[],
                "return":[]
              },
              "kind":"creating and placing widgets using the declarative style ",
              "type":"function",
              "section":"Creating and placing widgets using the declarative style",
              "args":"()",
              "tags":[],
              "lineno":1
            }],
          "display_name":"The Widget system"
        },
        "summary":"",
        "name":"The_different_syntaxes_to_initiate_widgets",
        "modifiers":[]
      }
    }
  },
  "name":"03-declarative-layout.md",
  "modifiers":[],
  "mod_name":"03-declarative-layout.md",
  "type":"topic",
  "items":[{
      "subparams":[],
      "parameter":"param",
      "params":{
        "map":[]
      },
      "name":"dumbo",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "kind":"the default configuration ",
      "type":"function",
      "section":"The default configuration",
      "args":"()",
      "tags":[],
      "lineno":1
    },{
      "subparams":[],
      "parameter":"param",
      "params":{
        "map":[]
      },
      "name":"dumbo",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "kind":"the default widgets ",
      "type":"function",
      "section":"The default widgets",
      "args":"()",
      "tags":[],
      "lineno":1
    },{
      "subparams":[],
      "parameter":"param",
      "params":{
        "map":[]
      },
      "name":"dumbo",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "kind":"the different syntaxes to initiate widgets ",
      "type":"function",
      "section":"The different syntaxes to initiate widgets",
      "args":"()",
      "tags":[],
      "lineno":1
    },{
      "subparams":[],
      "parameter":"param",
      "params":{
        "map":[]
      },
      "name":"dumbo",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "kind":"creating and placing widgets using the declarative style ",
      "type":"function",
      "section":"Creating and placing widgets using the declarative style",
      "args":"()",
      "tags":[],
      "lineno":1
    }],
  "file":"/home/cji/portless/awesome/build/docs/03-declarative-layout.md",
  "package":"",
  "tags":[],
  "lineno":1
}