{
  "inferred":true,
  "kind":"theme_related_libraries",
  "mod_name":"beautiful",
  "summary":"Theme library.",
  "sections":{
    "by_name":[]
  },
  "name":"beautiful",
  "modifiers":{
    "copyright":[],
    "author":[[],[]]
  },
  "description":"",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get GTK+3 theme variables from GtkStyleContext",
      "name":"beautiful.gtk.get_theme_variables",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"table"
          }]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":90
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"The default font.",
      "name":"font",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(string)",
      "tags":[],
      "lineno":94
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The gap between clients.",
      "name":"useless_gap",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([number=0])",
      "tags":[],
      "lineno":135
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"The fallback border width.",
      "name":"border_width",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(number)",
      "tags":[],
      "lineno":139
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "summary":"The fallback border color.",
      "name":"border_color",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(color)",
      "tags":[],
      "lineno":143
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"wallpaper",
        "map":{
          "wallpaper":""
        }
      },
      "summary":"The wallpaper path.",
      "name":"wallpaper",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string|gears.surface"
          },
          "wallpaper":{
            "type":"string|gears.surface"
          }
        },
        "field":{
          "1":{
            "type":"string|gears.surface"
          },
          "wallpaper":{
            "type":"string|gears.surface"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(wallpaper)",
      "tags":[],
      "lineno":147
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"icon",
        "map":{
          "icon":""
        }
      },
      "summary":"The Awesome icon path.",
      "name":"awesome_icon",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string|gears.surface"
          },
          "icon":{
            "type":"string|gears.surface"
          }
        },
        "field":{
          "1":{
            "type":"string|gears.surface"
          },
          "icon":{
            "type":"string|gears.surface"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(icon)",
      "tags":[],
      "lineno":156
    },{
      "inferred":false,
      "subparams":{
        "beautiful":["beautiful.theme_path"]
      },
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "beautiful.theme_path":"",
          "string":""
        }
      },
      "summary":"The current theme path (if any)",
      "name":"theme_path",
      "modifiers":{
        "return":[],
        "param":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "beautiful.theme_path":{
            "type":"string"
          },
          "string":[]
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(string)",
      "tags":[],
      "lineno":160
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "map":{
          "name":" The name of the font."
        }
      },
      "summary":"Get a font description.",
      "name":"get_font",
      "modifiers":{
        "return":[{
            "type":"lgi.Pango.FontDescription"
          }],
        "param":{
          "1":{
            "type":"string|lgi.Pango.FontDescription"
          },
          "name":{
            "type":"string|lgi.Pango.FontDescription"
          }
        },
        "field":{
          "1":{
            "type":"string|lgi.Pango.FontDescription"
          },
          "name":{
            "type":"string|lgi.Pango.FontDescription"
          }
        }
      },
      "description":"\n\n See https://developer.gnome.org/pango/stable/pango-Fonts.html#PangoFontDescription.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name)",
      "tags":[],
      "lineno":216
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"merge",
        "map":{
          "name":" The base font.",
          "merge":" Attributes that should be merged, e.g. \"bold\"."
        }
      },
      "summary":"Get a new font with merged attributes, based on another one.",
      "name":"get_merged_font",
      "modifiers":{
        "return":[{
            "type":"lgi.Pango.FontDescription"
          }],
        "param":{
          "1":{
            "type":"string|Pango.FontDescription"
          },
          "2":{
            "type":"string"
          },
          "name":{
            "type":"string|Pango.FontDescription"
          },
          "merge":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string|Pango.FontDescription"
          },
          "2":{
            "type":"string"
          },
          "name":{
            "type":"string|Pango.FontDescription"
          },
          "merge":{
            "type":"string"
          }
        }
      },
      "description":"\n\n See https://developer.gnome.org/pango/stable/pango-Fonts.html#pango-font-description-from-string.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, merge)",
      "tags":[],
      "lineno":227
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "map":{
          "name":" Name of the font."
        }
      },
      "summary":"Get the height of a font.",
      "name":"get_font_height",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "name":[]
        },
        "field":{
          "1":[],
          "name":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name)",
      "tags":[],
      "lineno":239
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"config",
        "map":{
          "config":" The theme to load. It can be either the path to\n   the theme file (which should return a table) or directly a table\n   containing all the theme values."
        }
      },
      "summary":"Function that initializes the theme settings.",
      "name":"init",
      "modifiers":{
        "return":[{
            "type":"true|nil"
          }],
        "param":{
          "1":{
            "type":"string|table"
          },
          "config":{
            "type":"string|table"
          }
        },
        "field":{
          "1":{
            "type":"string|table"
          },
          "config":{
            "type":"string|table"
          }
        }
      },
      "description":" Should be run at the\n beginning of the awesome configuration file (normally rc.lua).\n\n Example usages:\n\n    -- Using a table\n    beautiful.init({font = 'Monospace Bold 10'})\n\n    -- From a config file\n    beautiful.init(\"<path>/theme.lua\")\n\n Example \"<path>/theme.lua\" (see `05-awesomerc.md:Variable_definitions`):\n\n    theme = {}\n        theme.font = 'Monospace Bold 10'\n    return theme\n\n Example using the return value:\n\n    local beautiful = require(\"beautiful\")\n    if not beautiful.init(\"<path>/theme.lua\") then\n        beautiful.init(\"<path>/.last.theme.lua\") -- a known good fallback\n    end\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(config)",
      "tags":[],
      "lineno":272
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the current theme.",
      "name":"get",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"table"
          }]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":323
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"size",
        "2":"fg",
        "map":{
          "size":" Size.",
          "fg":" Background color."
        }
      },
      "summary":"Generate selected taglist square.",
      "name":"beautiful.theme_assets.taglist_squares_sel",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"color"
          },
          "size":{
            "type":"number"
          },
          "fg":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"color"
          },
          "size":{
            "type":"number"
          },
          "fg":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(size, fg)",
      "tags":[],
      "lineno":23
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"size",
        "2":"fg",
        "map":{
          "size":" Size.",
          "fg":" Background color."
        }
      },
      "summary":"Generate unselected taglist square.",
      "name":"beautiful.theme_assets.taglist_squares_unsel",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"color"
          },
          "size":{
            "type":"number"
          },
          "fg":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"color"
          },
          "size":{
            "type":"number"
          },
          "fg":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(size, fg)",
      "tags":[],
      "lineno":36
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"cr",
        "2":"height",
        "3":"bg",
        "4":"fg",
        "5":"alt_fg",
        "map":{
          "alt_fg":" Accent foreground color.",
          "fg":" Main foreground color.",
          "cr":" Cairo surface.",
          "bg":" Background color.",
          "height":" Height."
        }
      },
      "summary":"Put Awesome WM name onto cairo surface.",
      "name":"beautiful.theme_assets.gen_awesome_name",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":{
            "type":"number"
          },
          "3":{
            "type":"color"
          },
          "4":{
            "type":"color"
          },
          "5":{
            "type":"color"
          },
          "alt_fg":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          },
          "cr":[],
          "bg":{
            "type":"color"
          },
          "height":{
            "type":"number"
          }
        },
        "field":{
          "1":[],
          "2":{
            "type":"number"
          },
          "3":{
            "type":"color"
          },
          "4":{
            "type":"color"
          },
          "5":{
            "type":"color"
          },
          "alt_fg":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          },
          "cr":[],
          "bg":{
            "type":"color"
          },
          "height":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(cr, height, bg, fg, alt_fg)",
      "tags":[],
      "lineno":90
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"cr",
        "2":"width",
        "3":"height",
        "4":"bg",
        "5":"fg",
        "map":{
          "fg":" Foreground color.",
          "cr":" Cairo surface.",
          "height":" Height.",
          "bg":" Background color.",
          "width":" Width."
        }
      },
      "summary":"Put Awesome WM logo onto cairo surface.",
      "name":"beautiful.theme_assets.gen_logo",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"color"
          },
          "5":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          },
          "cr":[],
          "height":{
            "type":"number"
          },
          "bg":{
            "type":"color"
          },
          "width":{
            "type":"number"
          }
        },
        "field":{
          "1":[],
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"color"
          },
          "5":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          },
          "cr":[],
          "height":{
            "type":"number"
          },
          "bg":{
            "type":"color"
          },
          "width":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(cr, width, height, bg, fg)",
      "tags":[],
      "lineno":159
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"size",
        "2":"bg",
        "3":"fg",
        "map":{
          "size":" Size.",
          "bg":" Background color.",
          "fg":" Background color."
        }
      },
      "summary":"Generate Awesome WM logo.",
      "name":"beautiful.theme_assets.awesome_icon",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"color"
          },
          "3":{
            "type":"color"
          },
          "size":{
            "type":"number"
          },
          "bg":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"color"
          },
          "3":{
            "type":"color"
          },
          "size":{
            "type":"number"
          },
          "bg":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(size, bg, fg)",
      "tags":[],
      "lineno":182
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"bg",
        "2":"fg",
        "3":"alt_fg",
        "4":"s",
        "map":{
          "s":" Screen (to get wallpaper size).",
          "alt_fg":" Accent foreground color.",
          "bg":" Background color.",
          "fg":" Main foreground color."
        }
      },
      "summary":"Generate Awesome WM wallpaper.",
      "name":"beautiful.theme_assets.wallpaper",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"color"
          },
          "2":{
            "type":"color"
          },
          "3":{
            "type":"color"
          },
          "4":{
            "type":"screen"
          },
          "s":{
            "type":"screen"
          },
          "alt_fg":{
            "type":"color"
          },
          "bg":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"color"
          },
          "2":{
            "type":"color"
          },
          "3":{
            "type":"color"
          },
          "4":{
            "type":"screen"
          },
          "s":{
            "type":"screen"
          },
          "alt_fg":{
            "type":"color"
          },
          "bg":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(bg, fg, alt_fg, s)",
      "tags":[],
      "lineno":196
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"theme",
        "2":"color",
        "3":"state",
        "4":"postfix",
        "5":"toggle_state",
        "map":{
          "theme":" Beautiful theme table.",
          "color":" Icons' color.",
          "toggle_state":" `nil`, `\"active\"` or `\"inactive\"`.",
          "postfix":" `nil`, `\"hover\"` or `\"press\"`.",
          "state":" `\"normal\"` or `\"focus\"`."
        }
      },
      "summary":"Recolor titlebar icons.",
      "name":"beautiful.theme_assets.recolor_titlebar",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"color"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"string"
          },
          "5":{
            "type":"string"
          },
          "theme":{
            "type":"table"
          },
          "color":{
            "type":"color"
          },
          "toggle_state":{
            "type":"string"
          },
          "postfix":{
            "type":"string"
          },
          "state":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"color"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"string"
          },
          "5":{
            "type":"string"
          },
          "theme":{
            "type":"table"
          },
          "color":{
            "type":"color"
          },
          "toggle_state":{
            "type":"string"
          },
          "postfix":{
            "type":"string"
          },
          "state":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(theme, color, state, postfix, toggle_state)",
      "tags":[],
      "lineno":225
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"theme",
        "2":"color",
        "map":{
          "theme":" Beautiful theme table",
          "color":" Icons' color."
        }
      },
      "summary":"Recolor unfocused titlebar icons.",
      "name":"recolor_titlebar_normal",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"color"
          },
          "theme":{
            "type":"table"
          },
          "color":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"color"
          },
          "theme":{
            "type":"table"
          },
          "color":{
            "type":"color"
          }
        }
      },
      "description":"\n This method is deprecated.  Use a `beautiful.theme_assets.recolor_titlebar`.",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(theme, color)",
      "tags":[],
      "lineno":258
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"theme",
        "2":"color",
        "map":{
          "theme":" Beautiful theme table",
          "color":" Icons' color."
        }
      },
      "summary":"Recolor focused titlebar icons.",
      "name":"recolor_titlebar_focus",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"color"
          },
          "theme":{
            "type":"table"
          },
          "color":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"color"
          },
          "theme":{
            "type":"table"
          },
          "color":{
            "type":"color"
          }
        }
      },
      "description":"\n This method is deprecated.  Use a `beautiful.theme_assets.recolor_titlebar`.",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(theme, color)",
      "tags":[],
      "lineno":268
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"theme",
        "2":"color",
        "map":{
          "theme":" Beautiful theme table",
          "color":" Icons' color."
        }
      },
      "summary":"Recolor layout icons.",
      "name":"beautiful.theme_assets.recolor_layout",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"color"
          },
          "theme":{
            "type":"table"
          },
          "color":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"color"
          },
          "theme":{
            "type":"table"
          },
          "color":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(theme, color)",
      "tags":[],
      "lineno":277
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get current base colorscheme from xrdb.",
      "name":"beautiful.xresources.get_current_theme",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"table"
          }]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":50
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"s",
        "map":{
          "s":" The screen."
        }
      },
      "summary":"Get global or per-screen DPI value falling back to xrdb.",
      "name":"beautiful.xresources.get_dpi",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "s":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "s":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          }
        }
      },
      "description":"\n\n This function is deprecated. Use `s.dpi` and avoid getting the DPI without\n a screen.\n",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"([s])",
      "tags":[],
      "lineno":85
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"dpi",
        "2":"s",
        "map":{
          "dpi":" DPI value.",
          "s":" Screen."
        }
      },
      "summary":"Set DPI for a given screen (defaults to global).",
      "name":"beautiful.xresources.set_dpi",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"integer",
            "opt":true
          },
          "dpi":{
            "type":"number"
          },
          "s":{
            "optchain":true,
            "type":"integer",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"integer",
            "opt":true
          },
          "dpi":{
            "type":"number"
          },
          "s":{
            "optchain":true,
            "type":"integer",
            "opt":true
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(dpi[, s])",
      "tags":[],
      "lineno":123
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"size",
        "2":"s",
        "map":{
          "size":" Size",
          "s":" The screen."
        }
      },
      "summary":"Compute resulting size applying current DPI value (optionally per screen).",
      "name":"beautiful.xresources.apply_dpi",
      "modifiers":{
        "return":[{
            "type":"integer"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "size":{
            "type":"number"
          },
          "s":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "size":{
            "type":"number"
          },
          "s":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(size[, s])",
      "tags":[],
      "lineno":138
    }],
  "type":"themelib",
  "file":"/home/cji/portless/awesome/build/lib/beautiful/init.lua",
  "package":"",
  "tags":{
    "author":["Damien Leone &lt;damien.leone@gmail.com&gt;","Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2008-2009 Damien Leone, Julien Danjou"
  },
  "lineno":10
}