{
  "inferred":true,
  "kind":"widgets",
  "mod_name":"awful.widget.taglist",
  "summary":"Taglist widget module for awful.",
  "sections":{
    "by_name":[]
  },
  "name":"awful.widget.taglist",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"\n\n Here is a more advanced example of how to extent the `taglist`. It provides:\n\n * mouse \"hover\" color\n * an extra index field\n * a powerline look and feel\n\n\n\n![Usage example](../images/AUTOGEN_wibox_awidget_taglist_indexed.svg)\n\n \n     s.mytaglist = awful.widget.taglist {\n         screen  = s,\n         filter  = awful.widget.taglist.filter.all,\n         style   = {\n             shape = gears.shape.powerline\n         },\n         layout   = {\n             spacing = -12,\n             spacing_widget = {\n                 color  = &#34#dddddd&#34,\n                 shape  = gears.shape.powerline,\n                 widget = wibox.widget.separator,\n             },\n             layout  = wibox.layout.fixed.horizontal\n         },\n         widget_template = {\n             {\n                 {\n                     {\n                         {\n                             {\n                                 id     = &#34index_role&#34,\n                                 widget = wibox.widget.textbox,\n                             },\n                             margins = 4,\n                             widget  = wibox.container.margin,\n                         },\n                         bg     = &#34#dddddd&#34,\n                         shape  = gears.shape.circle,\n                         widget = wibox.container.background,\n                     },\n                     {\n                         {\n                             id     = &#34icon_role&#34,\n                             widget = wibox.widget.imagebox,\n                         },\n                         margins = 2,\n                         widget  = wibox.container.margin,\n                     },\n                     {\n                         id     = &#34text_role&#34,\n                         widget = wibox.widget.textbox,\n                     },\n                     layout = wibox.layout.fixed.horizontal,\n                 },\n                 left  = 18,\n                 right = 18,\n                 widget = wibox.container.margin\n             },\n             id     = &#34background_role&#34,\n             widget = wibox.container.background,\n             -- Add support for hover colors and an index label\n             create_callback = function(self, c3, index, objects) --luacheck: no unused args\n                 self:get_children_by_id(&#34index_role&#34)[1].markup = &#34<b> &#34..c3.index..&#34 </b>&#34\n                 self:connect_signal(&#34mouse::enter&#34, function()\n                     if self.bg ~= &#34#ff0000&#34 then\n                         self.backup     = self.bg\n                         self.has_backup = true\n                     end\n                     self.bg = &#34#ff0000&#34\n                 end)\n                 self:connect_signal(&#34mouse::leave&#34, function()\n                     if self.has_backup then self.bg = self.backup end\n                 end)\n             end,\n             update_callback = function(self, c3, index, objects) --luacheck: no unused args\n                 self:get_children_by_id(&#34index_role&#34)[1].markup = &#34<b> &#34..c3.index..&#34 </b>&#34\n             end,\n         },\n         buttons = taglist_buttons\n     }\n\n As demonstrated in the example above, there are a few \"shortcuts\" to avoid\n re-inventing the wheel. By setting the predefined roles as widget `id`s,\n `awful.widget.common` will do most of the work to update the values\n automatically. All of them are optional. The supported roles are:\n\n * `icon_role`: A `wibox.widget.imagebox`\n * `text_role`: A `wibox.widget.textbox`\n * `background_role`: A `wibox.container.background`\n * `text_margin_role`: A `wibox.container.margin`\n * `icon_margin_role`: A `wibox.container.margin`\n\n `awful.widget.common` also has 2 callbacks to give more control over the widget:\n\n * `create_callback`: Called once after the widget instance is created\n * `update_callback`: Called every time the data is refreshed\n\n Both callback have the same parameters:\n\n * `self`: The widget instance (*widget*).\n * `t`: The tag (*tag*)\n * `index`: The widget position in the list (*number*)\n * `tags`: The list of tag, in order (*table*)\n",
  "items":[{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"fg_focus",
            "opt":"fg_focus"
          },
          "color":{
            "optchain":"fg_focus",
            "opt":"fg_focus"
          }
        },
        "field":{
          "1":{
            "optchain":"fg_focus",
            "opt":"fg_focus"
          },
          "color":{
            "optchain":"fg_focus",
            "opt":"fg_focus"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list main foreground (text) color.",
      "name":"beautiful.taglist_fg_focus",
      "type":"beautiful",
      "args":"([color=fg_focus])",
      "kind":"theme variables",
      "lineno":145
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"bg_focus",
            "opt":"bg_focus"
          },
          "color":{
            "optchain":"bg_focus",
            "opt":"bg_focus"
          }
        },
        "field":{
          "1":{
            "optchain":"bg_focus",
            "opt":"bg_focus"
          },
          "color":{
            "optchain":"bg_focus",
            "opt":"bg_focus"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list main background color.",
      "name":"beautiful.taglist_bg_focus",
      "type":"beautiful",
      "args":"([color=bg_focus])",
      "kind":"theme variables",
      "lineno":150
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"fg_urgent",
            "opt":"fg_urgent"
          },
          "color":{
            "optchain":"fg_urgent",
            "opt":"fg_urgent"
          }
        },
        "field":{
          "1":{
            "optchain":"fg_urgent",
            "opt":"fg_urgent"
          },
          "color":{
            "optchain":"fg_urgent",
            "opt":"fg_urgent"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list urgent elements foreground (text) color.",
      "name":"beautiful.taglist_fg_urgent",
      "type":"beautiful",
      "args":"([color=fg_urgent])",
      "kind":"theme variables",
      "lineno":155
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"bg_urgent",
            "opt":"bg_urgent"
          },
          "color":{
            "optchain":"bg_urgent",
            "opt":"bg_urgent"
          }
        },
        "field":{
          "1":{
            "optchain":"bg_urgent",
            "opt":"bg_urgent"
          },
          "color":{
            "optchain":"bg_urgent",
            "opt":"bg_urgent"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list urgent elements background color.",
      "name":"beautiful.taglist_bg_urgent",
      "type":"beautiful",
      "args":"([color=bg_urgent])",
      "kind":"theme variables",
      "lineno":160
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list occupied elements background color.",
      "name":"beautiful.taglist_bg_occupied",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":165
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list occupied elements foreground (text) color.",
      "name":"beautiful.taglist_fg_occupied",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":170
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list empty elements background color.",
      "name":"beautiful.taglist_bg_empty",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":175
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list empty elements foreground (text) color.",
      "name":"beautiful.taglist_fg_empty",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":180
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list volatile elements background color.",
      "name":"beautiful.taglist_bg_volatile",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":185
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The tag list volatile elements foreground (text) color.",
      "name":"beautiful.taglist_fg_volatile",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":190
    },{
      "parameter":"field",
      "params":{
        "1":"surface",
        "map":{
          "surface":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "surface":[]
        },
        "field":{
          "1":[],
          "surface":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The selected elements background image.",
      "name":"beautiful.taglist_squares_sel",
      "type":"beautiful",
      "args":"(surface)",
      "kind":"theme variables",
      "lineno":195
    },{
      "parameter":"field",
      "params":{
        "1":"surface",
        "map":{
          "surface":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "surface":[]
        },
        "field":{
          "1":[],
          "surface":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The unselected elements background image.",
      "name":"beautiful.taglist_squares_unsel",
      "type":"beautiful",
      "args":"(surface)",
      "kind":"theme variables",
      "lineno":200
    },{
      "parameter":"field",
      "params":{
        "1":"surface",
        "map":{
          "surface":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "surface":[]
        },
        "field":{
          "1":[],
          "surface":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The selected empty elements background image.",
      "name":"beautiful.taglist_squares_sel_empty",
      "type":"beautiful",
      "args":"(surface)",
      "kind":"theme variables",
      "lineno":205
    },{
      "parameter":"field",
      "params":{
        "1":"surface",
        "map":{
          "surface":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "surface":[]
        },
        "field":{
          "1":[],
          "surface":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The unselected empty elements background image.",
      "name":"beautiful.taglist_squares_unsel_empty",
      "type":"beautiful",
      "args":"(surface)",
      "kind":"theme variables",
      "lineno":210
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"If the background images can be resized.",
      "name":"beautiful.taglist_squares_resize",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(boolean)",
      "tags":[],
      "lineno":214
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Do not display the tag icons, even if they are set.",
      "name":"beautiful.taglist_disable_icon",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(boolean)",
      "tags":[],
      "lineno":218
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"The taglist font.",
      "name":"beautiful.taglist_font",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(string)",
      "tags":[],
      "lineno":222
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"spacing",
        "map":{
          "spacing":" The spacing between tags."
        }
      },
      "summary":"The space between the taglist elements.",
      "name":"beautiful.taglist_spacing",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "spacing":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "spacing":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([spacing=0])",
      "tags":[],
      "lineno":226
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        },
        "field":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        }
      },
      "description":"\n This will be the fallback for state specific shapes.\n To get a shape for the whole taglist, use `wibox.container.background`.",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The main shape used for the elements.",
      "name":"beautiful.taglist_shape",
      "type":"beautiful",
      "args":"([shape=gears.shape.rectangle])",
      "kind":"theme variables",
      "lineno":237
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape elements border width.",
      "name":"beautiful.taglist_shape_border_width",
      "type":"beautiful",
      "args":"([number=0])",
      "kind":"theme variables",
      "lineno":242
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The elements shape border color.",
      "name":"beautiful.taglist_shape_border_color",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":247
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        },
        "field":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for the empty elements.",
      "name":"beautiful.taglist_shape_empty",
      "type":"beautiful",
      "args":"([shape=gears.shape.rectangle])",
      "kind":"theme variables",
      "lineno":252
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for the empty elements border width.",
      "name":"beautiful.taglist_shape_border_width_empty",
      "type":"beautiful",
      "args":"([number=0])",
      "kind":"theme variables",
      "lineno":257
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The empty elements shape border color.",
      "name":"beautiful.taglist_shape_border_color_empty",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":262
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        },
        "field":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for the selected elements.",
      "name":"beautiful.taglist_shape_focus",
      "type":"beautiful",
      "args":"([shape=gears.shape.rectangle])",
      "kind":"theme variables",
      "lineno":267
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for the selected elements border width.",
      "name":"beautiful.taglist_shape_border_width_focus",
      "type":"beautiful",
      "args":"([number=0])",
      "kind":"theme variables",
      "lineno":272
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The selected elements shape border color.",
      "name":"beautiful.taglist_shape_border_color_focus",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":277
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        },
        "field":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for the urgent elements.",
      "name":"beautiful.taglist_shape_urgent",
      "type":"beautiful",
      "args":"([shape=gears.shape.rectangle])",
      "kind":"theme variables",
      "lineno":282
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for the urgent elements border width.",
      "name":"beautiful.taglist_shape_border_width_urgent",
      "type":"beautiful",
      "args":"([number=0])",
      "kind":"theme variables",
      "lineno":287
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The urgents elements shape border color.",
      "name":"beautiful.taglist_shape_border_color_urgent",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":292
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        },
        "field":{
          "1":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          },
          "shape":{
            "optchain":"gears.shape.rectangle",
            "type":"gears.shape",
            "opt":"gears.shape.rectangle"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for the volatile elements.",
      "name":"beautiful.taglist_shape_volatile",
      "type":"beautiful",
      "args":"([shape=gears.shape.rectangle])",
      "kind":"theme variables",
      "lineno":297
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The shape used for the volatile elements border width.",
      "name":"beautiful.taglist_shape_border_width_volatile",
      "type":"beautiful",
      "args":"([number=0])",
      "kind":"theme variables",
      "lineno":302
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The volatile elements shape border color.",
      "name":"beautiful.taglist_shape_border_color_volatile",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":307
    },{
      "inferred":true,
      "subparams":{
        "args":["args.screen","args.filter","args.buttons","args.update_function","args.layout","args.source","args.widget_template","args.style","args.style.fg_focus","args.style.bg_focus","args.style.fg_urgent","args.style.bg_urgent","args.style.bg_occupied","args.style.fg_occupied","args.style.bg_empty","args.style.fg_empty","args.style.bg_volatile","args.style.fg_volatile","args.style.squares_sel","args.style.squares_unsel","args.style.squares_sel_empty","args.style.squares_unsel_empty","args.style.squares_resize","args.style.disable_icon","args.style.font","args.style.spacing","args.style.squares_sel","args.style.squares_unsel","args.style.squares_sel_empty","args.style.squares_unsel_empty","args.style.squares_resize","args.style.bg_focus","args.style.fg_focus","args.style.bg_urgent","args.style.fg_urgent","args.style.font"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "2":"filter",
        "3":"buttons",
        "4":"style",
        "5":"update_function",
        "6":"base_widget",
        "map":{
          "args.style.bg_occupied":"",
          "update_function":" **DEPRECATED** use args.update_function",
          "args.style.disable_icon":"",
          "args.layout":" Optional layout widget for tag widgets. Default\n   is wibox.layout.fixed.horizontal().",
          "args.style.fg_occupied":"",
          "style":" **DEPRECATED** use args.style",
          "args.style.bg_empty":"",
          "buttons":" **DEPRECATED** use args.buttons",
          "filter":" **DEPRECATED** use args.filter",
          "args.style.fg_empty":"",
          "args.style.spacing":" The spacing between tags.",
          "args.style.font":" The font.",
          "args.style.bg_volatile":"",
          "args.style.squares_resize":" True or false to resize squares.",
          "args.source":" The\n  function used to generate the list of tag.",
          "args.style.fg_volatile":"",
          "args.style.squares_unsel_empty":" A user provided image for unselected squares for empty tags.",
          "args.screen":" The screen to draw taglist for.",
          "args.style.squares_sel":" A user provided image for selected squares.",
          "args.style.squares_sel_empty":" A user provided image for selected squares for empty tags.",
          "args.style.fg_focus":" The foreground color for focused client.",
          "args.style.squares_unsel":" A user provided image for unselected squares.",
          "base_widget":" **DEPRECATED** use args.base_widget",
          "args.style.bg_focus":" The background color for focused client.",
          "args.filter":" Filter function to define what clients will be listed.",
          "args":"",
          "args.style.fg_urgent":" The foreground color for urgent clients.",
          "args.style":" The style overrides default theme.",
          "args.widget_template":" A custom widget to be used for each tag",
          "args.style.bg_urgent":" The background color for urgent clients.",
          "args.update_function":" Function to create a tag widget on each\n   update. See `awful.widget.common`.",
          "args.buttons":" A table with buttons binding to set."
        }
      },
      "summary":"Create a new taglist widget.",
      "name":"awful.widget.taglist",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"screen"
          },
          "3":{
            "type":"function[opt=nil]"
          },
          "4":{
            "type":"table"
          },
          "5":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "6":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "7":{
            "type":"function",
            "opt":"awful.widget.taglist.source.for_screen"
          },
          "8":{
            "type":"table",
            "opt":true
          },
          "9":{
            "type":"table",
            "opt":"{}"
          },
          "10":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "11":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "12":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "13":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "14":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "15":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "16":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "17":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "18":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "19":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "20":{
            "type":"string",
            "opt":"nil"
          },
          "21":{
            "type":"string",
            "opt":"nil"
          },
          "22":{
            "type":"string",
            "opt":"nil"
          },
          "23":{
            "type":"string",
            "opt":"nil"
          },
          "24":{
            "type":"string",
            "opt":"nil"
          },
          "25":{
            "type":"string",
            "opt":"nil"
          },
          "26":{
            "type":"string",
            "opt":"nil"
          },
          "27":{
            "type":"number",
            "opt":"nil"
          },
          "28":{
            "type":"string",
            "opt":true
          },
          "29":{
            "type":"string",
            "opt":true
          },
          "30":{
            "type":"string",
            "opt":true
          },
          "31":{
            "type":"string",
            "opt":true
          },
          "32":{
            "type":"boolean",
            "opt":true
          },
          "33":{
            "type":"string|pattern"
          },
          "34":{
            "type":"string|pattern"
          },
          "35":{
            "type":"string|pattern"
          },
          "36":{
            "type":"string|pattern"
          },
          "37":{
            "type":"string"
          },
          "38":[],
          "39":[],
          "40":[],
          "41":[],
          "42":[],
          "args.style.bg_occupied":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "update_function":[],
          "args.style.disable_icon":{
            "type":"string",
            "opt":"nil"
          },
          "args.layout":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "args.style.fg_occupied":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "style":[],
          "args.style.bg_empty":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "buttons":[],
          "filter":[],
          "args.style.fg_empty":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.spacing":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.font":{
            "type":"string"
          },
          "args.style.bg_volatile":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.squares_resize":{
            "type":"boolean",
            "opt":true
          },
          "args.source":{
            "type":"function",
            "opt":"awful.widget.taglist.source.for_screen"
          },
          "args.style.fg_volatile":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.squares_unsel_empty":{
            "type":"string",
            "opt":true
          },
          "args.screen":{
            "type":"screen"
          },
          "args.style.squares_sel":{
            "type":"string",
            "opt":true
          },
          "args.style.squares_sel_empty":{
            "type":"string",
            "opt":true
          },
          "args.style.fg_focus":{
            "type":"string|pattern"
          },
          "args.style.squares_unsel":{
            "type":"string",
            "opt":true
          },
          "base_widget":[],
          "args.style.bg_focus":{
            "type":"string|pattern"
          },
          "args.filter":{
            "type":"function[opt=nil]"
          },
          "args":{
            "type":"table"
          },
          "args.style.fg_urgent":{
            "type":"string|pattern"
          },
          "args.style":{
            "type":"table",
            "opt":"{}"
          },
          "args.widget_template":{
            "type":"table",
            "opt":true
          },
          "args.style.bg_urgent":{
            "type":"string|pattern"
          },
          "args.update_function":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "args.buttons":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"screen"
          },
          "3":{
            "type":"function[opt=nil]"
          },
          "4":{
            "type":"table"
          },
          "5":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "6":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "7":{
            "type":"function",
            "opt":"awful.widget.taglist.source.for_screen"
          },
          "8":{
            "type":"table",
            "opt":true
          },
          "9":{
            "type":"table",
            "opt":"{}"
          },
          "10":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "11":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "12":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "13":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "14":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "15":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "16":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "17":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "18":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "19":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "20":{
            "type":"string",
            "opt":"nil"
          },
          "21":{
            "type":"string",
            "opt":"nil"
          },
          "22":{
            "type":"string",
            "opt":"nil"
          },
          "23":{
            "type":"string",
            "opt":"nil"
          },
          "24":{
            "type":"string",
            "opt":"nil"
          },
          "25":{
            "type":"string",
            "opt":"nil"
          },
          "26":{
            "type":"string",
            "opt":"nil"
          },
          "27":{
            "type":"number",
            "opt":"nil"
          },
          "28":{
            "type":"string",
            "opt":true
          },
          "29":{
            "type":"string",
            "opt":true
          },
          "30":{
            "type":"string",
            "opt":true
          },
          "31":{
            "type":"string",
            "opt":true
          },
          "32":{
            "type":"boolean",
            "opt":true
          },
          "33":{
            "type":"string|pattern"
          },
          "34":{
            "type":"string|pattern"
          },
          "35":{
            "type":"string|pattern"
          },
          "36":{
            "type":"string|pattern"
          },
          "37":{
            "type":"string"
          },
          "38":[],
          "39":[],
          "40":[],
          "41":[],
          "42":[],
          "args.style.bg_occupied":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "update_function":[],
          "args.style.disable_icon":{
            "type":"string",
            "opt":"nil"
          },
          "args.layout":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "args.style.fg_occupied":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "style":[],
          "args.style.bg_empty":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "buttons":[],
          "filter":[],
          "args.style.fg_empty":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.spacing":{
            "type":"number",
            "opt":"nil"
          },
          "args.style.font":{
            "type":"string"
          },
          "args.style.bg_volatile":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.squares_resize":{
            "type":"boolean",
            "opt":true
          },
          "args.source":{
            "type":"function",
            "opt":"awful.widget.taglist.source.for_screen"
          },
          "args.style.fg_volatile":{
            "type":"string|pattern",
            "opt":"nil"
          },
          "args.style.squares_unsel_empty":{
            "type":"string",
            "opt":true
          },
          "args.screen":{
            "type":"screen"
          },
          "args.style.squares_sel":{
            "type":"string",
            "opt":true
          },
          "args.style.squares_sel_empty":{
            "type":"string",
            "opt":true
          },
          "args.style.fg_focus":{
            "type":"string|pattern"
          },
          "args.style.squares_unsel":{
            "type":"string",
            "opt":true
          },
          "base_widget":[],
          "args.style.bg_focus":{
            "type":"string|pattern"
          },
          "args.filter":{
            "type":"function[opt=nil]"
          },
          "args":{
            "type":"table"
          },
          "args.style.fg_urgent":{
            "type":"string|pattern"
          },
          "args.style":{
            "type":"table",
            "opt":"{}"
          },
          "args.widget_template":{
            "type":"table",
            "opt":true
          },
          "args.style.bg_urgent":{
            "type":"string|pattern"
          },
          "args.update_function":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "args.buttons":{
            "type":"table"
          }
        }
      },
      "description":" The last two arguments (update_function\n and layout) serve to customize the layout of the taglist (eg. to\n make it vertical). For that, you will need to copy the\n awful.widget.common.list_update function, make your changes to it\n and pass it as update_function here. Also change the layout if the\n default is not what you want.",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(args, filter, buttons, style[, update_function[, base_widget]])",
      "tags":[],
      "lineno":540
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag."
        }
      },
      "summary":"Filtering function to include all nonempty tags on the screen.",
      "name":"awful.widget.taglist.filter.noempty",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "t":[]
        },
        "field":{
          "1":[],
          "t":[]
        }
      },
      "description":"",
      "type":"filterfunction",
      "section":"filterfunction",
      "kind":"list filters",
      "args":"(t)",
      "tags":[],
      "lineno":650
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag."
        }
      },
      "summary":"Filtering function to include selected tags on the screen.",
      "name":"awful.widget.taglist.filter.selected",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "t":[]
        },
        "field":{
          "1":[],
          "t":[]
        }
      },
      "description":"",
      "type":"filterfunction",
      "section":"filterfunction",
      "kind":"list filters",
      "args":"(t)",
      "tags":[],
      "lineno":658
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Filtering function to include all tags on the screen.",
      "name":"awful.widget.taglist.filter.all",
      "modifiers":{
        "field":[],
        "return":[[]]
      },
      "description":"",
      "type":"filterfunction",
      "section":"filterfunction",
      "kind":"list filters",
      "args":"()",
      "tags":[],
      "lineno":665
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n This is the default source.\n",
      "tags":{
        "see":[]
      },
      "section":"sourcefunction",
      "inferred":true,
      "subparams":[],
      "summary":"All tags for the defined screen ordered by indices.",
      "name":"awful.widget.taglist.source.for_screen",
      "type":"sourcefunction",
      "args":"()",
      "kind":"list source functions",
      "lineno":675
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get or set the children elements.",
      "name":"children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":699
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get all direct and indirect children widgets.",
      "name":"all_children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"\n This will scan all containers recursively to find widgets\n Warning: This method it prone to stack overflow id the widget, or any of its\n children, contain (directly or indirectly) itself.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":707
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":713
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":" The height (`nil` for automatic)"
        }
      },
      "summary":"Force a widget height.",
      "name":"forced_height",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":718
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":" The width (`nil` for automatic)"
        }
      },
      "summary":"Force a widget width.",
      "name":"forced_width",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":723
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" The opacity (between 0 and 1)"
        }
      },
      "summary":"The widget opacity (transparency).",
      "name":"opacity",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([opacity=1])",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":728
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"The widget visibility.",
      "name":"visible",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":733
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "table":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "table":[]
        },
        "return":[]
      },
      "description":"\n\n The table contains a list of `awful.button` objects.\n",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The widget buttons.",
      "name":"buttons",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":742
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button to add."
        }
      },
      "summary":"Add a new `awful.button` to this widget.",
      "name":"add_button",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(button)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":747
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"signal_name",
        "2":"...",
        "map":{
          "signal_name":"",
          "...":" Other arguments"
        }
      },
      "summary":"Emit a signal and ensure all parent widgets in the hierarchies also\n forward the signal.",
      "name":"emit_signal_recursive",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":" This is useful to track signals when there is a dynamic\n set of containers and layouts wrapping the widget.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(signal_name, ...)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":755
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the previous results of `:layout()` and `:fit()`\n are no longer valid.  Unless this signal is emitted, `:layout()` and `:fit()`\n must return the same result when called with the same arguments.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the layout (size) change.",
      "name":"widget::layout_changed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":763
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the content of the widget changes. The widget will\n be redrawn, it is not re-layouted. Put differently, it is assumed that\n `:layout()` and `:fit()` would still return the same results as before.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the widget content changed.",
      "name":"widget::redraw_needed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":771
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is pressed over the widget.",
      "name":"button::press",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":802
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is released over the widget.",
      "name":"button::release",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":833
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse enter a widget.",
      "name":"mouse::enter",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":858
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse leave a widget.",
      "name":"mouse::leave",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":883
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":899
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":905
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":918
    }],
  "type":"widgetmod",
  "file":"/home/cji/portless/awesome/build/lib/awful/widget/taglist.lua",
  "package":"",
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2008-2009 Julien Danjou"
  },
  "lineno":115
}