{
  "inferred":true,
  "kind":"popups_and_bars",
  "mod_name":"awful.popup",
  "summary":"An auto-resized, free floating or modal wibox built around a widget.",
  "sections":{
    "by_name":[]
  },
  "name":"awful.popup",
  "modifiers":{
    "author":[[]],
    "supermodule":[[]],
    "copyright":[]
  },
  "description":"\n\n This type of widget box (wibox) is auto closed when being clicked on and is\n automatically resized to the size of its main widget.\n\n Note that the widget itself should have a finite size. If something like a\n `wibox.layout.flex` is used, then the size would be unlimited and an error\n will be printed. The `wibox.layout.fixed`, `wibox.container.constraint`,\n `forced_width` and `forced_height` are recommended.\n\n\n\n![Usage example](../images/AUTOGEN_awful_popup_simple.svg)\n\n \n     awful.popup {\n         widget = {\n             {\n                 {\n                     text   = &#34foobar&#34,\n                     widget = wibox.widget.textbox\n                 },\n                 {\n                     {\n                         text   = &#34foobar&#34,\n                         widget = wibox.widget.textbox\n                     },\n                     bg     = &#34#ff00ff&#34,\n                     clip   = true,\n                     shape  = gears.shape.rounded_bar,\n                     widget = wibox.widget.background\n                 },\n                 {\n                     value         = 0.5,\n                     forced_height = 30,\n                     forced_width  = 100,\n                     widget        = wibox.widget.progressbar\n                 },\n                 layout = wibox.layout.fixed.vertical,\n             },\n             margins = 10,\n             widget  = wibox.container.margin\n         },\n         border_color = &#34#00ff00&#34,\n         border_width = 5,\n         placement    = awful.placement.top_left,\n         shape        = gears.shape.rounded_rect,\n         visible      = true,\n     }\n\n Here is an example of how to create an alt-tab like dialog by leveraging\n the `awful.widget.tasklist`.\n\n\n\n![Usage example](../images/AUTOGEN_awful_popup_alttab.svg)\n\n \n     awful.popup {\n         widget = awful.widget.tasklist {\n             screen   = screen[1],\n             filter   = awful.widget.tasklist.filter.allscreen,\n             buttons  = tasklist_buttons,\n             style    = {\n                 shape = gears.shape.rounded_rect,\n             },\n             layout   = {\n                 spacing = 5,\n                 forced_num_rows = 2,\n                 layout = wibox.layout.grid.horizontal\n             },\n             widget_template = {\n                 {\n                     {\n                         id     = &#34clienticon&#34,\n                         widget = awful.widget.clienticon,\n                     },\n                     margins = 4,\n                     widget  = wibox.container.margin,\n                 },\n                 id              = &#34background_role&#34,\n                 forced_width    = 48,\n                 forced_height   = 48,\n                 widget          = wibox.container.background,\n                 create_callback = function(self, c, index, objects) --luacheck: no unused\n                     self:get_children_by_id(&#34clienticon&#34)[1].client = c\n                 end,\n             },\n         },\n         border_color = &#34#777777&#34,\n         border_width = 2,\n         ontop        = true,\n         placement    = awful.placement.centered,\n         shape        = gears.shape.rounded_rect\n     }\n",
  "items":[{
      "parameter":"field",
      "params":{
        "1":"preferred_positions",
        "map":{
          "preferred_positions":" A position name or an ordered\n  table of positions"
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"table|string"
          },
          "preferred_positions":{
            "type":"table|string"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"table|string"
          },
          "preferred_positions":{
            "type":"table|string"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n This allows, for example, to have a submenu that goes on the right of the\n parent menu. If there is no space on the right, it tries on the left and so\n on.\n\n Valid directions are:\n\n * left\n * right\n * top\n * bottom\n\n The basic use case for this method is to give it a parent wibox:\n\n \n\n![Usage example](../images/AUTOGEN_awful_popup_position1.svg)\n\n \n    for _, v in ipairs {&#34left&#34, &#34right&#34, &#34bottom&#34, &#34top&#34} do\n        local p2 = awful.popup {\n            widget = wibox.widget {\n                text   = &#34On the &#34..v,\n                widget = wibox.widget.textbox\n            },\n            border_color        = &#34#777777&#34,\n            border_width        = 2,\n            preferred_positions = v,\n            ontop               = true,\n        }\n        p2:move_next_to(p)\n    end\n\n As demonstrated by this second example, it is also possible to use a widget\n as a parent object:\n\n \n\n![Usage example](../images/AUTOGEN_awful_popup_position2.svg)\n\n \n    for _, v in ipairs {&#34left&#34, &#34right&#34} do\n        local p2 = awful.popup {\n            widget = wibox.widget {\n                text = &#34On the &#34..v,\n                forced_height = 100,\n                widget = wibox.widget.textbox\n            },\n            border_color  = &#34#0000ff&#34,\n            preferred_positions = v,\n            border_width  = 2,\n        }\n        p2:move_next_to(textboxinstance, v)\n    end\n",
      "tags":{
        "propemits":["true false"],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set the preferred popup position relative to its parent.",
      "name":"preferred_positions",
      "type":"property",
      "args":"(preferred_positions)",
      "kind":"object properties",
      "lineno":284
    },{
      "parameter":"field",
      "params":{
        "1":"preferred_anchors",
        "map":{
          "preferred_anchors":" Either a single anchor name or a table\n  ordered by priority."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"table|string"
          },
          "preferred_anchors":{
            "type":"table|string"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"table|string"
          },
          "preferred_anchors":{
            "type":"table|string"
          }
        }
      },
      "description":"\n\n The possible values are:\n\n * front\n * middle\n * back\n\n For details information, see the `awful.placement.next_to` documentation.\n\n In this example, it is possible to see the effect of having a fallback\n preferred anchors when the popup would otherwise not fit:\n\n \n\n![Usage example](../images/AUTOGEN_awful_popup_anchors.svg)\n\n \n     local p2 = awful.popup {\n         widget = wibox.widget {\n             text   = &#34A popup&#34,\n             forced_height = 100,\n             widget = wibox.widget.textbox\n         },\n         border_color        = &#34#777777&#34,\n         border_width        = 2,\n         preferred_positions = &#34right&#34,\n         preferred_anchors   = {&#34front&#34, &#34back&#34},\n     }\n     local p4 = awful.popup {\n         widget = wibox.widget {\n             text   = &#34A popup2&#34,\n             forced_height = 100,\n             widget = wibox.widget.textbox\n         },\n         border_color        = &#34#777777&#34,\n         border_width        = 2,\n         preferred_positions = &#34right&#34,\n         preferred_anchors   = {&#34front&#34, &#34back&#34},\n     }\n",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set the preferred popup anchors relative to the parent.",
      "name":"preferred_anchors",
      "type":"property",
      "args":"(preferred_anchors)",
      "kind":"object properties",
      "lineno":338
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"current_position",
        "map":{
          "current_position":" Either \"left\", \"right\", \"top\" or \"bottom\""
        }
      },
      "summary":"The current position relative to the parent object.",
      "name":"current_position",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "current_position":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "current_position":{
            "type":"string"
          }
        }
      },
      "description":"\n\n If there is a parent object (widget, wibox, wibar, client or the mouse), then\n this property returns the current position. This is determined using\n `preferred_positions`. It is usually the preferred position, but when there\n isn't enough space, it can also be one of the fallback.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(current_position)",
      "tags":[],
      "lineno":354
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"current_anchor",
        "map":{
          "current_anchor":" Either \"front\", \"middle\", \"back\""
        }
      },
      "summary":"Get the current anchor relative to the parent object.",
      "name":"current_anchor",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "current_anchor":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "current_anchor":{
            "type":"string"
          }
        }
      },
      "description":"\n\n If there is a parent object (widget, wibox, wibar, client or the mouse), then\n this property returns the current anchor. The anchor is the \"side\" of the\n parent object on which the popup is based on. It will \"grow\" in the\n opposite direction from the anchor.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(current_anchor)",
      "tags":[],
      "lineno":368
    },{
      "parameter":"field",
      "params":{
        "1":"obj",
        "map":{
          "obj":" An object such as a wibox, client or a table entry\n  returned by `wibox:find_widgets()`."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "optchain":"mouse",
            "opt":"mouse"
          },
          "obj":{
            "optchain":"mouse",
            "opt":"mouse"
          }
        },
        "field":{
          "1":{
            "optchain":"mouse",
            "opt":"mouse"
          },
          "obj":{
            "optchain":"mouse",
            "opt":"mouse"
          }
        }
      },
      "description":"\n This will try to avoid overlapping the source wibox and auto-detect the right\n direction to avoid going off-screen.\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Move the wibox to a position relative to `geo`.",
      "name":"move_next_to",
      "type":"method",
      "args":"([obj=mouse])",
      "kind":"object methods ",
      "lineno":383
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"button",
        "map":{
          "button":" The button index",
          "widget":" The widget"
        }
      },
      "summary":"Bind the popup to a widget button press.",
      "name":"bind_to_widget",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "button":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "widget":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "button":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "widget":{
            "type":"widget"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget[, button=1])",
      "tags":[],
      "lineno":406
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "map":{
          "widget":" The widget"
        }
      },
      "summary":"Unbind the popup from a widget button.",
      "name":"unbind_to_widget",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget)",
      "tags":[],
      "lineno":418
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"hide_on_right_click",
        "map":{
          "hide_on_right_click":""
        }
      },
      "summary":"Hide the popup when right clicked.",
      "name":"hide_on_right_click",
      "modifiers":{
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "hide_on_right_click":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "hide_on_right_click":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([hide_on_right_click=false])",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":428
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"minimum_width",
        "map":{
          "minimum_width":" The minimum width."
        }
      },
      "summary":"The popup minimum width.",
      "name":"minimum_width",
      "modifiers":{
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "minimum_width":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "minimum_width":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([minimum_width=1])",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":441
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"minimum_height",
        "map":{
          "minimum_height":" The minimum height."
        }
      },
      "summary":"The popup minimum height.",
      "name":"minimum_height",
      "modifiers":{
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "minimum_height":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "minimum_height":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([minimum_height=1])",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":447
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"maximum_width",
        "map":{
          "maximum_width":" The maximum width."
        }
      },
      "summary":"The popup maximum width.",
      "name":"maximum_width",
      "modifiers":{
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "maximum_width":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "maximum_width":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([maximum_width=1])",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":453
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"maximum_height",
        "map":{
          "maximum_height":" The maximum height."
        }
      },
      "summary":"The popup maximum height.",
      "name":"maximum_height",
      "modifiers":{
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "maximum_height":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "maximum_height":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([maximum_height=1])",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":459
    },{
      "inferred":true,
      "subparams":{
        "offset":["offset.x","offset.y"]
      },
      "parameter":"field",
      "params":{
        "1":"offset",
        "map":{
          "offset.y":" The vertical distance.",
          "offset":" An integer value or a `{x=, y=}` table.",
          "offset.x":" The horizontal distance."
        }
      },
      "summary":"The distance between the popup and its parent (if any).",
      "name":"offset",
      "modifiers":{
        "param":{
          "1":{
            "type":"table|number"
          },
          "2":{
            "type":"number",
            "opt":"offset"
          },
          "3":{
            "type":"number",
            "opt":"offset"
          },
          "offset.y":{
            "type":"number",
            "opt":"offset"
          },
          "offset":{
            "type":"table|number"
          },
          "offset.x":{
            "type":"number",
            "opt":"offset"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"table|number"
          },
          "2":{
            "type":"number",
            "opt":"offset"
          },
          "3":{
            "type":"number",
            "opt":"offset"
          },
          "offset.y":{
            "type":"number",
            "opt":"offset"
          },
          "offset":{
            "type":"table|number"
          },
          "offset.x":{
            "type":"number",
            "opt":"offset"
          }
        }
      },
      "description":"\n\n Here is an example of 5 popups stacked one below the other with an y axis\n offset (spacing).\n\n \n\n![Usage example](../images/AUTOGEN_awful_popup_position3.svg)\n\n \n    local previous = nil\n    for i=1, 5 do\n        local p2 = awful.popup {\n            widget = wibox.widget {\n                text   = &#34Hello world!  &#34..i..&#34  aaaa.&#34,\n                widget = wibox.widget.textbox\n            },\n            border_color        = beautiful.border_color,\n            preferred_positions = &#34bottom&#34,\n            border_width        = 2,\n            preferred_anchors   = &#34back&#34,\n            placement           = (not previous) and awful.placement.top or nil,\n            offset = {\n                 y = 10,\n            },\n        }\n        p2:move_next_to(previous)\n        previous = p2\n    end",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(offset)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":508
    },{
      "parameter":"field",
      "params":{
        "1":"The",
        "2":"function",
        "map":{
          "The":" placement function or name\n (or false to disable placement)",
          "function":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"function|string|boolean",
            "opt":"next_to"
          },
          "2":[],
          "The":{
            "type":"function|string|boolean",
            "opt":"next_to"
          },
          "function":[]
        },
        "return":[],
        "param":{
          "1":{
            "type":"function|string|boolean",
            "opt":"next_to"
          },
          "2":[],
          "The":{
            "type":"function|string|boolean",
            "opt":"next_to"
          },
          "function":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set the placement function.",
      "name":"placement",
      "type":"property",
      "args":"([The=next_to], function)",
      "kind":"object properties",
      "lineno":539
    },{
      "inferred":true,
      "subparams":{
        "args":["args.border_width","args.border_color","args.ontop","args.cursor","args.visible","args.opacity","args.type","args.x","args.y","args.width","args.height","args.screen","args.widget","args.shape_bounding","args.shape_clip","args.shape_input","args.bg","args.bgimage","args.fg","args.shape","args.input_passthrough","args.placement","args.preferred_positions","args.preferred_anchors","args.offset","args.hide_on_right_click"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.visible":" Visibility.",
          "args.shape_bounding":" The wibox’s bounding shape as a (native) cairo surface.",
          "args.shape_clip":" The wibox’s clip shape as a (native) cairo surface.",
          "args.shape_input":" The wibox’s input shape as a (native) cairo surface.",
          "args.widget":" The widget that the wibox displays.",
          "args.hide_on_right_click":" Whether or not to hide the popup on\n  right clicks.",
          "args.offset":" The X and Y offset compared to the parent object",
          "args.fg":" The foreground (text) color.",
          "args.type":" The window type (desktop, normal, dock, …).",
          "args.screen":" The wibox screen.",
          "args.bg":" The background.",
          "args.placement":" The `awful.placement` function",
          "args.border_width":" Border width.",
          "args.input_passthrough":" If the inputs are\n  forward to the element below.",
          "args.shape":" The shape.",
          "args.cursor":" The mouse cursor.",
          "args.x":" The x coordinates.",
          "args.border_color":" Border color.",
          "args.preferred_positions":"",
          "args.width":" The width.",
          "args.bgimage":" The background image of the drawable.",
          "args.y":" The y coordinates.",
          "args.ontop":" On top of other windows.",
          "args.height":" The height.",
          "args":"",
          "args.opacity":" The opacity, between 0 and 1.",
          "args.preferred_anchors":""
        }
      },
      "summary":"Create a new popup build around a passed in widget.",
      "name":"awful.popup",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"string"
          },
          "6":{
            "type":"boolean"
          },
          "7":{
            "type":"number",
            "opt":"1"
          },
          "8":{
            "type":"string"
          },
          "9":{
            "type":"integer"
          },
          "10":{
            "type":"integer"
          },
          "11":{
            "type":"integer"
          },
          "12":{
            "type":"integer"
          },
          "13":{
            "type":"screen"
          },
          "14":{
            "type":"wibox.widget"
          },
          "15":[],
          "16":[],
          "17":[],
          "18":{
            "type":"color"
          },
          "19":{
            "type":"surface"
          },
          "20":{
            "type":"color"
          },
          "21":{
            "type":"gears.shape"
          },
          "22":{
            "type":"boolean",
            "opt":"false"
          },
          "23":{
            "type":"function"
          },
          "24":{
            "type":"string|table"
          },
          "25":{
            "type":"string|table"
          },
          "26":{
            "type":"table|number"
          },
          "27":{
            "type":"boolean"
          },
          "args.visible":{
            "type":"boolean"
          },
          "args.shape_bounding":[],
          "args.shape_clip":[],
          "args.shape_input":[],
          "args.widget":{
            "type":"wibox.widget"
          },
          "args.hide_on_right_click":{
            "type":"boolean"
          },
          "args.offset":{
            "type":"table|number"
          },
          "args.fg":{
            "type":"color"
          },
          "args.type":{
            "type":"string"
          },
          "args.screen":{
            "type":"screen"
          },
          "args.bg":{
            "type":"color"
          },
          "args.placement":{
            "type":"function"
          },
          "args.border_width":{
            "type":"integer"
          },
          "args.input_passthrough":{
            "type":"boolean",
            "opt":"false"
          },
          "args.shape":{
            "type":"gears.shape"
          },
          "args.cursor":{
            "type":"string"
          },
          "args.x":{
            "type":"integer"
          },
          "args.border_color":{
            "type":"string"
          },
          "args.preferred_positions":{
            "type":"string|table"
          },
          "args.width":{
            "type":"integer"
          },
          "args.bgimage":{
            "type":"surface"
          },
          "args.y":{
            "type":"integer"
          },
          "args.ontop":{
            "type":"boolean",
            "opt":"false"
          },
          "args.height":{
            "type":"integer"
          },
          "args":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "args.opacity":{
            "type":"number",
            "opt":"1"
          },
          "args.preferred_anchors":{
            "type":"string|table"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"string"
          },
          "6":{
            "type":"boolean"
          },
          "7":{
            "type":"number",
            "opt":"1"
          },
          "8":{
            "type":"string"
          },
          "9":{
            "type":"integer"
          },
          "10":{
            "type":"integer"
          },
          "11":{
            "type":"integer"
          },
          "12":{
            "type":"integer"
          },
          "13":{
            "type":"screen"
          },
          "14":{
            "type":"wibox.widget"
          },
          "15":[],
          "16":[],
          "17":[],
          "18":{
            "type":"color"
          },
          "19":{
            "type":"surface"
          },
          "20":{
            "type":"color"
          },
          "21":{
            "type":"gears.shape"
          },
          "22":{
            "type":"boolean",
            "opt":"false"
          },
          "23":{
            "type":"function"
          },
          "24":{
            "type":"string|table"
          },
          "25":{
            "type":"string|table"
          },
          "26":{
            "type":"table|number"
          },
          "27":{
            "type":"boolean"
          },
          "args.visible":{
            "type":"boolean"
          },
          "args.shape_bounding":[],
          "args.shape_clip":[],
          "args.shape_input":[],
          "args.widget":{
            "type":"wibox.widget"
          },
          "args.hide_on_right_click":{
            "type":"boolean"
          },
          "args.offset":{
            "type":"table|number"
          },
          "args.fg":{
            "type":"color"
          },
          "args.type":{
            "type":"string"
          },
          "args.screen":{
            "type":"screen"
          },
          "args.bg":{
            "type":"color"
          },
          "args.placement":{
            "type":"function"
          },
          "args.border_width":{
            "type":"integer"
          },
          "args.input_passthrough":{
            "type":"boolean",
            "opt":"false"
          },
          "args.shape":{
            "type":"gears.shape"
          },
          "args.cursor":{
            "type":"string"
          },
          "args.x":{
            "type":"integer"
          },
          "args.border_color":{
            "type":"string"
          },
          "args.preferred_positions":{
            "type":"string|table"
          },
          "args.width":{
            "type":"integer"
          },
          "args.bgimage":{
            "type":"surface"
          },
          "args.y":{
            "type":"integer"
          },
          "args.ontop":{
            "type":"boolean",
            "opt":"false"
          },
          "args.height":{
            "type":"integer"
          },
          "args":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "args.opacity":{
            "type":"number",
            "opt":"1"
          },
          "args.preferred_anchors":{
            "type":"string|table"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"([args=nil])",
      "tags":[],
      "lineno":613
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"Border width.",
      "name":"border_width",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":687
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"Border color.",
      "name":"border_color",
      "modifiers":{
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "string":[]
        },
        "propemits":[[]]
      },
      "description":"\n\n Please note that this property only support string based 24 bit or 32 bit\n colors:\n\n    Red Blue\n     _|  _|\n    #FF00FF\n       T‾\n     Green\n\n\n    Red Blue\n     _|  _|\n    #FF00FF00\n       T‾  ‾T\n    Green   Alpha\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":710
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"On top of other windows.",
      "name":"ontop",
      "modifiers":{
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":717
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The mouse cursor.",
      "name":"cursor",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":725
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Visibility.",
      "name":"visible",
      "modifiers":{
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":732
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" (between 0 and 1)"
        }
      },
      "summary":"The opacity of the wibox, between 0 and 1.",
      "name":"opacity",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(opacity)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":739
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The window type (desktop, normal, dock, ...).",
      "name":"type",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":747
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"The x coordinates.",
      "name":"x",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":754
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"The y coordinates.",
      "name":"y",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":761
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":""
        }
      },
      "summary":"The width of the wibox.",
      "name":"width",
      "modifiers":{
        "field":{
          "1":[],
          "width":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "width":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":768
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":""
        }
      },
      "summary":"The height of the wibox.",
      "name":"height",
      "modifiers":{
        "field":{
          "1":[],
          "height":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "height":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":775
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":""
        }
      },
      "summary":"The wibox screen.",
      "name":"screen",
      "modifiers":{
        "field":{
          "1":[],
          "screen":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "screen":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(screen)",
      "tags":{
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "lineno":782
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"drawable",
        "map":{
          "drawable":""
        }
      },
      "summary":"The wibox's `drawable`.",
      "name":"drawable",
      "modifiers":{
        "field":{
          "1":{
            "type":"drawable"
          },
          "drawable":{
            "type":"drawable"
          }
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"drawable"
          },
          "drawable":{
            "type":"drawable"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(drawable)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":789
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "map":{
          "widget":""
        }
      },
      "summary":"The widget that the `wibox` displays.",
      "name":"widget",
      "modifiers":{
        "field":{
          "1":[],
          "widget":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "widget":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(widget)",
      "tags":{
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "lineno":795
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The X window id.",
      "name":"window",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":803
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n If you want to set a shape, let say some rounded corners, use\n the `shape` property rather than this. If you want something\n very complex, for example, holes, then use this.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's bounding shape as a (native) cairo surface.",
      "name":"shape_bounding",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":815
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n The clip shape is the shape of the window *content* rather\n than the outer window shape.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's clip shape as a (native) cairo surface.",
      "name":"shape_clip",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":826
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n The input shape allows to disable clicks and mouse events\n on part of the window. This is how `input_passthrough` is\n implemented.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's input shape as a (native) cairo surface.",
      "name":"shape_input",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":838
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The wibar's shape.",
      "name":"shape",
      "type":"property",
      "args":"(shape)",
      "kind":"object properties",
      "lineno":846
    },{
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n\n This replace the `shape_input` mask with an empty area. All mouse and\n keyboard events are sent to the object (such as a client) positioned below\n this wibox. When used alongside compositing, it allows, for example, to have\n a subtle transparent wibox on top a fullscreen client to display important\n data such as a low battery warning.\n",
      "tags":{
        "propemits":["true false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Forward the inputs to the client below the wibox.",
      "name":"input_passthrough",
      "type":"property",
      "args":"([boolean=false])",
      "kind":"object properties",
      "lineno":860
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"buttons_table",
        "map":{
          "buttons_table":" A table of buttons objects, or nothing."
        }
      },
      "summary":"Get or set mouse buttons bindings to a wibox.",
      "name":"buttons",
      "modifiers":{
        "field":{
          "1":[],
          "buttons_table":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "buttons_table":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(buttons_table)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":867
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"A",
        "map":{
          "A":" table with coordinates to modify."
        }
      },
      "summary":"Get or set wibox geometry.",
      "name":"geometry",
      "modifiers":{
        "field":{
          "1":[],
          "A":[]
        },
        "emits":[[]],
        "return":[[]],
        "baseclass":[[]],
        "param":{
          "1":[],
          "A":[]
        },
        "emitstparam":[[]]
      },
      "description":" That's the same as accessing or setting the x,\n y, width or height properties of a wibox.\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(A)",
      "tags":{
        "emits":["property::geometry When the geometry change."],
        "baseclass":["wibox"],
        "emitstparam":["property::geometry table geo The geometry table."]
      },
      "lineno":877
    },{
      "parameter":"field",
      "params":{
        "1":"strut",
        "map":{
          "strut":" A table with new strut, or nothing"
        }
      },
      "modifiers":{
        "see":[[]],
        "emits":[[]],
        "field":{
          "1":[],
          "strut":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "strut":[]
        },
        "return":[[]]
      },
      "description":"\n\n Struts are the area which should be reserved on each side of\n the screen for this wibox. This is used to make bars and\n docked displays. Note that `awful.wibar` implements all the\n required boilerplate code to make bar. Only use this if you\n want special type of bars (like bars not fully attached to\n the side of the screen).\n",
      "tags":{
        "see":[],
        "emits":["property::struts"],
        "baseclass":["wibox"]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Get or set wibox struts.",
      "name":"struts",
      "type":"method",
      "args":"(strut)",
      "kind":"object methods ",
      "lineno":893
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "color":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "color":[]
        },
        "return":[]
      },
      "description":"\n\n The background color can be transparent. If there is a\n compositing manager such as compton, then it will be\n real transparency and may include blur (provided by the\n compositor). When there is no compositor, it will take\n a picture of the wallpaper and blend it.\n",
      "tags":{
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default background color.",
      "name":"beautiful.bg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":906
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "color":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "color":[]
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default foreground (text) color.",
      "name":"beautiful.fg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":912
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox"]
      },
      "lineno":918
    },{
      "parameter":"field",
      "params":{
        "1":"The",
        "map":{
          "The":" background to use. This must either be a cairo pattern object,\n   nil or a string that gears.color() understands."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":{
          "1":{
            "type":"c"
          },
          "The":{
            "type":"c"
          }
        },
        "usebeautiful":[[]],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"c"
          },
          "The":{
            "type":"c"
          }
        }
      },
      "description":"\n\n The background color can be transparent. If there is a\n compositing manager such as compton, then it will be\n real transparency and may include blur (provided by the\n compositor). When there is no compositor, it will take\n a picture of the wallpaper and blend it.\n",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.bg_normal The default (fallback) bg color."],
        "baseclass":["wibox"],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The background of the wibox.",
      "name":"bg",
      "type":"property",
      "args":"(The)",
      "kind":"object properties",
      "lineno":934
    },{
      "parameter":"field",
      "params":{
        "1":"image",
        "map":{
          "image":" A background image or a function."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"gears.suface|string|function"
          },
          "image":{
            "type":"gears.suface|string|function"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"gears.suface|string|function"
          },
          "image":{
            "type":"gears.suface|string|function"
          }
        }
      },
      "description":"\n\n If `image` is a function, it will be called with `(context, cr, width, height)`\n as arguments. Any other arguments passed to this method will be appended.\n",
      "tags":{
        "propemits":["true false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The background image of the drawable.",
      "name":"bgimage",
      "type":"property",
      "args":"(image)",
      "kind":"object properties",
      "lineno":945
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"color",
        "map":{
          "c":" The foreground to use. This must either be a cairo pattern object,\n   nil or a string that gears.color() understands.",
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":{
          "1":{
            "type":"color"
          },
          "2":[],
          "c":{
            "type":"color"
          },
          "color":[]
        },
        "usebeautiful":[[]],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"color"
          },
          "2":[],
          "c":{
            "type":"color"
          },
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.fg_normal The default (fallback) fg color."],
        "baseclass":["wibox"],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The foreground (text) of the wibox.",
      "name":"fg",
      "type":"property",
      "args":"(c, color)",
      "kind":"object properties",
      "lineno":955
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "map":{
          "y":" Y coordinate of the point",
          "x":" X coordinate of the point"
        }
      },
      "summary":"Find a widget by a point.",
      "name":"find_widgets",
      "modifiers":{
        "baseclass":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        }
      },
      "description":"\n The wibox must have drawn itself at least once for this to work.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(x, y)",
      "tags":{
        "baseclass":["wibox"]
      },
      "lineno":965
    }],
  "type":"popupmod",
  "file":"/home/cji/portless/awesome/build/lib/awful/popup.lua",
  "package":"",
  "tags":{
    "author":["Emmanuel Lepage Vallee"],
    "copyright":"2016 Emmanuel Lepage Vallee",
    "supermodule":["wibox"]
  },
  "lineno":103
}