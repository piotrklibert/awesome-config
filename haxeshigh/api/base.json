{
  "inferred":true,
  "kind":"classes",
  "description":"",
  "summary":"",
  "sections":{
    "by_name":[]
  },
  "name":"wibox.widget.base",
  "modifiers":{
    "author":[[]],
    "supermodule":[[]],
    "copyright":[]
  },
  "tags":{
    "author":["Uli Schlachter"],
    "copyright":"2010 Uli Schlachter",
    "supermodule":["gears.object"]
  },
  "type":"classmod",
  "package":"wibox.widget",
  "file":"/home/cji/portless/awesome/build/lib/wibox/widget/base.lua",
  "mod_name":"base",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get or set the children elements.",
      "name":"wibox.widget.base.children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget.base"]
      },
      "lineno":28
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get all direct and indirect children widgets.",
      "name":"wibox.widget.base.all_children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"\n This will scan all containers recursively to find widgets\n Warning: This method it prone to stack overflow if there is a loop in the\n widgets hierarchy. A hierarchy loop is when a widget, or any of its\n children, contain (directly or indirectly) itself.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget.base"]
      },
      "lineno":37
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":" The height (`nil` for automatic)"
        }
      },
      "summary":"Force a widget height.",
      "name":"wibox.widget.base.forced_height",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "baseclass":["wibox.widget.base"]
      },
      "lineno":42
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":" The width (`nil` for automatic)"
        }
      },
      "summary":"Force a widget width.",
      "name":"wibox.widget.base.forced_width",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "baseclass":["wibox.widget.base"]
      },
      "lineno":47
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" The opacity (between 0 and 1)"
        }
      },
      "summary":"The widget opacity (transparency).",
      "name":"wibox.widget.base.opacity",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([opacity=1])",
      "tags":{
        "baseclass":["wibox.widget.base"]
      },
      "lineno":52
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"The widget visibility.",
      "name":"wibox.widget.base.visible",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "baseclass":["wibox.widget.base"]
      },
      "lineno":57
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "table":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "table":[]
        },
        "return":[]
      },
      "description":"\n\n The table contains a list of `awful.button` objects.",
      "tags":{
        "baseclass":["wibox.widget.base"],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The widget buttons.",
      "name":"wibox.widget.base.buttons",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":65
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the previous results of `:layout()` and `:fit()`\n are no longer valid.  Unless this signal is emitted, `:layout()` and `:fit()`\n must return the same result when called with the same arguments.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget.base"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the layout (size) change.",
      "name":"widget::layout_changed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":77
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the content of the widget changes. The widget will\n be redrawn, it is not re-layouted. Put differently, it is assumed that\n `:layout()` and `:fit()` would still return the same results as before.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget.base"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the widget content changed.",
      "name":"widget::redraw_needed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":85
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget.base"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is pressed over the widget.",
      "name":"button::press",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":116
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget.base"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is released over the widget.",
      "name":"button::release",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":147
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget.base"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse enter a widget.",
      "name":"mouse::enter",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":172
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget.base"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse leave a widget.",
      "name":"mouse::leave",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":197
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"b",
        "map":{
          "b":" Whether the widget is visible."
        }
      },
      "summary":"Set a widget's visibility.",
      "name":"wibox.widget.base:set_visible",
      "modifiers":{
        "return":[],
        "hidden":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "b":{
            "type":"boolean"
          }
        },
        "field":{
          "1":{
            "type":"boolean"
          },
          "b":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(b)",
      "tags":{
        "hidden":[""]
      },
      "lineno":214
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button to add."
        }
      },
      "summary":"Add a new `awful.button` to this widget.",
      "name":"wibox.widget.base:add_button",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(button)",
      "tags":[],
      "lineno":226
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Is the widget visible?",
      "name":"wibox.widget.base:get_visible",
      "modifiers":{
        "hidden":[[]],
        "return":[{
            "type":"boolean"
          }],
        "field":[]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":{
        "hidden":[""]
      },
      "lineno":251
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"o",
        "map":{
          "o":" The opacity to use (a number from 0 (transparent) to 1\n (opaque))."
        }
      },
      "summary":"Set a widget's opacity.",
      "name":"wibox.widget.base:set_opacity",
      "modifiers":{
        "return":[],
        "hidden":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "o":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "o":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(o)",
      "tags":{
        "hidden":[""]
      },
      "lineno":260
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the widget's opacity.",
      "name":"wibox.widget.base:get_opacity",
      "modifiers":{
        "hidden":[[]],
        "return":[{
            "type":"number"
          }],
        "field":[]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":{
        "hidden":[""]
      },
      "lineno":271
    },{
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":" With `nil` the default mechanism of calling the\n   `:fit` method is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "optchain":true,
            "type":"number",
            "opt":true
          },
          "width":{
            "optchain":true,
            "type":"number",
            "opt":true
          }
        },
        "hidden":[[]],
        "param":{
          "1":{
            "optchain":true,
            "type":"number",
            "opt":true
          },
          "width":{
            "optchain":true,
            "type":"number",
            "opt":true
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "see":[],
        "hidden":[""]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Set the widget's forced width.",
      "name":"wibox.widget.base:set_forced_width",
      "type":"method",
      "args":"([width])",
      "kind":"object methods ",
      "lineno":281
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "hidden":[[]],
        "return":[{
            "type":"number",
            "opt":true
          }],
        "field":[]
      },
      "description":"\n\n Note that widget instances can be used in different places simultaneously,\n and therefore can have multiple dimensions.\n If there is no forced width/height, then the only way to get the widget's\n actual size is during a `mouse::enter`, `mouse::leave` or button event.",
      "tags":{
        "see":[],
        "hidden":[""]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Get the widget's forced width.",
      "name":"wibox.widget.base:get_forced_width",
      "type":"method",
      "args":"()",
      "kind":"object methods ",
      "lineno":298
    },{
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":" With `nil` the default mechanism of calling the\n   `:fit` method is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "optchain":true,
            "type":"number",
            "opt":true
          },
          "height":{
            "optchain":true,
            "type":"number",
            "opt":true
          }
        },
        "hidden":[[]],
        "param":{
          "1":{
            "optchain":true,
            "type":"number",
            "opt":true
          },
          "height":{
            "optchain":true,
            "type":"number",
            "opt":true
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "see":[],
        "hidden":[""]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Set the widget's forced height.",
      "name":"wibox.widget.base:set_height",
      "type":"method",
      "args":"([height])",
      "kind":"object methods ",
      "lineno":308
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the widget's forced height.",
      "name":"wibox.widget.base:get_forced_height",
      "modifiers":{
        "hidden":[[]],
        "return":[{
            "type":"number",
            "opt":true
          }],
        "field":[]
      },
      "description":"\n\n Note that widget instances can be used in different places simultaneously,\n and therefore can have multiple dimensions.\n If there is no forced width/height, then the only way to get the widget's\n actual size is during a `mouse::enter`, `mouse::leave` or button event.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":{
        "hidden":[""]
      },
      "lineno":324
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the widget's direct children widgets.",
      "name":"wibox.widget.base:get_children",
      "modifiers":{
        "hidden":[[]],
        "return":[{
            "type":"table"
          }],
        "field":[]
      },
      "description":"\n\n This method should be re-implemented by the relevant widgets.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":{
        "hidden":[""]
      },
      "lineno":334
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" A table composed of valid widgets."
        }
      },
      "summary":"Replace the layout children.",
      "name":"wibox.widget.base:set_children",
      "modifiers":{
        "return":[],
        "hidden":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"\n\n The default implementation does nothing, this must be re-implemented by\n all layout and container widgets.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(children)",
      "tags":{
        "hidden":[""]
      },
      "lineno":345
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get all direct and indirect children widgets.",
      "name":"wibox.widget.base:get_all_children",
      "modifiers":{
        "hidden":[[]],
        "return":[{
            "type":"table"
          }],
        "field":[]
      },
      "description":"\n\n This will scan all containers recursively to find widgets.\n\n *Warning*: This method it prone to stack overflow if the widget, or any of\n its children, contains (directly or indirectly) itself.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":{
        "hidden":[""]
      },
      "lineno":366
    },{
      "parameter":"param",
      "params":{
        "1":"self",
        "2":"widget",
        "map":{
          "self":"",
          "widget":""
        }
      },
      "modifiers":{
        "return":[],
        "param":[],
        "usage":[[]]
      },
      "description":"\n\n Use this if your widget has no custom logic when setting the widget.\n",
      "type":"function",
      "tags":{
        "within":"Methods"
      },
      "section":"Methods",
      "inferred":true,
      "subparams":[],
      "summary":"Common implementation of the `:set_widget()` method exposed by many\n other widgets.",
      "name":"wibox.widget.base:set_widget_common",
      "kind":"methods",
      "usage":["rawset(my_custom_widget, \"set_widget\", wibox.widget.base.set_widget_common)\n"],
      "args":"(self, widget)",
      "lineno":379
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"signal_name",
        "2":"...",
        "map":{
          "signal_name":"",
          "...":" Other arguments"
        }
      },
      "summary":"Emit a signal and ensure all parent widgets in the hierarchies also\n forward the signal.",
      "name":"wibox.widget.base:emit_signal_recursive",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"\n\n This is useful to track signals when there is a dynamic set of containers\n   and layouts wrapping the widget.\n\n Note that this function has some flaws:\n\n 1. The signal is only forwarded once the widget tree has been built. This\n    happens after all currently scheduled functions have been executed.\n    Therefore, it will not start to work right away.\n 2. In case the widget is present multiple times in a single widget tree,\n    this function will also forward the signal multiple times (once per upward\n    tree path).\n 3. If the widget is removed from the widget tree, the signal is still\n    forwarded for some time, similar to the first case.\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(signal_name, ...)",
      "tags":[],
      "lineno":413
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"recursive",
        "3":"...",
        "map":{
          "widget":" The widget to look for.",
          "...":" Additional widgets to add at the end of the\n   sub-widgets hierarchy \"path\".",
          "recursive":" Recursively check accross the sub-widgets\n   hierarchy."
        }
      },
      "summary":"Get the index of a widget.",
      "name":"wibox.widget.base:index",
      "modifiers":{
        "return":[{
            "type":"number"
          },{
            "type":"widget"
          },{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "optchain":true,
            "type":"boolean",
            "opt":true
          },
          "3":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "widget":{
            "type":"widget"
          },
          "...":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "recursive":{
            "optchain":true,
            "type":"boolean",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "optchain":true,
            "type":"boolean",
            "opt":true
          },
          "3":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "widget":{
            "type":"widget"
          },
          "...":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "recursive":{
            "optchain":true,
            "type":"boolean",
            "opt":true
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget[, recursive[, ...]])",
      "tags":[],
      "lineno":430
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Figure out the geometry in the device coordinate space.",
      "name":"wibox.widget.base.rect_to_device_geometry",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This gives only tight bounds if no rotations by non-multiples of 90° are\n used.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":501
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"parent",
        "2":"context",
        "3":"widget",
        "4":"width",
        "5":"height",
        "map":{
          "parent":" The parent widget which requests this information.",
          "context":" The context in which we are fit.",
          "widget":" The widget to fit (this uses\n   `widget:fit(context, width, height)`).",
          "height":" The available height for the widget.",
          "width":" The available width for the widget."
        }
      },
      "summary":"Fit a widget for the given available width and height.",
      "name":"wibox.widget.base.fit_widget",
      "modifiers":{
        "return":[{
            "type":"number"
          },{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"widget"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "parent":{
            "type":"widget"
          },
          "context":{
            "type":"table"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "width":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"widget"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "parent":{
            "type":"widget"
          },
          "context":{
            "type":"table"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "width":{
            "type":"number"
          }
        }
      },
      "description":"\n\n This calls the widget's `:fit` callback and caches the result for later use.\n Never call `:fit` directly, but always through this function!",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(parent, context, widget, width, height)",
      "tags":[],
      "lineno":518
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"parent",
        "2":"context",
        "3":"widget",
        "4":"width",
        "5":"height",
        "map":{
          "parent":" The parent widget which requests this information.",
          "context":" The context in which we are laid out.",
          "widget":" The widget to layout (this uses\n   `widget:layout(context, width, height)`).",
          "height":" The available height for the widget.",
          "width":" The available width for the widget."
        }
      },
      "summary":"Lay out a widget for the given available width and height.",
      "name":"wibox.widget.base.layout_widget",
      "modifiers":{
        "return":[{
            "type":"table",
            "opt":true
          }],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"widget"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "parent":{
            "type":"widget"
          },
          "context":{
            "type":"table"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "width":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"widget"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "parent":{
            "type":"widget"
          },
          "context":{
            "type":"table"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "width":{
            "type":"number"
          }
        }
      },
      "description":"\n\n This calls the widget's `:layout` callback and caches the result for later\n use.  Never call `:layout` directly, but always through this function!\n However, normally there shouldn't be any reason why you need to use this\n function.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(parent, context, widget, width, height)",
      "tags":[],
      "lineno":566
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Handle a button event on a widget.",
      "name":"wibox.widget.base.handle_button",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This is used internally and should not be called directly.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":586
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"mat",
        "3":"width",
        "4":"height",
        "map":{
          "width":" The width of the widget in its own coordinate system.\n   That is, after applying the transformation matrix.",
          "widget":" The widget that should be placed.",
          "height":" The height of the widget in its own coordinate system.\n   That is, after applying the transformation matrix.",
          "mat":" A matrix transforming from the parent widget's coordinate\n   system. For example, use matrix.create_translate(1, 2) to draw a\n   widget at position (1, 2) relative to the parent widget."
        }
      },
      "summary":"Create widget placement information.",
      "name":"wibox.widget.base.place_widget_via_matrix",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":[],
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "width":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "mat":[]
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":[],
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "width":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "mat":[]
        }
      },
      "description":" This should be used in a widget's\n `:layout()` callback.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(widget, mat, width, height)",
      "tags":[],
      "lineno":635
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"x",
        "3":"y",
        "4":"width",
        "5":"height",
        "map":{
          "x":" The x coordinate for the widget.",
          "y":" The y coordinate for the widget.",
          "widget":" The widget that should be placed.",
          "height":" The height of the widget in its own coordinate system.\n   That is, after applying the transformation matrix.",
          "width":" The width of the widget in its own coordinate system.\n   That is, after applying the transformation matrix."
        }
      },
      "summary":"Create widget placement information.",
      "name":"wibox.widget.base.place_widget_at",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "x":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "width":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"number"
          },
          "x":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "widget":{
            "type":"widget"
          },
          "height":{
            "type":"number"
          },
          "width":{
            "type":"number"
          }
        }
      },
      "description":" This should be used for a widget's\n `:layout()` callback.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(widget, x, y, width, height)",
      "tags":[],
      "lineno":657
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" A table containing the widget's disposition."
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"wibox.widget.base:setup",
      "modifiers":{
        "return":[],
        "hidden":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "args":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "args":{
            "type":"table"
          }
        }
      },
      "description":"\n\n See [The declarative layout system](../documentation/03-declarative-layout.md.html).",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "hidden":[""]
      },
      "lineno":780
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" A table containing the widgets disposition."
        }
      },
      "summary":"Create a widget from a declarative description.",
      "name":"wibox.widget.base.make_widget_declarative",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "args":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "args":{
            "type":"table"
          }
        }
      },
      "description":"\n\n See [The declarative layout system](../documentation/03-declarative-layout.md.html).",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(args)",
      "tags":[],
      "lineno":807
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"wdg",
        "2":"...",
        "map":{
          "wdg":" The value.",
          "...":" Arguments passed to the contructor (if any)."
        }
      },
      "summary":"Create a widget from an undetermined value.",
      "name":"wibox.widget.base.make_widget_from_value",
      "modifiers":{
        "return":[{
            "type":"widget|nil"
          }],
        "param":{
          "1":[],
          "2":{
            "optchain":"nil",
            "opt":"nil"
          },
          "wdg":[],
          "...":{
            "optchain":"nil",
            "opt":"nil"
          }
        },
        "field":{
          "1":[],
          "2":{
            "optchain":"nil",
            "opt":"nil"
          },
          "wdg":[],
          "...":{
            "optchain":"nil",
            "opt":"nil"
          }
        }
      },
      "description":"\n\n The value can be:\n\n * A widget (in which case nothing new is created)\n * A declarative construct\n * A constructor function\n * A metaobject\n",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(wdg[, ...=nil])",
      "tags":[],
      "lineno":853
    },{
      "parameter":"field",
      "params":{
        "1":"proxy",
        "2":"widget_name",
        "3":"args",
        "map":{
          "proxy":" If this is set, the returned widget will be a\n   proxy for this widget. It will be equivalent to this widget.\n   This means it looks the same on the screen.",
          "args.class":" The widget class",
          "args":" Widget settings",
          "args.enable_properties":" Enable automatic getter\n   and setter methods.",
          "widget_name":" Name of the widget.  If not set, it will be\n   set automatically via @{gears.object.modulename}."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"table",
            "opt":"nil"
          },
          "proxy":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "args.class":{
            "type":"table",
            "opt":"nil"
          },
          "args":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "args.enable_properties":{
            "type":"boolean",
            "opt":"false"
          },
          "widget_name":{
            "optchain":true,
            "type":"string",
            "opt":true
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"string",
            "opt":true
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"table",
            "opt":"nil"
          },
          "proxy":{
            "optchain":true,
            "type":"widget",
            "opt":true
          },
          "args.class":{
            "type":"table",
            "opt":"nil"
          },
          "args":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "args.enable_properties":{
            "type":"boolean",
            "opt":"false"
          },
          "widget_name":{
            "optchain":true,
            "type":"string",
            "opt":true
          }
        }
      },
      "description":"\n\n See [Creating new widgets](../documentation/04-new-widgets.md.html).",
      "tags":{
        "see":[]
      },
      "section":"constructorfct",
      "inferred":true,
      "subparams":{
        "args":["args.enable_properties","args.class"]
      },
      "summary":"Create an empty widget skeleton.",
      "name":"wibox.widget.base.make_widget",
      "type":"constructorfct",
      "args":"([proxy[, widget_name[, args={}]]])",
      "kind":"constructors",
      "lineno":886
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Generate an empty widget which takes no space and displays nothing.",
      "name":"wibox.widget.base.empty_widget",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"()",
      "tags":[],
      "lineno":990
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Do some sanity checking on a widget.",
      "name":"wibox.widget.base.check_widget",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This function raises an error if the widget is not valid.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":998
    }],
  "lineno":8
}