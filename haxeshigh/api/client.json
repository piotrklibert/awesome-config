{
  "inferred":true,
  "kind":"core_components",
  "description":"\n\n Clients are the name used by Awesome (and X11) to refer to a window.\n\n A program can have multiple clients (e.g. for dialogs) or none at all (e.g.\n command line applications).\n Clients are usually grouped by classes.\n A class is the name used by X11 to help the window manager distinguish\n between windows and write rules for them.  A client's behavior is also\n defined by its `type` and `size_hints` properties.\n See the `xprop` command line application to query properties for a client.\n\n ![Client geometry](../images/client_geo.svg)\n\n The client's `:geometry()` function returns a table with *x*, *y*, *width*\n and *height*.  The area returned **excludes the border width**.\n All clients also have a `shape_bounding` and `shape_clip` used to \"crop\" the\n client's content.\n Finally, each clients can have titlebars (see `awful.titlebar`).\n\n Additionally to the classes described here, one can also use signals as\n described in @{signals} and X properties as described in @{xproperties}.\n\n Some signal names are starting with a dot. These dots are artefacts from\n the documentation generation, you get the real signal name by\n removing the starting dot.\n\n Accessing client objects can be done in multiple ways depending on the\n context.\n To get the currently focused client:\n\n    local c = client.focus\n    if c then\n        -- do something\n    end\n\n To get a list of all clients, use `client:get`:\n\n    for _, c in ipairs(client.get()) do\n        -- do something\n    end\n\n To execute a callback when a new client is added, use the `manage` signal:\n\n    client.connect_signal(\"request::manage\", function(c)\n        -- do something\n    end)\n\n To be notified when a property of a client changed:\n\n    client.connect_signal(\"property::name\", function(c)\n        -- do something\n    end)\n\n To be notified when a property of a specific client `c` changed:\n\n    c:connect_signal(\"property::name\", function()\n        -- do something\n    end)\n\n To get all the clients for a screen use either `screen.clients` or\n `screen.tiled_clients`.\n\n \n \n ![Usage example](../images/AUTOGEN_uml_nav_tables_client.svg)\n \n \n",
  "summary":"A process window.",
  "sections":{
    "by_name":[]
  },
  "name":"client",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2008-2009 Julien Danjou"
  },
  "type":"coreclassmod",
  "package":"",
  "file":"/home/cji/portless/awesome/build/objects/client.c",
  "mod_name":"client",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Client class.",
      "name":"awful.client.object",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This table allow to add more dynamic properties to the clients. For example,\n doing:\n\n     function awful.client.object.set_my_cool_property(c, value)\n         -- Some logic code\n         c._my_secret_my_cool_property = value\n         c:emit_signal(\"property::my_cool_property)\n     end\n\n     function awful.client.object.get_my_cool_property()\n         return c._my_secret_my_cool_property\n     end\n\n Will add a new \"my_cool_property\" dyanmic property to all client. These\n methods will be called when an user does `c.my_cool_property = \"something\"`\n or set them in `awdul.rules`.\n\n Note that doing this isn't required to set random properties to the client,\n it is only useful when setting or getting these properties require code to\n executed.\n",
      "type":"table",
      "section":"table",
      "kind":"tables",
      "args":"()",
      "tags":[],
      "lineno":134
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted when AwesomeWM is about to scan for existing clients.",
      "name":"scanning",
      "modifiers":{
        "return":[],
        "field":[],
        "classsignal":[[]]
      },
      "description":"\n\n Connect to this signal when code needs to be executed after screens are\n initialized, but before clients are added.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":{
        "classsignal":[""]
      },
      "lineno":142
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted when AwesomeWM is done scanning for clients.",
      "name":"scanned",
      "modifiers":{
        "return":[],
        "field":[],
        "classsignal":[[]]
      },
      "description":"\n\n This is emitted before the `startup` signal and after the `scanning` signal.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":{
        "classsignal":[""]
      },
      "lineno":147
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted when a client gains focus.",
      "name":"focus",
      "modifiers":{
        "return":[],
        "field":[],
        "classsignal":[[]]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":{
        "classsignal":[""]
      },
      "lineno":153
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted before `request::manage`, after `request::unmanage`,\n and when clients swap.",
      "name":"list",
      "modifiers":{
        "return":[],
        "field":[],
        "classsignal":[[]]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":{
        "classsignal":[""]
      },
      "lineno":159
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"client",
        "2":"is_source",
        "map":{
          "client":" The other client",
          "is_source":" If self is the source or the destination of the swap"
        }
      },
      "summary":"Emitted when 2 clients are swapped",
      "name":"swapped",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"boolean"
          },
          "client":{
            "type":"client"
          },
          "is_source":{
            "type":"boolean"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"boolean"
          },
          "client":{
            "type":"client"
          },
          "is_source":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(client, is_source)",
      "tags":[],
      "lineno":178
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"context",
        "3":"hints",
        "map":{
          "hints":" More metadata (currently empty, it exists for compliance\n  with the other `request::` signals).",
          "c":" The client.",
          "context":" What created the client. It is currently either \"new\"\n  or \"startup\"."
        }
      },
      "summary":"Emitted when a new client appears and gets managed by Awesome.",
      "name":"request::manage",
      "modifiers":{
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"table"
          },
          "hints":{
            "type":"table"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        },
        "classsignal":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"table"
          },
          "hints":{
            "type":"table"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        },
        "request":[[]]
      },
      "description":"\n\n This request should be implemented by code which track the client. It isn't\n recommended to use this to initialize the client content. This use case is\n a better fit for `ruled.client`, which has built-in dependency management.\n Using this request to mutate the client state will likely conflict with\n `ruled.client`.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(c, context, hints)",
      "tags":{
        "classsignal":[""],
        "request":["client border added granted When a new client needs a its initial\n  border settings."]
      },
      "lineno":198
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"context",
        "3":"hints",
        "map":{
          "hints":" More metadata (currently empty, it exists for compliance\n  with the other `request::` signals).",
          "c":" The client.",
          "context":" Why was the client unmanaged."
        }
      },
      "summary":"Emitted when a client is going away.",
      "name":"request::unmanage",
      "modifiers":{
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"table"
          },
          "hints":{
            "type":"table"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"table"
          },
          "hints":{
            "type":"table"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        },
        "classsignal":[[]]
      },
      "description":"\n\n Each places which store `client` objects in non-weak table or whose state\n depend on the current client should answer this request.\n\n The contexts are:\n\n * **user**: `c:unmanage()` was called.\n * **reparented**: The window was reparented to another window. It is no\n   longer a stand alone client.\n * **destroyed**: The window was closed.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(c, context, hints)",
      "tags":{
        "classsignal":[""]
      },
      "lineno":202
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Use `request::manage`.",
      "name":"manage",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"deprecatedsignal",
      "section":"deprecatedsignal",
      "kind":"deprecated signals",
      "args":"()",
      "tags":[],
      "lineno":206
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Use `request::unmanage`.",
      "name":"unmanage",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"deprecatedsignal",
      "section":"deprecatedsignal",
      "kind":"deprecated signals",
      "args":"()",
      "tags":[],
      "lineno":210
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted when a mouse button is pressed in a client.",
      "name":"button::press",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":215
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted when a mouse button is released in a client.",
      "name":"button::release",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":220
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted when the mouse enters a client.",
      "name":"mouse::enter",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":225
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted when the mouse leaves a client.",
      "name":"mouse::leave",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":231
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted when the mouse moves within a client.",
      "name":"mouse::move",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":269
    },{
      "inferred":true,
      "subparams":{
        "hints":["hints.raise"]
      },
      "parameter":"field",
      "params":{
        "1":"context",
        "2":"hints",
        "map":{
          "hints":" A table with additional hints:",
          "hints.raise":" should the client be raised?",
          "context":" The context where this signal was used."
        }
      },
      "summary":"Emitted when a client should get activated (focused and/or raised).",
      "name":"request::activate",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "3":{
            "type":"boolean",
            "opt":"false"
          },
          "hints":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "hints.raise":{
            "type":"boolean",
            "opt":"false"
          },
          "context":{
            "type":"string"
          }
        },
        "classsignal":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "3":{
            "type":"boolean",
            "opt":"false"
          },
          "hints":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "hints.raise":{
            "type":"boolean",
            "opt":"false"
          },
          "context":{
            "type":"string"
          }
        },
        "request":[[]]
      },
      "description":"\n\n **Contexts are:**\n\n * *ewmh*: When a client asks for focus (from `X11` events).\n * *autofocus.check_focus*: When autofocus is enabled (from\n   `awful.autofocus`).\n * *autofocus.check_focus_tag*: When autofocus is enabled\n   (from `awful.autofocus`).\n * *client.jumpto*: When a custom lua extension asks a client to be focused\n   (from `client.jump_to`).\n * *client.swap.global_bydirection*: When client swapping requires a focus\n   change (from `awful.client.swap.bydirection`).\n * *client.movetotag*: When a client is moved to a new tag\n   (from `client.move_to_tag`).\n * *client.movetoscreen*: When the client is moved to a new screen\n   (from `client.move_to_screen`).\n * *client.focus.byidx*: When selecting a client using its index\n   (from `awful.client.focus.byidx`).\n * *client.focus.history.previous*: When cycling through history\n   (from `awful.client.focus.history.previous`).\n * *menu.clients*: When using the builtin client menu\n   (from `awful.menu.clients`).\n * *rules*: When a new client is focused from a rule (from `ruled.client`).\n * *screen.focus*: When a screen is focused (from `awful.screen.focus`).\n\n Default implementation: `awful.ewmh.activate`.\n\n To implement focus stealing filters see `awful.ewmh.add_activate_filter`.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(context[, hints])",
      "tags":{
        "classsignal":[""],
        "request":["client activate ewmh granted When the client asks to be activated."]
      },
      "lineno":290
    },{
      "inferred":true,
      "subparams":{
        "hints":["hints.raise"]
      },
      "parameter":"field",
      "params":{
        "1":"context",
        "2":"hints",
        "map":{
          "hints":" A table with additional hints:",
          "hints.raise":" should the client be raised?",
          "context":" The context where this signal was used."
        }
      },
      "summary":"Emitted when an event could lead to the client being activated.",
      "name":"request::autoactivate",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "3":{
            "type":"boolean",
            "opt":"false"
          },
          "hints":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "hints.raise":{
            "type":"boolean",
            "opt":"false"
          },
          "context":{
            "type":"string"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "3":{
            "type":"boolean",
            "opt":"false"
          },
          "hints":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "hints.raise":{
            "type":"boolean",
            "opt":"false"
          },
          "context":{
            "type":"string"
          }
        },
        "classsignal":[[]]
      },
      "description":"\n\n This is an layer \"on top\" of `request::activate` for event which are not\n actual request for activation/focus, but where \"it would be nice\" if the\n client got the focus. This includes the focus-follow-mouse model and focusing\n previous clients when the selected tag changes.\n\n This idea is that `request::autoactivate` will emit `request::activate`.\n However it is much easier to replace the handler for `request::autoactivate`\n than it is to replace the handler for `request::activate`. Thus it provides\n a nice abstraction to simplify handling the focus when switching tags or\n moving the mouse.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(context[, hints])",
      "tags":{
        "classsignal":[""]
      },
      "lineno":305
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"context",
        "3":"Additional",
        "map":{
          "Additional":" arguments. Each context handler may\n   interpret this differently.",
          "c":" The client",
          "context":" Why and what to resize. This is used for the\n   handlers to know if they are capable of applying the new geometry."
        }
      },
      "summary":"Emitted when something request a client's geometry to be modified.",
      "name":"request::geometry",
      "modifiers":{
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "Additional":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        },
        "classsignal":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "Additional":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":{
            "type":"client"
          },
          "context":{
            "type":"string"
          }
        },
        "request":[[],[]]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(c, context[, Additional={}])",
      "tags":{
        "classsignal":[""],
        "request":["client geometry client_maximize_horizontal granted When a client\n  (programmatically) asks for the maximization to be changed.","client geometry client_maximize_vertical granted When a client\n  (programmatically) asks for the maximization to be changed."]
      },
      "lineno":312
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The client requesting a new tag."
        }
      },
      "summary":"Emitted when a client requests to be moved to a tag or needs a new tag.",
      "name":"request::tag",
      "modifiers":{
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "classsignal":[[]]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(c)",
      "tags":{
        "classsignal":[""]
      },
      "lineno":331
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The client whose property changed."
        }
      },
      "summary":"Emitted when any client's `urgent` property changes.",
      "name":"request::urgent",
      "modifiers":{
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "classsignal":[[]]
      },
      "description":"\n\n Emitted both when `urgent = true` and `urgent = false`, so you will likely\n want to check `c.urgent` within the signal callback.\n\n    client.connect_signal(\"property::urgent\", function(c)\n        if c.urgent then\n            naughty.notify {\n                title = \"Urgent client\",\n                message = c.name,\n            }\n        end\n    end)\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(c)",
      "tags":{
        "classsignal":[""]
      },
      "lineno":345
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"context",
        "map":{
          "context":" The reason why the signal was sent (currently always\n  `startup`)."
        }
      },
      "summary":"Emitted once to request default client mousebindings during the initial\n startup sequence.",
      "name":"request::default_mousebindings",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "classsignal":[[]]
      },
      "description":"\n\n This signal gives all modules a chance to register their default client\n mousebindings.\n They will then be added to all new clients, unless rules overwrite them via\n the `buttons` property.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(context)",
      "tags":{
        "classsignal":[""]
      },
      "lineno":359
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"context",
        "map":{
          "context":" The reason why the signal was sent (currently always"
        }
      },
      "summary":"Emitted once to request default client keybindings during the initial\n startup sequence.",
      "name":"request::default_keybindings",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "request":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "classsignal":[[]]
      },
      "description":"\n\n This signal gives all modules a chance to register their default client\n keybindings.\n They will then be added to all new clients, unless rules overwrite them via\n the `keys` property.\n",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(context)",
      "tags":{
        "request":["client default_keybindings startup granted Sent when AwesomeWM starts."],
        "classsignal":[""]
      },
      "lineno":364
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag object."
        }
      },
      "summary":"Emitted when a client gets tagged.",
      "name":"tagged",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(t)",
      "tags":[],
      "lineno":368
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Emitted when a client gets unfocused.",
      "name":"unfocus",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":373
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"t",
        "map":{
          "t":" The tag object."
        }
      },
      "summary":"Emitted when a client gets untagged.",
      "name":"untagged",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "t":{
            "type":"tag"
          }
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(t)",
      "tags":[],
      "lineno":385
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[],[],[],[],[]],
        "return":[],
        "field":[]
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"Emitted when the client is raised within its layer.",
      "name":"raised",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":396
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[],[],[],[],[]],
        "return":[],
        "field":[]
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"Emitted when the client is lowered within its layer.",
      "name":"lowered",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":428
    },{
      "parameter":"field",
      "params":{
        "1":"focus",
        "map":{
          "focus":""
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "field":{
          "1":{
            "type":"client"
          },
          "focus":{
            "type":"client"
          }
        }
      },
      "description":"\n\n It is not recommended to set the focused client using\n this property. Please use @{client.activate} instead of\n `client.focus = c`. Setting the focus directly bypasses\n all the filters and emits fewer signals, which tend to\n cause unwanted side effects and make it harder to alter\n the code behavior in the future. It usually takes *more*\n code to use this rather than @{client.activate} because all\n the boilerplate code (such as `c:raise()`) needs to be\n added everywhere.\n\n The main use case for this field is to check *when* there\n is an active client.\n\n     if client.focus ~= nil then\n         -- do something\n     end\n\n If you want to check if a client is active, use:\n\n     if c.active then\n         -- do something\n     end\n",
      "tags":{
        "see":[]
      },
      "section":"field",
      "inferred":true,
      "subparams":[],
      "summary":"The focused `client` or nil (in case there is none).",
      "name":"focus",
      "type":"field",
      "args":"(focus)",
      "kind":"fields",
      "lineno":441
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"window",
        "map":{
          "window":""
        }
      },
      "summary":"The X window id.",
      "name":"window",
      "modifiers":{
        "field":{
          "1":{
            "type":"integer"
          },
          "window":{
            "type":"integer"
          }
        },
        "return":[],
        "readonly":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"integer"
          },
          "window":{
            "type":"integer"
          }
        }
      },
      "description":"\n\n This is rarely useful, but some DBus protocols will\n have this ID in their API, so it can be useful when\n writing AwesomeWM bindings for them.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(window)",
      "tags":{
        "readonly":[""],
        "propemits":["false false"]
      },
      "lineno":454
    },{
      "parameter":"field",
      "params":{
        "1":"name",
        "map":{
          "name":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"string"
          },
          "name":{
            "type":"string"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "name":{
            "type":"string"
          }
        }
      },
      "description":"\n\n This is the text which will be shown in `awful.widget.tasklist`\n and `awful.titlebar.widget.titlewidget`.\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client title.",
      "name":"name",
      "type":"property",
      "args":"(name)",
      "kind":"object properties",
      "lineno":482
    },{
      "parameter":"field",
      "params":{
        "1":"skip_taskbar",
        "map":{
          "skip_taskbar":""
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "skip_taskbar":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "skip_taskbar":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"\n\n Some clients, like docked bars or some `sticky` clients\n such as wallpaper sensors like Conky have no value in\n the `awful.widget.tasklist` and should not be shown there.\n\n The default value of this property reflects the value of the\n `_NET_WM_STATE_SKIP_TASKBAR` X11 protocol xproperty. Clients can modify this\n state through this property.\n\n \n \n ![Usage example](../images/AUTOGEN_awful_client_skip_tasklist1.svg)\n \n  \n    c1.skip_taskbar = false\n    c2.skip_taskbar = true\n    c3.skip_taskbar = false\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"True if the client does not want to be in taskbar.",
      "name":"skip_taskbar",
      "type":"property",
      "args":"([skip_taskbar=false])",
      "kind":"object properties",
      "lineno":523
    },{
      "parameter":"field",
      "params":{
        "1":"type",
        "map":{
          "type":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "type":{
            "type":"string"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "type":{
            "type":"string"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n This is useful in, among other places, the `ruled.client` rules to apply\n different properties depending on the client types. It is also used\n throughout the API to alter the client (and `wibox`) behavior depending on\n the `type`. For example, clients with the `dock` type are placed on the side\n of the screen while other like `combo` are totally ignored and never\n considered `client`s in the first place.\n\n Valid types are:\n\n <table class='widget_list' border=1>\n <tr style='font-weight: bold;'>\n  <th align='center'>Name</th>\n  <th align='center'>Description</th>\n </tr>\n <tr><td><b>desktop</b></td><td>The root client, it cannot be moved or resized.</td></tr>\n <tr><td><b>dock</b></td><td>A client attached to the side of the screen.</td></tr>\n <tr><td><b>splash</b></td><td>A client, usually without titlebar shown when an application starts.</td></tr>\n <tr><td><b>dialog</b></td><td>A dialog, see `transient_for`.</td></tr>\n <tr><td><b>menu</b></td><td>A context menu.</td></tr>\n <tr><td><b>toolbar</b></td><td>A floating toolbar.</td></tr>\n <tr><td><b>utility</b></td><td></td></tr>\n <tr><td><b>dropdown_menu</b></td><td>A context menu attached to a parent position.</td></tr>\n <tr><td><b>popup_menu</b></td><td>A context menu.</td></tr>\n <tr><td><b>notification</b></td><td>A notification popup.</td></tr>\n <tr><td><b>combo</b></td><td>A combobox list menu.</td></tr>\n <tr><td><b>dnd</b></td><td>A drag and drop indicator.</td></tr>\n <tr><td><b>normal</b></td><td>A normal application main window.</td></tr>\n </table>\n\n More information can be found [here](https://specifications.freedesktop.org/wm-spec/wm-spec-latest.html#idm140200472629520)\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The window type.",
      "name":"type",
      "type":"property",
      "args":"(type)",
      "kind":"object properties",
      "lineno":553
    },{
      "parameter":"field",
      "params":{
        "1":"class",
        "map":{
          "class":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"string"
          },
          "class":{
            "type":"string"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "class":{
            "type":"string"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n A class usually maps to the application name. It is useful in, among other\n places, the rules to apply different properties to different clients. It\n is also useful, along with `instance`, to implement \"windows counter\"\n used in many popular docks and Alt-Tab like popups.\n\n To get a client class from the command line, use the command:\n\n    xprop WM_CLASS\n\n The class will be the second string.\n\n This *should* never change after the client is created, but some\n buggy application like the Spotify desktop client are known to\n violate the specification and do it anyway. There *is* a signal for\n this property, but it should hopefully never be useful. If your\n applications change their classes, please report a bug to them\n and point to ICCCM §4.1.2.5.\n It tends to break `ruled.client` and other AwesomeWM APIs.\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client class.",
      "name":"class",
      "type":"property",
      "args":"(class)",
      "kind":"object properties",
      "lineno":580
    },{
      "parameter":"field",
      "params":{
        "1":"instance",
        "map":{
          "instance":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"string"
          },
          "instance":{
            "type":"string"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "instance":{
            "type":"string"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n The `instance` is a subtype of the `class`. Each `class` can have\n multiple instances. This is useful in the `ruled.client` rules to\n filter clients and apply different properties to them.\n\n To get a client instance from the command line, use the command:\n\n     xprop WM_CLASS\n\n The instance will be the first string.\n\n This *should* never change after the client is created. There\n *is* a signal for * this property, but it should hopefully never\n be useful. If your applications change their classes, please\n report a bug to them and point to ICCCM §4.1.2.5.\n It tends to break `ruled.client` and other AwesomeWM APIs.\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client instance.",
      "name":"instance",
      "type":"property",
      "args":"(instance)",
      "kind":"object properties",
      "lineno":591
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"pid",
        "map":{
          "pid":""
        }
      },
      "summary":"The client PID, if available.",
      "name":"pid",
      "modifiers":{
        "field":{
          "1":{
            "type":"integer"
          },
          "pid":{
            "type":"integer"
          }
        },
        "return":[],
        "readonly":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"integer"
          },
          "pid":{
            "type":"integer"
          }
        }
      },
      "description":"\n\n This will never change.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(pid)",
      "tags":{
        "readonly":[""],
        "propemits":["false false"]
      },
      "lineno":602
    },{
      "parameter":"field",
      "params":{
        "1":"role",
        "map":{
          "role":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"string"
          },
          "role":{
            "type":"string"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "role":{
            "type":"string"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The window role, if available.",
      "name":"role",
      "type":"property",
      "args":"(role)",
      "kind":"object properties",
      "lineno":621
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"machine",
        "map":{
          "machine":""
        }
      },
      "summary":"The machine the client is running on.",
      "name":"machine",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "machine":{
            "type":"string"
          }
        },
        "return":[],
        "readonly":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "machine":{
            "type":"string"
          }
        }
      },
      "description":"\n\n X11 windows can \"live\" in one computer but be shown\n in another one. This is called \"network transparency\"\n and is either used directly by allowing remote windows\n using the `xhosts` command or using proxies such as\n `ssh -X` or `ssh -Y`.\n\n According to EWMH, this property contains the value\n returned by `gethostname()` on the computer that the\n client is running on.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(machine)",
      "tags":{
        "readonly":[""],
        "propemits":["false false"]
      },
      "lineno":630
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"icon_name",
        "map":{
          "icon_name":""
        }
      },
      "summary":"The client name when iconified.",
      "name":"icon_name",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "icon_name":{
            "type":"string"
          }
        },
        "return":[],
        "readonly":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "icon_name":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(icon_name)",
      "tags":{
        "readonly":[""],
        "propemits":["false false"]
      },
      "lineno":663
    },{
      "parameter":"field",
      "params":{
        "1":"icon",
        "map":{
          "icon":""
        }
      },
      "modifiers":{
        "see":[[]],
        "usage":[[]],
        "field":{
          "1":{
            "type":"surface"
          },
          "icon":{
            "type":"surface"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"surface"
          },
          "icon":{
            "type":"surface"
          }
        }
      },
      "description":"\n\n This property holds the client icon closest to the size configured via\n @{awesome.set_preferred_icon_size}.\n\n It is not a path or a \"real\" file. Rather, it is already a bitmap surface.\n\n Typically you would want to use @{awful.widget.clienticon} to get this as a\n widget.\n\n Working with icons is tricky because their surfaces do not use reference\n counting correctly. If `gears.surface(c.icon)` is called multiple time on\n the same icon, it will cause a double-free error and Awesome will crash. To\n get a copy of the icon, you can use:\n\n    local s = gears.surface(c.icon)\n    local img = cairo.ImageSurface.create(cairo.Format.ARGB32, s:get_width(), s:get_height())\n    local cr  = cairo.Context(img)\n    cr:set_source_surface(s, 0, 0)\n    cr:paint()\n\n (Note that `awesome.set_preferred_icon_size` defaults to `0` if it wasn't\n set. It means that, by default, the preferred icon provided will be the\n smallest available)\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client icon as a surface.",
      "name":"icon",
      "kind":"object properties",
      "usage":["local ib = wibox.widget.imagebox(c.icon)\n"],
      "args":"(icon)",
      "type":"property",
      "lineno":683
    },{
      "parameter":"field",
      "params":{
        "1":"sizes",
        "map":{
          "sizes":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"table"
          },
          "sizes":{
            "type":"table"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "sizes":{
            "type":"table"
          }
        },
        "propemits":[[]]
      },
      "description":" This is a table where each entry\n contains the width and height of an icon.\n\n Example:\n\n    {\n      { 24, 24 },\n      { 32, 32 },\n      { 64, 64 },\n    }\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The available sizes of client icons.",
      "name":"icon_sizes",
      "type":"property",
      "args":"(sizes)",
      "kind":"object properties",
      "lineno":714
    },{
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"screen"
          },
          "screen":{
            "type":"screen"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"screen"
          },
          "screen":{
            "type":"screen"
          }
        }
      },
      "description":"\n\n The `screen` corresponds to the top-left corner of the window.\n\n Please note that clients can only be on one screen at once. X11\n does not natively allow clients to be in multiple locations at\n once. Changing the screen directly will affect the tags and may\n cause several other changes to the state in order to ensure that\n a client's position and its screen are consistent.\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_screen.svg)\n \n  \n   \n      -- Move the mouse to screen 3\n      mouse.coords {x = 1800, y = 100 }\n       \n      -- Spawn a client on screen #3\n      awful.spawn(&#34firefox&#34)\n   \n      client.get()[1].screen = screen[2]\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Client screen.",
      "name":"screen",
      "type":"property",
      "args":"(screen)",
      "kind":"object properties",
      "lineno":725
    },{
      "parameter":"field",
      "params":{
        "1":"hidden",
        "map":{
          "hidden":""
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "hidden":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "hidden":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Define if the client must be hidden (Never mapped, invisible in taskbar).",
      "name":"hidden",
      "type":"property",
      "args":"(hidden)",
      "kind":"object properties",
      "lineno":759
    },{
      "parameter":"field",
      "params":{
        "1":"minimized",
        "map":{
          "minimized":""
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "minimized":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "minimized":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n Minimized clients are still part of tags and screens, but\n they are not displayed. You can unminimize using `c.minimized = false`,\n but if you also want to set the focus, it is better to use:\n\n    c:activate { context = \"unminimized\", raise = true }\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_minimize1.svg)\n \n  \n      for _ = 1, 3 do\n          awful.spawn(&#34&#34)\n      end\n   \n     client.get()[1].minimized = true\n   \n     -- That's the best way to unminimize if you also want to set the focus.\n     client.get()[1]:activate {\n         context = &#34unminimize&#34,\n         raise   = true,\n     }\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Define if the client must be iconified (Only visible in taskbar).",
      "name":"minimized",
      "type":"property",
      "args":"(minimized)",
      "kind":"object properties",
      "lineno":774
    },{
      "parameter":"field",
      "params":{
        "1":"size_hints_honor",
        "map":{
          "size_hints_honor":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "size_hints_honor":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "size_hints_honor":{
            "type":"boolean"
          }
        }
      },
      "description":" respect size ratio.\n\n For example, a terminal such as `xterm` require the client size to be a\n multiple of the character size. Honoring size hints will cause the terminal\n window to have a small gap at the bottom.\n\n This is enabled by default. To disable it by default, see `ruled.client`.\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Honor size hints, e.g.",
      "name":"size_hints_honor",
      "type":"property",
      "args":"(size_hints_honor)",
      "kind":"object properties",
      "lineno":822
    },{
      "parameter":"field",
      "params":{
        "1":"border_width",
        "map":{
          "border_width":""
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "border_width":{
            "type":"integer"
          }
        },
        "usebeautiful":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"integer"
          },
          "border_width":{
            "type":"integer"
          }
        }
      },
      "description":"\n\n When manually set (for example, in `ruled.client` rules), this value\n will be static. Otherwise, it is controlled by many `beautiful` variables.\n\n Be careful, the borders are **around** the geometry, not part of it. If\n you want more fancy border, use the `awful.titlebar` API to create\n titlebars on each side of the client.\n\n \n \n ![Usage example](../images/AUTOGEN_awful_client_border_width.svg)\n \n  \n    c1.border_width = 0\n    c2.border_width = 2\n    c3.border_width = 10\n",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.border_width_active","beautiful.border_width_normal","beautiful.border_width_new","beautiful.border_width_urgent","beautiful.border_width_floating","beautiful.border_width_floating_active","beautiful.border_width_floating_normal","beautiful.border_width_floating_new","beautiful.border_width_floating_urgent","beautiful.border_width_maximized","beautiful.border_width_maximized_active","beautiful.border_width_maximized_normal","beautiful.border_width_maximized_new","beautiful.border_width_maximized_urgent","beautiful.border_width_fullscreen","beautiful.border_width_fullscreen_active","beautiful.border_width_fullscreen_normal","beautiful.border_width_fullscreen_new","beautiful.border_width_fullscreen_urgent","beautiful.fullscreen_hide_border Hide the border on fullscreen clients.","beautiful.maximized_hide_border Hide the border on maximized clients."],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width.",
      "name":"border_width",
      "type":"property",
      "args":"(border_width)",
      "kind":"object properties",
      "lineno":880
    },{
      "parameter":"field",
      "params":{
        "1":"border_color",
        "map":{
          "border_color":" Any string, gradient or pattern definition that\n  can be converted to a cairo pattern."
        }
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "field":{
          "1":{
            "type":"color"
          },
          "border_color":{
            "type":"color"
          }
        },
        "usebeautiful":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"color"
          },
          "border_color":{
            "type":"color"
          }
        }
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_awful_client_border_color.svg)\n \n  \n      c.border_color = &#34#ff00ff&#34\n\n Note that setting this directly will override and disable all related theme\n variables.\n\n Setting a transparent color (e.g. to implement dynamic borders without size\n changes) is supported, but requires the color to be set to `#00000000`\n specifically. Other RGB colors with an alpha of `0` won't work.\n",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.border_color_marked The fallback color when the\n  client is marked.","beautiful.border_color_active The fallback color when the\n  client is active (focused).","beautiful.border_color_normal The fallback color when the\n  client isn't active/floating/new/urgent/maximized/floating/fullscreen.","beautiful.border_color_new The fallback color when the\n  client is new.","beautiful.border_color_urgent The fallback color when the\n  client is urgent.","beautiful.border_color_floating The fallback color when the\n  client is floating and the other colors are not set.","beautiful.border_color_floating_active The color when the\n  client is floating and is active (focused).","beautiful.border_color_floating_normal The color when the\n  client is floating and not new/urgent/active.","beautiful.border_color_floating_new","beautiful.border_color_floating_urgent The color when the\n  client is floating and urgent.","beautiful.border_color_maximized","beautiful.border_color_maximized_active","beautiful.border_color_maximized_normal","beautiful.border_color_maximized_new","beautiful.border_color_maximized_urgent The color when the\n  client is urbent and maximized.","beautiful.border_color_fullscreen","beautiful.border_color_fullscreen_active","beautiful.border_color_fullscreen_normal","beautiful.border_color_fullscreen_new","beautiful.border_color_fullscreen_urgent The color when the\n  client is fullscreen and urgent."],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client border color.",
      "name":"border_color",
      "type":"property",
      "args":"(border_color)",
      "kind":"object properties",
      "lineno":953
    },{
      "parameter":"field",
      "params":{
        "1":"urgent",
        "map":{
          "urgent":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "urgent":{
            "type":"boolean"
          }
        },
        "field":{
          "1":{
            "type":"boolean"
          },
          "urgent":{
            "type":"boolean"
          }
        },
        "usebeautiful":[[],[],[],[],[],[],[],[],[],[],[],[],[]],
        "return":[],
        "propemits":[[]],
        "request":[[],[],[]]
      },
      "description":"\n\n The urgent state is the visual equivalent of the \"bell\" noise from\n old computer. It is set by the client when their state changed and\n they need attention. For example, a chat client will set it when\n a new message arrive. Some terminals, like `rxvt-unicode`, will also\n set it when calling the `bell` command.\n\n There is many ways an urgent client can become for visible:\n\n  * Highlight in the `awful.widget.taglist` and `awful.widget.tasklist`\n  * Highlight in the `awful.titlebar`\n  * Highlight of the client border color (or width).\n  * Accessible using `Mod4+u` in the default config.\n  * Emit the `property::urgent` signal.\n\n \n \n ![Usage example](../images/AUTOGEN_awful_client_urgent1.svg)\n \n  \n    -- Affects mostly the taglist and tasklist..\n    beautiful.fg_urgent = &#34#ffffff&#34\n    beautiful.bg_urgent = &#34#ff0000&#34\n     \n    -- Set the client border to be orange and large.\n    beautiful.border_color_urgent = &#34#ffaa00&#34\n    beautiful.border_width_urgent = 6\n     \n    -- Set the titlebar green.\n    beautiful.titlebar_bg_urgent = &#34#00ff00&#34\n    beautiful.titlebar_fg_urgent = &#34#000000&#34\n     \n    -- This client is in the current tag.\n    c2.urgent = true\n     \n    -- This client is in a deselected tag.\n    c4.urgent = true\n",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.border_color_urgent The fallback color when the\n  client is urgent.","beautiful.border_color_floating_urgent The color when the\n  client is floating and urgent.","beautiful.border_color_maximized_urgent The color when the\n  client is urbent and maximized.","beautiful.border_color_fullscreen_urgent The color when the\n  client is fullscreen and urgent.","beautiful.border_width_urgent The fallback border width when\n  the client is urgent.","beautiful.border_width_floating_urgent The border width when\n  the client is floating and urgent.","beautiful.border_width_maximized_urgent The border width when\n  the client is maximized and urgent.","beautiful.border_width_fullscreen_urgent The border width when\n  the client is fullscreen and urgent.","beautiful.titlebar_fg_urgent","beautiful.titlebar_bg_urgent","beautiful.titlebar_bgimage_urgent","beautiful.fg_urgent","beautiful.bg_urgent"],
        "propemits":["false false"],
        "request":["client border active granted When a client becomes active and is no\n  longer urgent.","client border inactive granted When a client stop being active and\n  is no longer urgent.","client border urgent granted When a client stop becomes urgent."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set to `true` when the client ask for attention.",
      "name":"urgent",
      "type":"property",
      "args":"(urgent)",
      "kind":"object properties",
      "lineno":983
    },{
      "parameter":"field",
      "params":{
        "1":"content",
        "map":{
          "content":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"surface"
          },
          "content":{
            "type":"surface"
          }
        },
        "readonly":[[]],
        "param":{
          "1":{
            "type":"surface"
          },
          "content":{
            "type":"surface"
          }
        },
        "return":[]
      },
      "description":"\n\n To get the screenshot, use:\n\n    gears.surface(c.content)\n\n To save it, use:\n\n    gears.surface(c.content):write_to_png(path)\n\n Please note that this only creates a new cairo surface\n referring to the client's content. This means that\n changes to the client's content may or may not become\n visible in the returned surface. If you want to take a\n screenshot, a copy of the surface's content needs to\n be taken. Note that the content of parts of a window\n that are currently not visible are undefined.\n\n The only way to get an animated client screenshot widget is to poll this\n property multiple time per seconds. This is obviously a bad idea.\n\n This property has no signals when the content changes.\n",
      "tags":{
        "see":[],
        "readonly":[""]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"A cairo surface for the client window content.",
      "name":"content",
      "type":"property",
      "args":"(content)",
      "kind":"object properties",
      "lineno":1006
    },{
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" Between 0 (transparent) to 1 (opaque)."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        }
      },
      "description":"\n\n The opacity only works when a compositing manager, such as\n [picom](https://github.com/yshui/picom/), is used. Otherwise,\n the clients will remain opaque.\n\n \n \n ![Usage example](../images/AUTOGEN_awful_client_opacity1.svg)\n \n  \n    c1.opacity = 1\n    c2.opacity = 0.5\n    c3.opacity = 0.1\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity.",
      "name":"opacity",
      "type":"property",
      "args":"(opacity)",
      "kind":"object properties",
      "lineno":1016
    },{
      "parameter":"field",
      "params":{
        "1":"ontop",
        "map":{
          "ontop":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "ontop":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "ontop":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client is on top of every other windows.",
      "name":"ontop",
      "type":"property",
      "args":"(ontop)",
      "kind":"object properties",
      "lineno":1026
    },{
      "parameter":"field",
      "params":{
        "1":"above",
        "map":{
          "above":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "above":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "above":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client is above normal windows.",
      "name":"above",
      "type":"property",
      "args":"(above)",
      "kind":"object properties",
      "lineno":1036
    },{
      "parameter":"field",
      "params":{
        "1":"below",
        "map":{
          "below":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "below":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "below":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client is below normal windows.",
      "name":"below",
      "type":"property",
      "args":"(below)",
      "kind":"object properties",
      "lineno":1062
    },{
      "parameter":"field",
      "params":{
        "1":"fullscreen",
        "map":{
          "fullscreen":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "fullscreen":{
            "type":"boolean"
          }
        },
        "param":{
          "1":{
            "type":"boolean"
          },
          "fullscreen":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "request":[[]]
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_fullscreen.svg)\n \n  \n      screen[1].clients[1].maximized            = true\n      screen[2].clients[1].maximized_vertical   = true\n      screen[3].clients[1].maximized_horizontal = true\n      screen[4].clients[1].fullscreen           = true\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "request":["client geometry fullscreen granted When the client must be resized\n  because it became (or stop being) fullscreen."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client is fullscreen or not.",
      "name":"fullscreen",
      "type":"property",
      "args":"(fullscreen)",
      "kind":"object properties",
      "lineno":1088
    },{
      "parameter":"field",
      "params":{
        "1":"maximized",
        "map":{
          "maximized":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "maximized":{
            "type":"boolean"
          }
        },
        "param":{
          "1":{
            "type":"boolean"
          },
          "maximized":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "request":[[]]
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_maximized.svg)\n \n  \n      screen[1].clients[1].maximized            = true\n      screen[2].clients[1].maximized_vertical   = true\n      screen[3].clients[1].maximized_horizontal = true\n      screen[4].clients[1].fullscreen           = true\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "request":["client geometry maximized granted When the client must be resized\n  because it became (or stop being) maximized."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client is maximized (horizontally and vertically) or not.",
      "name":"maximized",
      "type":"property",
      "args":"(maximized)",
      "kind":"object properties",
      "lineno":1113
    },{
      "parameter":"field",
      "params":{
        "1":"maximized_horizontal",
        "map":{
          "maximized_horizontal":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "maximized_horizontal":{
            "type":"boolean"
          }
        },
        "param":{
          "1":{
            "type":"boolean"
          },
          "maximized_horizontal":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "request":[[]]
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_maximized_horizontal.svg)\n \n  \n      screen[1].clients[1].maximized            = true\n      screen[2].clients[1].maximized_vertical   = true\n      screen[3].clients[1].maximized_horizontal = true\n      screen[4].clients[1].fullscreen           = true\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "request":["client geometry maximized_horizontal granted When the client must be resized\n  because it became (or stop being) maximized horizontally."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client is maximized horizontally or not.",
      "name":"maximized_horizontal",
      "type":"property",
      "args":"(maximized_horizontal)",
      "kind":"object properties",
      "lineno":1138
    },{
      "parameter":"field",
      "params":{
        "1":"maximized_vertical",
        "map":{
          "maximized_vertical":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "maximized_vertical":{
            "type":"boolean"
          }
        },
        "param":{
          "1":{
            "type":"boolean"
          },
          "maximized_vertical":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "request":[[]]
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_maximized_vertical.svg)\n \n  \n      screen[1].clients[1].maximized            = true\n      screen[2].clients[1].maximized_vertical   = true\n      screen[3].clients[1].maximized_horizontal = true\n      screen[4].clients[1].fullscreen           = true\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "request":["client geometry maximized_vertical granted When the client must be resized\n  because it became (or stop being) maximized vertically."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client is maximized vertically or not.",
      "name":"maximized_vertical",
      "type":"property",
      "args":"(maximized_vertical)",
      "kind":"object properties",
      "lineno":1162
    },{
      "parameter":"field",
      "params":{
        "1":"transient_for",
        "map":{
          "transient_for":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "field":{
          "1":{
            "type":"client"
          },
          "transient_for":{
            "type":"client"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"client"
          },
          "transient_for":{
            "type":"client"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n A transient window is a client that \"belongs\" to another\n client. If the client is also `modal`, then  the parent client\n cannot be focused while the child client exists.\n This is common for \"Save as\" dialogs or other dialogs where it\n is not possible to modify the content of the \"parent\" client\n while the dialog is open.\n\n However, `modal` is not a requirement for using the `transient_for`\n concept. \"Tools\" such as popup palette in canvas-and-palettes\n applications can belong to each other without being modal.\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client the window is transient for.",
      "name":"transient_for",
      "type":"property",
      "args":"(transient_for)",
      "kind":"object properties",
      "lineno":1176
    },{
      "parameter":"field",
      "params":{
        "1":"group_window",
        "map":{
          "group_window":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "group_window":{
            "type":"integer"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"integer"
          },
          "group_window":{
            "type":"integer"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n This is the ID of the group window, not a client object.\n The group window is most likely not a visible client, but\n only an invisible and internal window.\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Window identification unique to a group of windows.",
      "name":"group_window",
      "type":"property",
      "args":"(group_window)",
      "kind":"object properties",
      "lineno":1190
    },{
      "parameter":"field",
      "params":{
        "1":"leader_window",
        "map":{
          "leader_window":""
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "type":"number"
          },
          "leader_window":{
            "type":"number"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "leader_window":{
            "type":"number"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n This is the ID of the group window, not a client object.\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Identification unique to windows spawned by the same command.",
      "name":"leader_window",
      "type":"property",
      "args":"(leader_window)",
      "kind":"object properties",
      "lineno":1242
    },{
      "parameter":"field",
      "params":{
        "1":"hints",
        "map":{
          "hints.min_aspect_num":"",
          "hints.max_width":" The maximum width (in pixels).",
          "hints.program_position":" A table with `x` and `y` keys. It\n  contains the preferred position of the client. This is set when the\n  application itself requests a specific position. See `user_position`.",
          "hints.win_gravity":" The client `gravity` defines the corder\n   from which the size is computed. For most clients, it is `north_west`, which\n   corresponds to the top-left of the window. This will affect how the client\n   is resized and other size related operations.",
          "hints.max_height":" The maximum height (in pixels).",
          "hints.user_size":" A table with `width` and `height`. This\n  contains the client preferred size when it has previously been set by\n  the user. See `program_size` for the equivalent when the applications\n  itself wants to specify its preferred size.",
          "hints.min_width":" The minimum width (in pixels).",
          "hints.user_position":" A table with `x` and `y` keys. It\n  contains the preferred position of the client. This is set when the\n  position has been modified by the user. See `program_position`.",
          "hints.max_aspect_den":"",
          "hints.min_height":" The minimum height (in pixels).",
          "hints.max_aspect_num":"",
          "hints.base_width":"",
          "hints":" The hints.",
          "hints.width_inc":" The number of pixels by which the\n  client width may be increased or decreased. For example, for terminals,\n  the size has to be proportional with the monospace font size.",
          "hints.base_height":"",
          "hints.height_inc":" The number of pixels by which the\n  client height may be increased or decreased. For example, for terminals,\n  the size has to be proportional with the monospace font size.",
          "hints.program_size":" A table with `width` and `height`. This\n  contains the client preferred size as specified by the application.",
          "hints.min_aspect_den":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "optchain":true,
            "type":"table|nil",
            "opt":true
          },
          "2":{
            "type":"table|nil",
            "opt":true
          },
          "3":{
            "type":"table|nil",
            "opt":true
          },
          "4":{
            "type":"table|nil",
            "opt":true
          },
          "5":{
            "type":"table|nil",
            "opt":true
          },
          "6":{
            "type":"integer|nil",
            "opt":true
          },
          "7":{
            "type":"integer|nil",
            "opt":true
          },
          "8":{
            "type":"integer|nil",
            "opt":true
          },
          "9":{
            "type":"integer|nil",
            "opt":true
          },
          "10":{
            "type":"integer|nil",
            "opt":true
          },
          "11":{
            "type":"integer|nil",
            "opt":true
          },
          "12":{
            "type":"string|nil",
            "opt":true
          },
          "13":{
            "type":"integer|nil",
            "opt":true
          },
          "14":{
            "type":"integer|nil",
            "opt":true
          },
          "15":{
            "type":"integer|nil",
            "opt":true
          },
          "16":{
            "type":"integer|nil",
            "opt":true
          },
          "17":{
            "type":"integer|nil",
            "opt":true
          },
          "18":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.min_aspect_num":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.max_width":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.program_position":{
            "type":"table|nil",
            "opt":true
          },
          "hints.win_gravity":{
            "type":"string|nil",
            "opt":true
          },
          "hints.max_height":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.user_size":{
            "type":"table|nil",
            "opt":true
          },
          "hints.min_width":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.user_position":{
            "type":"table|nil",
            "opt":true
          },
          "hints.max_aspect_den":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.min_height":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.max_aspect_num":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.base_width":{
            "type":"integer|nil",
            "opt":true
          },
          "hints":{
            "optchain":true,
            "type":"table|nil",
            "opt":true
          },
          "hints.width_inc":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.base_height":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.height_inc":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.program_size":{
            "type":"table|nil",
            "opt":true
          },
          "hints.min_aspect_den":{
            "type":"integer|nil",
            "opt":true
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "optchain":true,
            "type":"table|nil",
            "opt":true
          },
          "2":{
            "type":"table|nil",
            "opt":true
          },
          "3":{
            "type":"table|nil",
            "opt":true
          },
          "4":{
            "type":"table|nil",
            "opt":true
          },
          "5":{
            "type":"table|nil",
            "opt":true
          },
          "6":{
            "type":"integer|nil",
            "opt":true
          },
          "7":{
            "type":"integer|nil",
            "opt":true
          },
          "8":{
            "type":"integer|nil",
            "opt":true
          },
          "9":{
            "type":"integer|nil",
            "opt":true
          },
          "10":{
            "type":"integer|nil",
            "opt":true
          },
          "11":{
            "type":"integer|nil",
            "opt":true
          },
          "12":{
            "type":"string|nil",
            "opt":true
          },
          "13":{
            "type":"integer|nil",
            "opt":true
          },
          "14":{
            "type":"integer|nil",
            "opt":true
          },
          "15":{
            "type":"integer|nil",
            "opt":true
          },
          "16":{
            "type":"integer|nil",
            "opt":true
          },
          "17":{
            "type":"integer|nil",
            "opt":true
          },
          "18":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.min_aspect_num":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.max_width":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.program_position":{
            "type":"table|nil",
            "opt":true
          },
          "hints.win_gravity":{
            "type":"string|nil",
            "opt":true
          },
          "hints.max_height":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.user_size":{
            "type":"table|nil",
            "opt":true
          },
          "hints.min_width":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.user_position":{
            "type":"table|nil",
            "opt":true
          },
          "hints.max_aspect_den":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.min_height":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.max_aspect_num":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.base_width":{
            "type":"integer|nil",
            "opt":true
          },
          "hints":{
            "optchain":true,
            "type":"table|nil",
            "opt":true
          },
          "hints.width_inc":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.base_height":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.height_inc":{
            "type":"integer|nil",
            "opt":true
          },
          "hints.program_size":{
            "type":"table|nil",
            "opt":true
          },
          "hints.min_aspect_den":{
            "type":"integer|nil",
            "opt":true
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n For details on the meaning of the fields, refer to ICCCM § 4.1.2.3\n `WM_NORMAL_HINTS`.\n\n Please note that most fields are optional and may or may not be set.\n\n When the client is tiled, the `size_hints` usually get in the way and\n cause the layouts to behave incorrectly. To mitigate this, it is often\n advised to set `size_hints_honor` to `false` in the `ruled.client` rules.\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "hints":["hints.user_position","hints.program_position","hints.user_size","hints.program_size","hints.max_width","hints.max_height","hints.min_width","hints.min_height","hints.width_inc","hints.height_inc","hints.win_gravity","hints.min_aspect_num","hints.min_aspect_den","hints.max_aspect_num","hints.max_aspect_den","hints.base_width","hints.base_height"]
      },
      "summary":"A table with size hints of the client.",
      "name":"size_hints",
      "type":"property",
      "args":"([hints])",
      "kind":"object properties",
      "lineno":1276
    },{
      "inferred":true,
      "subparams":{
        "hints":["hints.functions.all","hints.functions.resize","hints.functions.move","hints.functions.minimize","hints.functions.maximize","hints.functions.close","hints.decorations.all","hints.decorations.border","hints.decorations.resizeh","hints.decorations.title","hints.decorations.menu","hints.decorations.minimize","hints.decorations.maximize","hints.input_mode","hints.status.tearoff_window"]
      },
      "parameter":"field",
      "params":{
        "1":"hints",
        "map":{
          "hints.decorations.menu":"",
          "hints.functions.close":"",
          "hints.functions.all":"",
          "hints.decorations.minimize":"",
          "hints.decorations.all":"",
          "hints.functions.resize":"",
          "hints.decorations.maximize":"",
          "hints.decorations.border":"",
          "hints.functions.move":"",
          "hints.input_mode":" This is either `modeless`,\n  `primary_application_modal`, `system_modal`,\n  `full_application_modal` or `unknown`.",
          "hints.decorations.resizeh":"",
          "hints.functions.minimize":"",
          "hints.status.tearoff_window":"",
          "hints":" The hints.",
          "hints.functions.maximize":"",
          "hints.decorations.title":""
        }
      },
      "summary":"The motif WM hints of the client.",
      "name":"motif_wm_hints",
      "modifiers":{
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"boolean",
            "opt":true
          },
          "3":{
            "type":"boolean",
            "opt":true
          },
          "4":{
            "type":"boolean",
            "opt":true
          },
          "5":{
            "type":"boolean",
            "opt":true
          },
          "6":{
            "type":"boolean",
            "opt":true
          },
          "7":{
            "type":"boolean",
            "opt":true
          },
          "8":{
            "type":"boolean",
            "opt":true
          },
          "9":{
            "type":"boolean",
            "opt":true
          },
          "10":{
            "type":"boolean",
            "opt":true
          },
          "11":{
            "type":"boolean",
            "opt":true
          },
          "12":{
            "type":"boolean",
            "opt":true
          },
          "13":{
            "type":"boolean",
            "opt":true
          },
          "14":{
            "type":"boolean",
            "opt":true
          },
          "15":{
            "type":"string",
            "opt":true
          },
          "16":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.menu":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.close":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.all":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.minimize":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.all":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.resize":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.maximize":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.border":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.move":{
            "type":"boolean",
            "opt":true
          },
          "hints.input_mode":{
            "type":"string",
            "opt":true
          },
          "hints.decorations.resizeh":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.minimize":{
            "type":"boolean",
            "opt":true
          },
          "hints.status.tearoff_window":{
            "type":"boolean",
            "opt":true
          },
          "hints":{
            "type":"table"
          },
          "hints.functions.maximize":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.title":{
            "type":"boolean",
            "opt":true
          }
        },
        "return":[],
        "readonly":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"boolean",
            "opt":true
          },
          "3":{
            "type":"boolean",
            "opt":true
          },
          "4":{
            "type":"boolean",
            "opt":true
          },
          "5":{
            "type":"boolean",
            "opt":true
          },
          "6":{
            "type":"boolean",
            "opt":true
          },
          "7":{
            "type":"boolean",
            "opt":true
          },
          "8":{
            "type":"boolean",
            "opt":true
          },
          "9":{
            "type":"boolean",
            "opt":true
          },
          "10":{
            "type":"boolean",
            "opt":true
          },
          "11":{
            "type":"boolean",
            "opt":true
          },
          "12":{
            "type":"boolean",
            "opt":true
          },
          "13":{
            "type":"boolean",
            "opt":true
          },
          "14":{
            "type":"boolean",
            "opt":true
          },
          "15":{
            "type":"string",
            "opt":true
          },
          "16":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.menu":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.close":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.all":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.minimize":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.all":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.resize":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.maximize":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.border":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.move":{
            "type":"boolean",
            "opt":true
          },
          "hints.input_mode":{
            "type":"string",
            "opt":true
          },
          "hints.decorations.resizeh":{
            "type":"boolean",
            "opt":true
          },
          "hints.functions.minimize":{
            "type":"boolean",
            "opt":true
          },
          "hints.status.tearoff_window":{
            "type":"boolean",
            "opt":true
          },
          "hints":{
            "type":"table"
          },
          "hints.functions.maximize":{
            "type":"boolean",
            "opt":true
          },
          "hints.decorations.title":{
            "type":"boolean",
            "opt":true
          }
        }
      },
      "description":"\n\n This is nil if the client has no motif hints. Otherwise, this is a table that\n contains the present properties. Note that awesome provides these properties\n as-is and does not interpret them for you. For example, if the function table\n only has \"resize\" set to true, this means that the window requests to be only\n resizable, but asks for the other functions not to be able. If however both\n \"resize\" and \"all\" are set, this means that all but the resize function\n should be enabled.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(hints)",
      "tags":{
        "readonly":[""],
        "propemits":["false false"]
      },
      "lineno":1300
    },{
      "parameter":"field",
      "params":{
        "1":"sticky",
        "map":{
          "sticky":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "sticky":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "sticky":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n Please note that AwesomeWM implements `sticky` clients\n per screens rather than globally like some other\n implementations.\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_sticky.svg)\n \n  \n      -- Add a client.\n      awful.spawn(&#34xterm&#34)\n   \n      -- Set sticky = true\n      screen[1].clients[1].sticky = true\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set the client sticky (Available on all tags).",
      "name":"sticky",
      "type":"property",
      "args":"(sticky)",
      "kind":"object properties",
      "lineno":1321
    },{
      "parameter":"field",
      "params":{
        "1":"modal",
        "map":{
          "modal":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "modal":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "modal":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n A transient window is a client that \"belongs\" to another\n client. If the client is also `modal`, then it always has\n to be on top of the other window *and* the parent client\n cannot be focused while the child client exists.\n This is common for \"Save as\" dialogs or other dialogs where\n is not possible to modify the content of the \"parent\" client\n while the dialog is open.\n\n However, `modal` is not a requirement for using the `transient_for`\n concept. \"Tools\" such as popup palette in canvas-and-palettes\n applications can belong to each other without being modal.\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Indicate if the client is modal.",
      "name":"modal",
      "type":"property",
      "args":"(modal)",
      "kind":"object properties",
      "lineno":1336
    },{
      "parameter":"field",
      "params":{
        "1":"focusable",
        "map":{
          "focusable":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "focusable":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "focusable":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n The client will not get focused even when the user\n click on it.\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"True if the client can receive the input focus.",
      "name":"focusable",
      "type":"property",
      "args":"(focusable)",
      "kind":"object properties",
      "lineno":1360
    },{
      "parameter":"field",
      "params":{
        "1":"shape_bounding",
        "map":{
          "shape_bounding":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[],[],[],[]],
        "field":{
          "1":{
            "type":"surface"
          },
          "shape_bounding":{
            "type":"surface"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"surface"
          },
          "shape_bounding":{
            "type":"surface"
          }
        }
      },
      "description":"\n\n The bounding shape is the outer shape of the client. It is outside of the\n border.\n\n Do not use this directly unless you want total control over the shape (such\n as shape with holes). Even then, it is usually recommended to use transparency\n in the titlebars and a compositing manager. For the vast majority of use\n cases, use the `shape` property.\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client's bounding shape as set by awesome as a (native) cairo surface.",
      "name":"shape_bounding",
      "type":"property",
      "args":"(shape_bounding)",
      "kind":"object properties",
      "lineno":1379
    },{
      "parameter":"field",
      "params":{
        "1":"shape_clip",
        "map":{
          "shape_clip":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[],[],[],[]],
        "field":{
          "1":{
            "type":"surface"
          },
          "shape_clip":{
            "type":"surface"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"surface"
          },
          "shape_clip":{
            "type":"surface"
          }
        }
      },
      "description":"\n\n The shape_clip is the shape of the client *content*. It is *inside* the\n border.\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client's clip shape as set by awesome as a (native) cairo surface.",
      "name":"shape_clip",
      "type":"property",
      "args":"(shape_clip)",
      "kind":"object properties",
      "lineno":1398
    },{
      "parameter":"field",
      "params":{
        "1":"shape_input",
        "map":{
          "shape_input":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[],[],[],[]],
        "field":{
          "1":{
            "type":"surface"
          },
          "shape_input":{
            "type":"surface"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"surface"
          },
          "shape_input":{
            "type":"surface"
          }
        }
      },
      "description":"\n\n The input shape is the shape where mouse input will be passed to the\n client rather than propagated below it.\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client's input shape as set by awesome as a (native) cairo surface.",
      "name":"shape_input",
      "type":"property",
      "args":"(shape_input)",
      "kind":"object properties",
      "lineno":1415
    },{
      "parameter":"field",
      "params":{
        "1":"client_shape_bounding",
        "map":{
          "client_shape_bounding":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[],[],[],[]],
        "field":{
          "1":{
            "type":"surface"
          },
          "client_shape_bounding":{
            "type":"surface"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"surface"
          },
          "client_shape_bounding":{
            "type":"surface"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client's bounding shape as set by the program as a (native) cairo surface.",
      "name":"client_shape_bounding",
      "type":"property",
      "args":"(client_shape_bounding)",
      "kind":"object properties",
      "lineno":1432
    },{
      "parameter":"field",
      "params":{
        "1":"client_shape_clip",
        "map":{
          "client_shape_clip":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[],[],[],[]],
        "field":{
          "1":{
            "type":"surface"
          },
          "client_shape_clip":{
            "type":"surface"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"surface"
          },
          "client_shape_clip":{
            "type":"surface"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The client's clip shape as set by the program as a (native) cairo surface.",
      "name":"client_shape_clip",
      "type":"property",
      "args":"(client_shape_clip)",
      "kind":"object properties",
      "lineno":1492
    },{
      "parameter":"field",
      "params":{
        "1":"startup_id",
        "map":{
          "startup_id":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "startup_id":{
            "type":"string"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "startup_id":{
            "type":"string"
          }
        }
      },
      "description":"\n\n When a client is spawned (like using a terminal or `awful.spawn`, a startup\n notification identifier is created. When the client is created, this\n identifier remain the same. This allow to match a spawn event to an actual\n client.\n\n This is used to display a different mouse cursor when the application is\n loading and also to attach some properties to the newly created client (like\n a `tag` or `floating` state).\n\n Some applications, like `xterm`, don't support startup notification. While\n not perfect, the addition the following code to `rc.lua` will mitigate the\n issue. Please note that this code is Linux specific.\n\n    local blacklisted_snid = setmetatable({}, {__mode = \"v\" })\n\n    --- Make startup notification work for some clients like XTerm. This is ugly\n    -- but works often enough to be useful.\n    local function fix_startup_id(c)\n        -- Prevent \"broken\" sub processes created by `c` to inherit its SNID\n        if c.startup_id then\n            blacklisted_snid[c.startup_id] = blacklisted_snid[c.startup_id] or c\n            return\n        end\n\n        if not c.pid then return end\n\n        -- Read the process environment variables\n        local f = io.open(\"/proc/\"..c.pid..\"/environ\", \"rb\")\n\n        -- It will only work on Linux, that's already 99% of the userbase.\n        if not f then return end\n\n        local value = _VERSION <= \"Lua 5.1\" and \"([^\\z]*)\\0\" or \"([^\\0]*)\\0\"\n        local snid = f:read(\"*all\"):match(\"STARTUP_ID=\" .. value)\n        f:close()\n\n        -- If there is already a client using this SNID, it means it's either a\n        -- subprocess or another window for the same process. While it makes sense\n        -- in some case to apply the same rules, it is not always the case, so\n        -- better doing nothing rather than something stupid.\n        if blacklisted_snid[snid] then return end\n\n        c.startup_id = snid\n\n        blacklisted_snid[snid] = c\n    end\n\n    ruled.client.add_rule_source(\n        \"snid\", fix_startup_id, {}, {\"awful.spawn\", \"ruled.client\"}\n    )\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The FreeDesktop StartId.",
      "name":"startup_id",
      "type":"property",
      "args":"(startup_id)",
      "kind":"object properties",
      "lineno":1506
    },{
      "parameter":"field",
      "params":{
        "1":"valid",
        "map":{
          "valid":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "valid":{
            "type":"boolean"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "valid":{
            "type":"boolean"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n To avoid errors, use:\n\n    local is_valid = pcall(function() return c.valid end) and c.valid\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"If the client that this object refers to is still managed by awesome.",
      "name":"valid",
      "type":"property",
      "args":"(valid)",
      "kind":"object properties",
      "lineno":1520
    },{
      "parameter":"field",
      "params":{
        "1":"first_tag",
        "map":{
          "first_tag":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"tag"
          },
          "first_tag":{
            "type":"tag"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"tag"
          },
          "first_tag":{
            "type":"tag"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n Optimized form of `c:tags()[1]`. Not every workflow uses the\n ability to set multiple tags to a client. It is often enough\n to only get the first tag and ignore everything else.\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The first tag of the client.",
      "name":"first_tag",
      "type":"property",
      "args":"(first_tag)",
      "kind":"object properties",
      "lineno":1567
    },{
      "parameter":"field",
      "params":{
        "1":"struts",
        "map":{
          "struts":" A table with new strut values, or none."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "struts":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "struts":{
            "type":"table"
          }
        }
      },
      "description":"\n\n The struts area is a table with a `left`, `right`, `top` and `bottom`\n keys to define how much space of the screen `workarea` this client\n should reserve for itself.\n\n This corresponds to EWMH's `_NET_WM_STRUT` and `_NET_WM_STRUT_PARTIAL`.\n\n In the example below, 2 object affect the workarea (using their struts):\n\n * The top wibar add a `top=24`\n * The bottom-left client add `bottom=100, left=100`\n\n \n \n ![Usage example](../images/AUTOGEN_screen_struts.svg)\n \n  \n      -- Wibars and docked clients are the main users of the struts.\n      local wibar = awful.wibar {\n          position = &#34top&#34,\n          height   = 24, -- this will set the wibar won :struts() to top=24\n      }\n      -- This is the client in the bottom left.\n      c.name     = &#34w. struts&#34\n      c.floating = true\n   \n      c:geometry {\n          x      = 0,\n          y      = 380,\n          height = 100,\n          width  = 100,\n      }\n   \n      c:struts {\n          left   = 100,\n          bottom = 100\n      }\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Return client struts (reserved space at the edge of the screen).",
      "name":"struts",
      "type":"method",
      "args":"(struts)",
      "kind":"object methods ",
      "lineno":1578
    },{
      "parameter":"field",
      "params":{
        "1":"buttons",
        "map":{
          "buttons":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "field":{
          "1":{
            "type":"table"
          },
          "buttons":{
            "type":"table"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "buttons":{
            "type":"table"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Get or set mouse buttons bindings for a client.",
      "name":"buttons",
      "type":"property",
      "args":"(buttons)",
      "kind":"object properties",
      "lineno":1584
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the number of instances.",
      "name":"instances",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"integer"
          }]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":1589
    },{
      "parameter":"field",
      "params":{
        "1":"screen",
        "2":"stacked",
        "map":{
          "stacked":" Return clients in stacking order? (ordered from\n   top to bottom).",
          "screen":" A screen number to filter clients on."
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"boolean",
            "opt":true
          },
          "stacked":{
            "optchain":true,
            "type":"boolean",
            "opt":true
          },
          "screen":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          }
        },
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "2":{
            "optchain":true,
            "type":"boolean",
            "opt":true
          },
          "stacked":{
            "optchain":true,
            "type":"boolean",
            "opt":true
          },
          "screen":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          }
        },
        "usage":[[]]
      },
      "description":"",
      "tags":[],
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Get all clients into a table.",
      "name":"get",
      "kind":"static module functions",
      "usage":["for _, c in ipairs(client.get()) do\n    -- do something\nend\n"],
      "args":"([screen[, stacked]])",
      "type":"staticfct",
      "lineno":3129
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Check if a client is visible on its screen.",
      "name":"isvisible",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"boolean"
          }]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":[],
      "lineno":3170
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n This method can be used to close (kill) a **client** using the\n X11 protocol. To use the POSIX way to kill a **process**, use\n `awesome.kill` (using the client `pid` property).\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_kill1.svg)\n \n  \n      -- Spawn a client on screen #3\n      for i=1, 5 do\n          awful.spawn(&#34Client #&#34..i)\n      end\n       \n      client.get()[5]:activate {}\n       \n      local c4, c5 =  client.get()[4], client.get()[5]\n       \n      -- Kill the clients.\n      c4:kill()\n      c5:kill()\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Kill a client.",
      "name":"kill",
      "type":"method",
      "args":"()",
      "kind":"object methods ",
      "lineno":3303
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" A client to swap with."
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "emits":[[],[]],
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "return":[],
        "emitstparam":[[],[]],
        "usage":[[]]
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_swap1.svg)\n ",
      "tags":{
        "emits":["swapped","list"],
        "see":[],
        "emitstparam":["swapped client other The other client."," swapped boolean is_origin `true` when `:swap()` was called\n  on *self* rather than the other client. `false` when\n  `:swap()` was called on the other client."]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Swap a client with another one in global client list.",
      "name":"swap",
      "kind":"object methods ",
      "usage":["-- Spawn 5 clients.\nfor i=1, 5 do\n    awful.spawn(&#34Client #&#34..i)\nend\n \nclient.get()[2]:activate {}\n\nclient.get()[2]:swap(client.get()[4])\n"],
      "args":"(c)",
      "type":"method",
      "lineno":3342
    },{
      "parameter":"field",
      "params":{
        "1":"tags_table",
        "map":{
          "tags_table":" A table with tags to set, or `nil` to get the\n   current tags."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "emits":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "tags_table":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "tags_table":{
            "type":"table"
          }
        }
      },
      "description":"\n\n Use the `first_tag` field to access the first tag of a client directly.\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_tags1.svg)\n \n **Usage example output**:\n \n  **Usage example:**\n \n \n  \n     for tag_idx = 1, 3 do\n         for _ = 1, 3 do\n             awful.spawn(&#34&#34, {tags = {screen[1].tags[tag_idx]}})\n         end\n     end\n   \n     client.get()[1]:tags {\n         screen[1].tags[2],\n         screen[1].tags[3]\n     }\n      \n     -- It also works to get the tags.\n     for _, t in ipairs(client.get()[1]:tags()) do\n          print(&#34Tag:&#34, t.index, t.name)\n     end\n",
      "tags":{
        "emits":["property::tags"],
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Access or set the client tags.",
      "name":"tags",
      "type":"method",
      "args":"(tags_table)",
      "kind":"object methods ",
      "lineno":3417
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "return":[],
        "field":[],
        "emits":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "emits":["raised"]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Raise a client on top of others which are on the same layer.",
      "name":"raise",
      "type":"method",
      "args":"()",
      "kind":"object methods ",
      "lineno":3491
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "return":[],
        "field":[],
        "emits":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "emits":["lowered"]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Lower a client on bottom of others which are on the same layer.",
      "name":"lower",
      "type":"method",
      "args":"()",
      "kind":"object methods ",
      "lineno":3517
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Stop managing a client.",
      "name":"unmanage",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":[],
      "lineno":3544
    },{
      "parameter":"field",
      "params":{
        "1":"geo",
        "map":{
          "geo.x":" The horizontal position.",
          "geo":" A table with new coordinates, or nil.",
          "geo.y":" The vertical position.",
          "geo.width":" The width.",
          "geo.height":" The height."
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table|nil"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "5":{
            "type":"integer"
          },
          "geo.x":{
            "type":"integer"
          },
          "geo":{
            "type":"table|nil"
          },
          "geo.y":{
            "type":"integer"
          },
          "geo.width":{
            "type":"integer"
          },
          "geo.height":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "type":"table|nil"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "5":{
            "type":"integer"
          },
          "geo.x":{
            "type":"integer"
          },
          "geo":{
            "type":"table|nil"
          },
          "geo.y":{
            "type":"integer"
          },
          "geo.width":{
            "type":"integer"
          },
          "geo.height":{
            "type":"integer"
          }
        }
      },
      "description":"\n\n \n \n ![Usage example](../images/AUTOGEN_sequences_client_geometry1.svg)\n \n **Usage example output**:\n \n  **Usage example:**\n \n \n  \n      awful.spawn(&#34&#34)\n       \n      client.get()[1].floating = true\n       \n      client.get()[1]:geometry {\n          x      = 200,\n          y      = 200,\n          width  = 300,\n          height = 240\n      }\n       \n      -- It can also read the geometry.\n      local geo = client.get()[1]:geometry()\n      print(&#34Client geometry:&#34, geo.x, geo.y, geo.width, geo.height)\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":{
        "geo":["geo.x","geo.y","geo.width","geo.height"]
      },
      "summary":"Return or set client geometry.",
      "name":"geometry",
      "type":"method",
      "args":"(geo)",
      "kind":"object methods ",
      "lineno":3783
    },{
      "parameter":"field",
      "params":{
        "1":"width",
        "2":"height",
        "map":{
          "height":" Desired height of client",
          "width":" Desired width of client"
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[{
            "type":"integer"
          },{
            "type":"integer"
          }],
        "param":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          }
        }
      },
      "description":"\n\n This method applies the client size hints. The client\n will be resized according to the size hints as long\n as `size_hints_honor` is true. Regardless of the\n status of `size_hints_honor`, this method will\n return the size with the size hints applied.\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Apply size hints to a size.",
      "name":"apply_size_hints",
      "type":"method",
      "args":"(width, height)",
      "kind":"object methods ",
      "lineno":3828
    },{
      "parameter":"field",
      "params":{
        "1":"keys",
        "map":{
          "keys":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "field":{
          "1":{
            "type":"table"
          },
          "keys":{
            "type":"table"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "keys":{
            "type":"table"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Get or set keys bindings for a client.",
      "name":"keys",
      "type":"property",
      "args":"(keys)",
      "kind":"object properties",
      "lineno":4444
    },{
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" The index in the list of icons to get."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[{
            "type":"surface"
          }],
        "param":{
          "1":{
            "type":"interger"
          },
          "index":{
            "type":"interger"
          }
        },
        "field":{
          "1":{
            "type":"interger"
          },
          "index":{
            "type":"interger"
          }
        }
      },
      "description":"\n\n The icon index can be deternined by inspecting the `icon_sizes` property first.\n\n The user has the responsibility to test the value returned by this function\n to ensure an icon have been returned.\n\n It is recommended to use the `awful.widget.clienticon` widget when the\n client icon is used in a widget structure.\n\n Note that this function tests the provided index and raise an \"invalid icon\n index\" error if the provided index doesn't exist in the client's icons list\n (by raising an error, the function will be stopped and nothing will be\n returned to the caller).\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Get the client's n-th icon.",
      "name":"get_icon",
      "type":"method",
      "args":"(index)",
      "kind":"object methods ",
      "lineno":4505
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback that should be disconnected."
        }
      },
      "summary":"Disconnect from a signal.",
      "name":"disconnect_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, func)",
      "tags":[],
      "lineno":4785
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, ...)",
      "tags":[],
      "lineno":4791
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, func)",
      "tags":[],
      "lineno":4793
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"\n It has priority over the rest of beautiful border color properties.\n Note that only solid colors are supported.",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the client is marked.",
      "name":"beautiful.border_color_marked",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4817
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The fallback border color when the client is floating.",
      "name":"beautiful.border_color_floating",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4829
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The fallback border color when the client is maximized.",
      "name":"beautiful.border_color_maximized",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4841
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The fallback border color when the client is fullscreen.",
      "name":"beautiful.border_color_fullscreen",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4849
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the client is active.",
      "name":"beautiful.border_color_active",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4857
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the client is not active.",
      "name":"beautiful.border_color_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4865
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the client has the urgent property set.",
      "name":"beautiful.border_color_urgent",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4873
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the client is not active and new.",
      "name":"beautiful.border_color_new",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4881
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (floating) client is active.",
      "name":"beautiful.border_color_floating_active",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4889
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (floating) client is not active.",
      "name":"beautiful.border_color_floating_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4897
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (floating) client has the urgent property set.",
      "name":"beautiful.border_color_floating_urgent",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4905
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (floating) client is not active and new.",
      "name":"beautiful.border_color_floating_new",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4913
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (maximized) client is active.",
      "name":"beautiful.border_color_maximized_active",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4921
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (maximized) client is not active.",
      "name":"beautiful.border_color_maximized_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4929
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (maximized) client has the urgent property set.",
      "name":"beautiful.border_color_maximized_urgent",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4937
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (maximized) client is not active and new.",
      "name":"beautiful.border_color_maximized_new",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4945
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (fullscreen) client is active.",
      "name":"beautiful.border_color_fullscreen_active",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4953
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (fullscreen) client is not active.",
      "name":"beautiful.border_color_fullscreen_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4961
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (fullscreen) client has the urgent property set.",
      "name":"beautiful.border_color_fullscreen_urgent",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4969
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "color":[]
        },
        "field":{
          "1":[],
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The border color when the (fullscreen) client is not active and new.",
      "name":"beautiful.border_color_fullscreen_new",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":4987
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[],[],[],[],[],[],[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The fallback border width when nothing else is set.",
      "name":"beautiful.border_width",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":4999
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The fallback border width when the client is floating.",
      "name":"beautiful.border_width_floating",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5011
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The fallback border width when the client is maximized.",
      "name":"beautiful.border_width_maximized",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5019
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the normal clients.",
      "name":"beautiful.border_width_normal",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5027
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the active client.",
      "name":"beautiful.border_width_active",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5035
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the urgent clients.",
      "name":"beautiful.border_width_urgent",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5043
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the new clients.",
      "name":"beautiful.border_width_new",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5051
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the normal floating clients.",
      "name":"beautiful.border_width_floating_normal",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5059
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the active floating client.",
      "name":"beautiful.border_width_floating_active",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5067
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the urgent floating clients.",
      "name":"beautiful.border_width_floating_urgent",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5075
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the new floating clients.",
      "name":"beautiful.border_width_floating_new",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5083
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the normal maximized clients.",
      "name":"beautiful.border_width_maximized_normal",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5091
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the active maximized client.",
      "name":"beautiful.border_width_maximized_active",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5099
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the urgent maximized clients.",
      "name":"beautiful.border_width_maximized_urgent",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5107
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the new maximized clients.",
      "name":"beautiful.border_width_maximized_new",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5115
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the normal fullscreen clients.",
      "name":"beautiful.border_width_fullscreen_normal",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5123
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the active fullscreen client.",
      "name":"beautiful.border_width_fullscreen_active",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5131
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the urgent fullscreen clients.",
      "name":"beautiful.border_width_fullscreen_urgent",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5139
    },{
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client border width for the new fullscreen clients.",
      "name":"beautiful.border_width_fullscreen_new",
      "type":"beautiful",
      "args":"(integer)",
      "kind":"theme variables",
      "lineno":5149
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the normal clients.",
      "name":"beautiful.opacity_normal",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5159
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the active client.",
      "name":"beautiful.opacity_active",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5169
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the urgent clients.",
      "name":"beautiful.opacity_urgent",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5179
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the new clients.",
      "name":"beautiful.opacity_new",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5189
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the normal floating clients.",
      "name":"beautiful.opacity_floating_normal",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5199
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the active floating client.",
      "name":"beautiful.opacity_floating_active",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5209
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the urgent floating clients.",
      "name":"beautiful.opacity_floating_urgent",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5219
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the new floating clients.",
      "name":"beautiful.opacity_floating_new",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5229
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the normal maximized clients.",
      "name":"beautiful.opacity_maximized_normal",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5239
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the active maximized client.",
      "name":"beautiful.opacity_maximized_active",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5249
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the urgent maximized clients.",
      "name":"beautiful.opacity_maximized_urgent",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5259
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the new maximized clients.",
      "name":"beautiful.opacity_maximized_new",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5268
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the normal fullscreen clients.",
      "name":"beautiful.opacity_fullscreen_normal",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5278
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the active fullscreen client.",
      "name":"beautiful.opacity_fullscreen_active",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5288
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the urgent fullscreen clients.",
      "name":"beautiful.opacity_fullscreen_urgent",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5298
    },{
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "opt":"1"
          },
          "number":{
            "optchain":"1",
            "opt":"1"
          }
        }
      },
      "description":"\n\n A number between 0 and 1.\n",
      "tags":{
        "see":[]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The client opacity for the new fullscreen clients.",
      "name":"beautiful.opacity_fullscreen_new",
      "type":"beautiful",
      "args":"([number=1])",
      "kind":"theme variables",
      "lineno":5300
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n The default config uses:\n\n    awful.placement.no_overlap+awful.placement.no_offscreen\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_rules_placement.svg)\n\n \n    ruled.client.append_rule {\n        rule = { class = &#34mplayer&#34 },\n        properties = {\n            floating  = true,\n            placement = awful.placement.centered,\n            width     = 640,\n            height    = 480,\n        },\n    }\n  \n    -- Spawn mplayer\n    awful.spawn(&#34mplayer&#34)\n",
      "tags":{
        "see":[]
      },
      "section":"clientruleproperty",
      "inferred":true,
      "subparams":[],
      "summary":"The client default placement on the screen.",
      "name":"placement",
      "type":"clientruleproperty",
      "args":"()",
      "kind":"extra properties available in the rules",
      "lineno":91
    },{
      "parameter":"field",
      "params":{
        "1":"honor_padding",
        "map":{
          "honor_padding":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "honor_padding":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "honor_padding":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"clientruleproperty",
      "inferred":true,
      "subparams":[],
      "summary":"When applying the placement, honor the screen padding.",
      "name":"honor_padding",
      "type":"clientruleproperty",
      "args":"([honor_padding=true])",
      "kind":"extra properties available in the rules",
      "lineno":96
    },{
      "parameter":"field",
      "params":{
        "1":"honor_workarea",
        "map":{
          "honor_workarea":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "honor_workarea":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "honor_workarea":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"\n\n The workarea is the part of the screen that excludes the bars and docks.\n",
      "tags":{
        "see":[]
      },
      "section":"clientruleproperty",
      "inferred":true,
      "subparams":[],
      "summary":"When applying the placement, honor the screen work area.",
      "name":"honor_workarea",
      "type":"clientruleproperty",
      "args":"([honor_workarea=true])",
      "kind":"extra properties available in the rules",
      "lineno":104
    },{
      "parameter":"field",
      "params":{
        "1":"tag",
        "map":{
          "tag":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "tag":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "tag":{
            "type":"tag"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_rules_tags.svg)\n\n \n    -- Select tag by object reference:\n    ruled.client.append_rule {\n        rule_any    = {\n            class = {&#34firefox&#34}\n        },\n        properties = {\n            tag = screen[1].tags[3],\n        },\n    }\n  \n    -- Select tag by name:\n    ruled.client.append_rule {\n        rule_any    = {\n            class = {&#34thunderbird&#34}\n        },\n        properties = {\n            tag = &#34five&#34,\n        },\n    }\n  \n    -- Spawn firefox and thunderbird\n    awful.spawn(&#34firefox&#34)\n    awful.spawn(&#34thunderbird&#34)\n",
      "tags":{
        "see":[]
      },
      "section":"clientruleproperty",
      "inferred":true,
      "subparams":[],
      "summary":"The client default tag.",
      "name":"tag",
      "type":"clientruleproperty",
      "args":"(tag)",
      "kind":"extra properties available in the rules",
      "lineno":142
    },{
      "parameter":"field",
      "params":{
        "1":"tags",
        "map":{
          "tags":""
        }
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"{tag}",
            "type":"table",
            "opt":"{tag}"
          },
          "tags":{
            "optchain":"{tag}",
            "type":"table",
            "opt":"{tag}"
          }
        },
        "field":{
          "1":{
            "optchain":"{tag}",
            "type":"table",
            "opt":"{tag}"
          },
          "tags":{
            "optchain":"{tag}",
            "type":"table",
            "opt":"{tag}"
          }
        }
      },
      "description":"\n\n Avoid using the tag and tags properties at the same time, it will cause\n issues.\n",
      "tags":{
        "see":[]
      },
      "section":"clientruleproperty",
      "inferred":true,
      "subparams":[],
      "summary":"The client default tags.",
      "name":"tags",
      "type":"clientruleproperty",
      "args":"([tags={tag}])",
      "kind":"extra properties available in the rules",
      "lineno":154
    },{
      "parameter":"field",
      "params":{
        "1":"new_tag",
        "map":{
          "new_tag":""
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "type":"table|string|boolean",
            "opt":"false"
          },
          "new_tag":{
            "optchain":"false",
            "type":"table|string|boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "type":"table|string|boolean",
            "opt":"false"
          },
          "new_tag":{
            "optchain":"false",
            "type":"table|string|boolean",
            "opt":"false"
          }
        }
      },
      "description":"\n\n If the value is `true`, the new tag will be named after the client `class`.\n If it is a string, it will be the tag name.\n\n If a table is used, all of its properties will be passed to the tag\n constructor:\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_rules_new_tag.svg)\n\n \n    -- Create a new tags with some properties:\n    ruled.client.append_rule {\n        rule = { class = &#34firefox&#34 },\n        properties = {\n            switch_to_tags = true,\n            new_tag        = {\n                name     = &#34My_new_tag!&#34, -- The tag name.\n                layout   = awful.layout.suit.max, -- Set the tag layout.\n                volatile = true, -- Remove the tag when the client is closed.\n            }\n        }\n    }\n  \n    -- Create a new tag with just a name:\n    ruled.client.append_rule {\n        rule = { class = &#34thunderbird&#34 },\n        properties = {\n            switch_to_tags = true,\n            new_tag        = &#34JUST_A_NAME!&#34,\n        }\n    }\n  \n    -- Create a new tag using the client metadata:\n    ruled.client.append_rule {\n        rule = { class = &#34xterm&#34 },\n        properties = {\n            switch_to_tags = true,\n            new_tag        = true,\n        }\n    }\n  \n    -- Spawn firefox\n    awful.spawn(&#34firefox&#34)\n    awful.spawn(&#34thunderbird&#34)\n    awful.spawn(&#34xterm&#34)\n",
      "tags":{
        "see":[]
      },
      "section":"clientruleproperty",
      "inferred":true,
      "subparams":[],
      "summary":"Create a new tag for this client.",
      "name":"new_tag",
      "type":"clientruleproperty",
      "args":"([new_tag=false])",
      "kind":"extra properties available in the rules",
      "lineno":209
    },{
      "parameter":"field",
      "params":{
        "1":"switch_to_tags",
        "map":{
          "switch_to_tags":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "switch_to_tags":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "switch_to_tags":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"\n Note that this property was called `switchtotag` in previous Awesome versions.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_rules_switch_to_tags.svg)\n\n \n     -- Select tag by object reference:\n     ruled.client.append_rule {\n         rule = { class = &#34firefox&#34 },\n         properties = {\n             tag            = screen[1].tags[4],\n             switch_to_tags = true\n         }\n     }\n  \n     -- Spawn firefox\n     awful.spawn(&#34firefox&#34)\n",
      "tags":{
        "see":[]
      },
      "section":"clientruleproperty",
      "inferred":true,
      "subparams":[],
      "summary":"Unselect the current tags and select this client tags.",
      "name":"switch_to_tags",
      "type":"clientruleproperty",
      "args":"([switch_to_tags=false])",
      "kind":"extra properties available in the rules",
      "lineno":233
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"focus",
        "map":{
          "focus":""
        }
      },
      "summary":"Define if the client should grab focus by default.",
      "name":"focus",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "focus":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "focus":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"\n\n The `request::activate` context for this call is `rules`.\n",
      "type":"clientruleproperty",
      "section":"clientruleproperty",
      "kind":"extra properties available in the rules",
      "args":"([focus=false])",
      "tags":[],
      "lineno":240
    },{
      "parameter":"field",
      "params":{
        "1":"titlebars_enabled",
        "map":{
          "titlebars_enabled":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "titlebars_enabled":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "titlebars_enabled":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"clientruleproperty",
      "inferred":true,
      "subparams":[],
      "summary":"Should this client have a titlebar by default.",
      "name":"titlebars_enabled",
      "type":"clientruleproperty",
      "args":"([titlebars_enabled=false])",
      "kind":"extra properties available in the rules",
      "lineno":245
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n It can be useful to set extra properties or perform actions.\n",
      "tags":{
        "see":[]
      },
      "section":"clientruleproperty",
      "inferred":true,
      "subparams":[],
      "summary":"A function to call when this client is ready.",
      "name":"callback",
      "type":"clientruleproperty",
      "args":"()",
      "kind":"extra properties available in the rules",
      "lineno":252
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"merge",
        "map":{
          "c":" the client to jump to",
          "merge":" If true then merge tags (select the client's\n   first tag additionally) when the client is not visible.\n   If it is a function, it will be called with the client and its first\n   tag as arguments."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"bool|function"
          },
          "c":{
            "type":"client"
          },
          "merge":{
            "type":"bool|function"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"bool|function"
          },
          "c":{
            "type":"client"
          },
          "merge":{
            "type":"bool|function"
          }
        }
      },
      "description":"\n Takes care of focussing the screen, the right tag, etc.\n",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Jump to the given client.",
      "name":"awful.client.jumpto",
      "type":"deprecated",
      "args":"(c, merge)",
      "kind":"deprecated functions",
      "lineno":262
    },{
      "parameter":"field",
      "params":{
        "1":"merge",
        "map":{
          "merge":" If true then merge tags (select the client's\n   first tag additionally) when the client is not visible.\n   If it is a function, it will be called with the client and its first\n   tag as arguments."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "type":"bool|function"
          },
          "merge":{
            "type":"bool|function"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"bool|function"
          },
          "merge":{
            "type":"bool|function"
          }
        },
        "request":[[]]
      },
      "description":"\n\n Takes care of focussing the screen, the right tag, etc.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_jump_to1.svg)\n\n \n    for tag_idx = 1, 3 do\n        for _ = 1, 3 do\n            awful.spawn(&#34&#34, {tags = {screen[1].tags[tag_idx]}})\n        end\n    end\n  \n    client.get()[6]:jump_to()\n     \n    client.get()[7]:jump_to(true)\n",
      "tags":{
        "see":[],
        "request":["client activate client.jumpto granted When a client is activated\n  because `c:jump_to()` is called."]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Jump to the given client.",
      "name":"jump_to",
      "type":"method",
      "args":"(merge)",
      "kind":"object methods ",
      "lineno":295
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "2":"stacked",
        "map":{
          "s":" The screen, or nil for all screens.",
          "stacked":" Use stacking order? (top to bottom)"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "2":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "s":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "2":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "s":{
            "optchain":true,
            "type":"integer|screen",
            "opt":true
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get visible clients from a screen.",
      "name":"awful.client.visible",
      "type":"deprecated",
      "args":"([s[, stacked=false]])",
      "kind":"deprecated functions",
      "lineno":328
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "2":"stacked",
        "map":{
          "s":" The screen, or nil for all screens.",
          "stacked":" Use stacking order? (top to bottom)"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"integer|screen"
          },
          "2":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "s":{
            "type":"integer|screen"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "type":"integer|screen"
          },
          "2":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "s":{
            "type":"integer|screen"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get visible and tiled clients",
      "name":"awful.client.tiled",
      "type":"deprecated",
      "args":"(s[, stacked=false])",
      "kind":"deprecated functions",
      "lineno":346
    },{
      "parameter":"field",
      "params":{
        "1":"i",
        "2":"sel",
        "3":"stacked",
        "map":{
          "i":" The index.  Use 1 to get the next, -1 to get the previous.",
          "stacked":" Use stacking order? (top to bottom)",
          "sel":" The client."
        }
      },
      "modifiers":{
        "see":[[]],
        "usage":[[]],
        "return":[{
            "type":"client|nil",
            "opt":true
          }],
        "param":{
          "1":{
            "type":"int"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "i":{
            "type":"int"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "sel":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"int"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "i":{
            "type":"int"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "sel":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        }
      },
      "description":"\n If no client is passed, the focused client will be used.\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Get a client by its relative index to another client.",
      "name":"awful.client.next",
      "kind":"static module functions",
      "usage":["-- focus the next window in the index\nawful.client.next(1)\n-- focus the previous\nawful.client.next(-1)\n"],
      "args":"(i[, sel[, stacked=false]])",
      "type":"staticfct",
      "lineno":376
    },{
      "parameter":"field",
      "params":{
        "1":"dir",
        "2":"c",
        "3":"stacked",
        "map":{
          "stacked":" Use stacking order? (top to bottom)",
          "dir":" The direction, can be either \"up\", \"down\", \"left\" or \"right\".",
          "c":" The client."
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"focused",
            "type":"client",
            "opt":"focused"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "dir":{
            "type":"string"
          },
          "c":{
            "optchain":"focused",
            "type":"client",
            "opt":"focused"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"focused",
            "type":"client",
            "opt":"focused"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "dir":{
            "type":"string"
          },
          "c":{
            "optchain":"focused",
            "type":"client",
            "opt":"focused"
          }
        }
      },
      "description":"\n\n This will not cross the screen boundary. If you want this behavior, use\n `awful.client.swap.global_bydirection`.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_swap_bydirection1.svg)\n\n \n     \n    -- It will go up in the same column.\n    awful.client.swap.bydirection(&#34up&#34, client.focus)\n     \n    -- Nothing happens because it cannot change screen.\n    awful.client.swap.bydirection(&#34right&#34, client.focus)\n     \n    -- Moves to the first column.\n    awful.client.swap.bydirection(&#34left&#34, client.focus)\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Swap a client with another client in the given direction.",
      "name":"awful.client.swap.bydirection",
      "type":"staticfct",
      "args":"(dir[, c=focused[, stacked=false]])",
      "kind":"static module functions",
      "lineno":429
    },{
      "parameter":"field",
      "params":{
        "1":"dir",
        "2":"sel",
        "map":{
          "dir":" The direction, can be either \"up\", \"down\", \"left\" or \"right\".",
          "sel":" The client."
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "dir":{
            "type":"string"
          },
          "sel":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "dir":{
            "type":"string"
          },
          "sel":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        },
        "request":[[]]
      },
      "description":"\n\n Swaps across screens.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_swap_bydirection2.svg)\n\n \n     \n    -- It will go up in the same column.\n    awful.client.swap.global_bydirection(&#34up&#34, client.focus)\n     \n    -- It will cross to screen[2].\n    awful.client.swap.global_bydirection(&#34right&#34, client.focus)\n     \n    -- Moves to the first column.\n    awful.client.swap.global_bydirection(&#34left&#34, client.focus)\n",
      "tags":{
        "see":[],
        "request":["client activate client.swap.global_bydirection granted When a client\n  could be activated because `awful.client.swap.global_bydirection` was called."]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Swap a client with another client in the given direction.",
      "name":"awful.client.swap.global_bydirection",
      "type":"staticfct",
      "args":"(dir[, sel])",
      "kind":"static module functions",
      "lineno":475
    },{
      "parameter":"field",
      "params":{
        "1":"i",
        "2":"c",
        "map":{
          "i":" The index.",
          "c":" The client, otherwise focused one is used."
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "i":{
            "type":"integer"
          },
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "i":{
            "type":"integer"
          },
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_swap_byidx1.svg)\n\n**Usage example output**:\n\n **Usage example:**\n\n\n \n    -- Print at which index each client is now at.\n    local function print_indices()\n        local output = &#34&#34\n         \n        for idx, c in ipairs(client.get()) do\n             output = output .. c.name .. &#34:&#34 .. idx .. &#34, &#34\n        end\n         \n        print(output)\n    end\n     \n    print_indices()\n     \n    print(&#34Call swap.byidx&#34)\n    awful.client.swap.byidx(3, client.get()[1])\n    print_indices()\n     \n    print(&#34Call swap.byidx&#34)\n    awful.client.swap.byidx(2, client.get()[4])\n    print_indices()\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Swap a client by its relative index.",
      "name":"awful.client.swap.byidx",
      "type":"staticfct",
      "args":"(i[, c])",
      "kind":"static module functions",
      "lineno":545
    },{
      "parameter":"field",
      "params":{
        "1":"clockwise",
        "2":"s",
        "3":"stacked",
        "map":{
          "s":" The screen where to cycle clients.",
          "clockwise":" True to cycle clients clockwise.",
          "stacked":" Use stacking order? (top to bottom)"
        }
      },
      "modifiers":{
        "see":[[],[],[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"boolean"
          },
          "2":{
            "optchain":true,
            "type":"screen",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "s":{
            "optchain":true,
            "type":"screen",
            "opt":true
          },
          "clockwise":{
            "type":"boolean"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "type":"boolean"
          },
          "2":{
            "optchain":true,
            "type":"screen",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "s":{
            "optchain":true,
            "type":"screen",
            "opt":true
          },
          "clockwise":{
            "type":"boolean"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"\n\n This will swap the client from one position to the next\n in the layout.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_cycle1.svg)\n\n \n     \n    awful.client.cycle(true, awful.screen.focused(), true)\n    awful.client.cycle(true, awful.screen.focused(), true)\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Cycle through the clients to change the focus.",
      "name":"awful.client.cycle",
      "type":"staticfct",
      "args":"(clockwise[, s[, stacked=false]])",
      "kind":"static module functions",
      "lineno":576
    },{
      "parameter":"field",
      "params":{
        "1":"key",
        "map":{
          "key":" The key."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        },
        "field":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Append a keybinding.",
      "name":"append_keybinding",
      "type":"method",
      "args":"(key)",
      "kind":"object methods ",
      "lineno":602
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"key",
        "map":{
          "key":" The key."
        }
      },
      "summary":"Remove a keybinding.",
      "name":"remove_keybinding",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        },
        "field":{
          "1":{
            "type":"awful.key"
          },
          "key":{
            "type":"awful.key"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(key)",
      "tags":[],
      "lineno":607
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button."
        }
      },
      "summary":"Append a mousebinding.",
      "name":"append_mousebinding",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(button)",
      "tags":[],
      "lineno":612
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button."
        }
      },
      "summary":"Remove a mousebinding.",
      "name":"remove_mousebinding",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(button)",
      "tags":[],
      "lineno":617
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"s",
        "map":{
          "s":" The screen."
        }
      },
      "summary":"Get the master window.",
      "name":"awful.client.getmaster",
      "modifiers":{
        "return":[{
            "type":"client"
          }],
        "param":{
          "1":{
            "optchain":"awful.screen.focused()",
            "type":"screen",
            "opt":"awful.screen.focused()"
          },
          "s":{
            "optchain":"awful.screen.focused()",
            "type":"screen",
            "opt":"awful.screen.focused()"
          }
        },
        "field":{
          "1":{
            "optchain":"awful.screen.focused()",
            "type":"screen",
            "opt":"awful.screen.focused()"
          },
          "s":{
            "optchain":"awful.screen.focused()",
            "type":"screen",
            "opt":"awful.screen.focused()"
          }
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"([s=awful.screen.focused()])",
      "tags":[],
      "lineno":622
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The window to set as master."
        }
      },
      "summary":"Set the client as master: put it at the beginning of other windows.",
      "name":"awful.client.setmaster",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c)",
      "tags":[],
      "lineno":631
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The window to set as slave."
        }
      },
      "summary":"Set the client as slave: put it at the end of other windows.",
      "name":"awful.client.setslave",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c)",
      "tags":[],
      "lineno":638
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "field":[],
        "usage":[[]]
      },
      "description":"\n\n This only affects tiled clients. It will shift all other\n client to fill the gap caused to by the move.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_to_primary.svg)\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Move the client to the most significant layout position.",
      "name":"to_primary_section",
      "kind":"object methods ",
      "usage":["-- Spawn a client on screen #3\nfor i=1, 5 do\n    awful.spawn(&#34Client #&#34..i)\nend\n \nclient.get()[5]:activate {}\n\nclient.get()[5]:to_primary_section()\n"],
      "args":"()",
      "type":"method",
      "lineno":665
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "field":[],
        "usage":[[]]
      },
      "description":"\n\n This only affects tiled clients. It will shift all other\n client to fill the gap caused to by the move.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_to_secondary.svg)\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Move the client to the least significant layout position.",
      "name":"to_secondary_section",
      "kind":"object methods ",
      "usage":["-- Spawn a client on screen #3\nfor i=1, 5 do\n    awful.spawn(&#34Client #&#34..i)\nend\n \nclient.get()[1]:activate {}\n\nclient.get()[1]:to_secondary_section()\n"],
      "args":"()",
      "type":"method",
      "lineno":697
    },{
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "3":"w",
        "4":"h",
        "5":"c",
        "map":{
          "c":" The client, otherwise focused one is used.",
          "h":" The relative height.",
          "y":" The relative y coordinate.",
          "w":" The relative width.",
          "x":" The relative x coordinate."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "5":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "h":{
            "type":"integer"
          },
          "y":{
            "type":"integer"
          },
          "w":{
            "type":"integer"
          },
          "x":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"integer"
          },
          "4":{
            "type":"integer"
          },
          "5":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "h":{
            "type":"integer"
          },
          "y":{
            "type":"integer"
          },
          "w":{
            "type":"integer"
          },
          "x":{
            "type":"integer"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Move/resize a client relative to current coordinates.",
      "name":"awful.client.moveresize",
      "type":"deprecated",
      "args":"(x, y, w, h[, c])",
      "kind":"deprecated functions",
      "lineno":713
    },{
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "3":"w",
        "4":"h",
        "map":{
          "y":" The relative y coordinate.",
          "w":" The relative width.",
          "h":" The relative height.",
          "x":" The relative x coordinate."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "2":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "3":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "4":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "y":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "w":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "h":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "x":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "2":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "3":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "4":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "y":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "w":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "h":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "x":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_relative_move1.svg)\n\n**Usage example output**:\n\n **Usage example:**\n\n\n \n     awful.spawn(&#34&#34)\n      \n     client.get()[1].floating = true\n      \n     geo = client.get()[1]:geometry()\n     print(&#34Client geometry:&#34, geo.x, geo.y, geo.width, geo.height)\n      \n     client.get()[1]:relative_move(100, 100)\n      \n     geo = client.get()[1]:geometry()\n     print(&#34Client geometry:&#34, geo.x, geo.y, geo.width, geo.height)\n      \n     client.get()[1]:relative_move(nil, nil, 100, 100)\n      \n     geo = client.get()[1]:geometry()\n     print(&#34Client geometry:&#34, geo.x, geo.y, geo.width, geo.height)\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Move/resize a client relative to current coordinates.",
      "name":"relative_move",
      "type":"method",
      "args":"([x=0[, y=0[, w=0[, h=0]]]])",
      "kind":"object methods ",
      "lineno":753
    },{
      "parameter":"field",
      "params":{
        "1":"target",
        "2":"c",
        "map":{
          "target":" The tag to move the client to.",
          "c":" The client to move, otherwise the focused one is used."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "target":{
            "type":"tag"
          },
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "target":{
            "type":"tag"
          },
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Move a client to a tag.",
      "name":"awful.client.movetotag",
      "type":"deprecated",
      "args":"(target[, c])",
      "kind":"deprecated functions",
      "lineno":767
    },{
      "parameter":"field",
      "params":{
        "1":"target",
        "map":{
          "target":" The tag to move the client to."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"tag"
          },
          "target":{
            "type":"tag"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "target":{
            "type":"tag"
          }
        },
        "request":[[]]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_move_to_tag1.svg)\n\n \n    for tag_idx = 1, 3 do\n        for _ = 1, 3 do\n            awful.spawn(&#34&#34, {tags = {screen[1].tags[tag_idx]}})\n        end\n    end\n  \n    client.get()[1]:move_to_tag(screen[1].tags[2])\n",
      "tags":{
        "see":[],
        "request":["client activate client.movetotag granted When a client could be\n  activated because `c:move_to_tag()` was called."]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Move a client to a tag.",
      "name":"move_to_tag",
      "type":"method",
      "args":"(target)",
      "kind":"object methods ",
      "lineno":792
    },{
      "parameter":"field",
      "params":{
        "1":"target",
        "2":"c",
        "map":{
          "target":" The tag to toggle.",
          "c":" The client to toggle, otherwise the focused one is used."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "target":{
            "type":"tag"
          },
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "target":{
            "type":"tag"
          },
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Toggle a tag on a client.",
      "name":"awful.client.toggletag",
      "type":"deprecated",
      "args":"(target[, c])",
      "kind":"deprecated functions",
      "lineno":811
    },{
      "parameter":"field",
      "params":{
        "1":"target",
        "map":{
          "target":" The tag to move the client to."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"tag"
          },
          "target":{
            "type":"tag"
          }
        },
        "field":{
          "1":{
            "type":"tag"
          },
          "target":{
            "type":"tag"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_toggle_tag1.svg)\n\n \n    for tag_idx = 1, 3 do\n        for _ = 1, 3 do\n            awful.spawn(&#34&#34, {tags = {screen[1].tags[tag_idx]}})\n        end\n    end\n  \n    client.get()[1]:toggle_tag(screen[1].tags[2])\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Toggle a tag on a client.",
      "name":"toggle_tag",
      "type":"method",
      "args":"(target)",
      "kind":"object methods ",
      "lineno":834
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"s",
        "map":{
          "c":" The client to move.",
          "s":" The screen, default to current + 1."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"screen"
          },
          "c":{
            "type":"client"
          },
          "s":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"screen"
          },
          "c":{
            "type":"client"
          },
          "s":{
            "type":"screen"
          }
        }
      },
      "description":" Default is next screen, cycling.",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Move a client to a screen.",
      "name":"awful.client.movetoscreen",
      "type":"deprecated",
      "args":"(c, s)",
      "kind":"deprecated functions",
      "lineno":862
    },{
      "parameter":"field",
      "params":{
        "1":"s",
        "map":{
          "s":" The screen, default to current + 1."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "optchain":"c.screen.index+1",
            "type":"screen",
            "opt":"c.screen.index+1"
          },
          "s":{
            "optchain":"c.screen.index+1",
            "type":"screen",
            "opt":"c.screen.index+1"
          }
        },
        "return":[],
        "param":{
          "1":{
            "optchain":"c.screen.index+1",
            "type":"screen",
            "opt":"c.screen.index+1"
          },
          "s":{
            "optchain":"c.screen.index+1",
            "type":"screen",
            "opt":"c.screen.index+1"
          }
        },
        "request":[[]]
      },
      "description":" Default is next screen, cycling.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_move_to_screen1.svg)\n\n \n  \n     -- Move the mouse to screen 3\n     mouse.coords {x = 100, y = 100 }\n      \n     -- Spawn a client on screen #3\n     awful.spawn(&#34firefox&#34)\n  \n     client.get()[1]:move_to_screen(screen[2])\n  \n     -- This will default to the next screen (by index).\n     client.get()[1]:move_to_screen()\n",
      "tags":{
        "see":[],
        "request":["client activate client.movetoscreen granted When a client could be\n  activated because `c:move_to_screen()` was called."]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Move a client to a screen.",
      "name":"move_to_screen",
      "type":"method",
      "args":"([s=c.screen.index+1])",
      "kind":"object methods ",
      "lineno":892
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n In most cases, the functionality you're actually looking for as a user will\n either be\n\n    c:tags(c.screen.selected_tags)\n\n or\n\n    local s = awful.screen.focused()\n    c:move_to_screen(s)\n    c:tags(s.selected_tags)\n\n Despite its naming, this is primarily used to tag newly created clients.\n As such, this method has no effect when applied to a client that already has\n tags assigned (except for emitting `property::tag`).\n\n Additionally, while it is a rare case, if the client's screen has no selected\n tags at the point of calling this method, it will fall back to the screen's\n full set of tags.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_to_selected_tags1.svg)\n\n \n    awful.spawn(&#34Client&#34)\n     \n    screen[1].tags[1].selected = false\n    screen[1].tags[2].selected = true\n    screen[1].tags[3].selected = true\n  \n    -- Deselect all tags, otherwise it will do nothing.\n    client.get()[1]:tags{}\n     \n    client.get()[1]:to_selected_tags()\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Find suitable tags for newly created clients.",
      "name":"to_selected_tags",
      "type":"method",
      "args":"()",
      "kind":"object methods ",
      "lineno":954
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"marked",
        "map":{
          "marked":""
        }
      },
      "summary":"If a client is marked or not.",
      "name":"marked",
      "modifiers":{
        "field":{
          "1":{
            "type":"boolean"
          },
          "marked":{
            "type":"boolean"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"boolean"
          },
          "marked":{
            "type":"boolean"
          }
        },
        "emits":[[],[],[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(marked)",
      "tags":{
        "emits":["marked (for legacy reasons, use `property::marked`)","unmarker (for legacy reasons, use `property::marked`)","property::marked"]
      },
      "lineno":991
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The client to mark, the focused one if not specified."
        }
      },
      "summary":"Mark a client, and then call 'marked' hook.",
      "name":"awful.client.mark",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c)",
      "tags":[],
      "lineno":1016
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The client to unmark, or the focused one if not specified."
        }
      },
      "summary":"Unmark a client and then call 'unmarked' hook.",
      "name":"awful.client.unmark",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c)",
      "tags":[],
      "lineno":1024
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The client to check, or the focused one otherwise."
        }
      },
      "summary":"Check if a client is marked.",
      "name":"awful.client.ismarked",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c)",
      "tags":[],
      "lineno":1032
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The client to toggle mark."
        }
      },
      "summary":"Toggle a client as marked.",
      "name":"awful.client.togglemarked",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c)",
      "tags":[],
      "lineno":1040
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Return the marked clients and empty the marked table.",
      "name":"awful.client.getmarked",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"table"
          }]
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"()",
      "tags":[],
      "lineno":1051
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"s",
        "map":{
          "c":" A client.",
          "s":" True or false."
        }
      },
      "summary":"Set a client floating state, overriding auto-detection.",
      "name":"awful.client.floating.set",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"boolean"
          },
          "c":{
            "type":"client"
          },
          "s":{
            "type":"boolean"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"boolean"
          },
          "c":{
            "type":"client"
          },
          "s":{
            "type":"boolean"
          }
        }
      },
      "description":"\n Floating client are not handled by tiling layouts.",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c, s)",
      "tags":[],
      "lineno":1069
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The client."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"\n This function is deprecated, use `c.is_fixed`",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Return if a client has a fixed size or not.",
      "name":"awful.client.isfixed",
      "type":"deprecated",
      "args":"(c)",
      "kind":"deprecated functions",
      "lineno":1119
    },{
      "parameter":"field",
      "params":{
        "1":"is_fixed",
        "map":{
          "is_fixed":" The fixed size state"
        }
      },
      "modifiers":{
        "see":[[],[]],
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "is_fixed":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "is_fixed":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "readonly":[""],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Return if a client has a fixed size or not.",
      "name":"is_fixed",
      "type":"property",
      "args":"([is_fixed=false])",
      "kind":"object properties",
      "lineno":1134
    },{
      "parameter":"field",
      "params":{
        "1":"immobilized_horizontal",
        "map":{
          "immobilized_horizontal":" The immobilized state"
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "immobilized_horizontal":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "readonly":[[]],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "immobilized_horizontal":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[]
      },
      "description":"\n\n Does the client have a fixed horizontal position and width, i.e. is it\n fullscreen, maximized, or horizontally maximized?\n",
      "tags":{
        "see":[],
        "readonly":[""]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Is the client immobilized horizontally?",
      "name":"immobilized_horizontal",
      "type":"property",
      "args":"([immobilized_horizontal=false])",
      "kind":"object properties",
      "lineno":1160
    },{
      "parameter":"field",
      "params":{
        "1":"immobilized_vertical",
        "map":{
          "immobilized_vertical":" The immobilized state"
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "immobilized_vertical":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "readonly":[[]],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "immobilized_vertical":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[]
      },
      "description":"\n\n Does the client have a fixed vertical position and width, i.e. is it\n fullscreen, maximized, or vertically maximized?\n",
      "tags":{
        "see":[],
        "readonly":[""]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Is the client immobilized vertically?",
      "name":"immobilized_vertical",
      "type":"property",
      "args":"([immobilized_vertical=false])",
      "kind":"object properties",
      "lineno":1176
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" A client."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get a client floating state.",
      "name":"awful.client.floating.get",
      "type":"deprecated",
      "args":"(c)",
      "kind":"deprecated functions",
      "lineno":1187
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"floating",
        "map":{
          "floating":" The floating state."
        }
      },
      "summary":"The client floating state.",
      "name":"floating",
      "modifiers":{
        "field":{
          "1":{
            "type":"boolean"
          },
          "floating":{
            "type":"boolean"
          }
        },
        "propemits":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"boolean"
          },
          "floating":{
            "type":"boolean"
          }
        },
        "request":[[],[],[]]
      },
      "description":"\n\n If the client is part of the tiled layout or free floating.\n\n Note that some windows might be floating even if you\n did not set them manually. For example, windows with a type different than\n normal.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_floating1.svg)\n\n \n     for i = 1, 5 do\n         awful.spawn(&#34Client #&#34..i)\n     end\n  \n    client.get()[1].floating = true\n    client.get()[1]:raise()\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(floating)",
      "tags":{
        "propemits":["false false"],
        "request":["client border floating granted When a border update is required\n  because the client focus status changed.","client border active granted When a client becomes active and is not\n  floating.","client border inactive granted When a client stop being active and\n  is not floating."]
      },
      "lineno":1222
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" A client."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"\n Use `c.floating = not c.floating`",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Toggle the floating state of a client between 'auto' and 'true'.",
      "name":"awful.client.floating.toggle",
      "type":"deprecated",
      "args":"(c)",
      "kind":"deprecated functions",
      "lineno":1280
    },{
      "parameter":"field",
      "params":{
        "1":"x",
        "map":{
          "x":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "emits":[[],[],[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "x":{
            "type":"integer"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "x":{
            "type":"integer"
          }
        },
        "emitstparam":[[]]
      },
      "description":"\n\n `x` (usually) originate from the top left. `x` does *not* include\n the outer client border, but rather where the content and/or titlebar\n starts.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_x1.svg)\n\n \n  \n    client.focus.x = 100\n",
      "tags":{
        "see":[],
        "emitstparam":["property::geometry table geo The\n  geometry (with `x`, `y`, `width`, `height`)."],
        "emits":["property::geometry","property::x","property::position"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The x coordinates.",
      "name":"x",
      "type":"property",
      "args":"(x)",
      "kind":"object properties",
      "lineno":1316
    },{
      "parameter":"field",
      "params":{
        "1":"y",
        "map":{
          "y":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "emits":[[],[],[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "y":{
            "type":"integer"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "y":{
            "type":"integer"
          }
        },
        "emitstparam":[[]]
      },
      "description":"\n\n `y` (usually) originate from the top left. `y` does *not* include\n the outer client border, but rather where the content and/or titlebar\n starts.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_y1.svg)\n\n \n  \n    client.focus.y = 50\n",
      "tags":{
        "see":[],
        "emitstparam":["property::geometry table geo The\n  geometry (with `x`, `y`, `width`, `height`)."],
        "emits":["property::geometry","property::y","property::position"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The y coordinates.",
      "name":"y",
      "type":"property",
      "args":"(y)",
      "kind":"object properties",
      "lineno":1340
    },{
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "emits":[[],[],[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          }
        },
        "emitstparam":[[]]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_width1.svg)\n\n \n  \n    client.focus.width = 100\n",
      "tags":{
        "see":[],
        "emitstparam":["property::geometry table geo The\n  geometry (with `x`, `y`, `width`, `height`)."],
        "emits":["property::geometry","property::width","property::size"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The width of the client.",
      "name":"width",
      "type":"property",
      "args":"(width)",
      "kind":"object properties",
      "lineno":1360
    },{
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "emits":[[],[],[]],
        "field":{
          "1":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          }
        },
        "emitstparam":[[]]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_height1.svg)\n\n \n  \n    client.focus.height = 100\n",
      "tags":{
        "see":[],
        "emitstparam":["property::geometry table geo The\n  geometry (with `x`, `y`, `width`, `height`)."],
        "emits":["property::geometry","property::height","property::size"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The height of the client.",
      "name":"height",
      "type":"property",
      "args":"(height)",
      "kind":"object properties",
      "lineno":1380
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"s",
        "map":{
          "s":" The screen to use."
        }
      },
      "summary":"Restore (=unminimize) a random client.",
      "name":"awful.client.restore",
      "modifiers":{
        "return":[{
            "type":"client"
          }],
        "param":{
          "1":{
            "type":"screen"
          },
          "s":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "type":"screen"
          },
          "s":{
            "type":"screen"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_restore1.svg)\n\n \n    for i = 1, 5 do\n        awful.spawn(&#34c&#34..i)\n    end\n    -- Minimize everything.\n    for _, c in ipairs(client.get()) do\n        c.minimized = true\n    end\n     \n    -- Restore a random client.\n    awful.client.restore()\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(s)",
      "tags":[],
      "lineno":1413
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" the client"
        }
      },
      "summary":"Calculate a client's column number, index in that column, and\n number of visible clients in this column.",
      "name":"awful.client.idx",
      "modifiers":{
        "return":[{
            "type":"table"
          },{
            "type":"integer"
          },{
            "type":"integer"
          },{
            "type":"integer"
          }],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_screen_wfact4.svg)\n\n**Usage example output**:\n\n **Usage example:**\n\n\n \n    for i, c in ipairs(client.get()) do\n        local data = awful.client.idx(c)\n        print(&#34Client #&#34..i..&#34:&#34, data.col, data.idx, data.num)\n    end\n",
      "type":"legacylayout",
      "section":"legacylayout",
      "kind":"layout related functions",
      "args":"(c)",
      "tags":[],
      "lineno":1479
    },{
      "parameter":"field",
      "params":{
        "1":"wfact",
        "2":"c",
        "map":{
          "c":" the client",
          "wfact":" the window factor value"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"client"
          },
          "c":{
            "type":"client"
          },
          "wfact":{
            "type":"number"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"client"
          },
          "c":{
            "type":"client"
          },
          "wfact":{
            "type":"number"
          }
        },
        "emits":[[]]
      },
      "description":"\n\n One valid use case for calling this is restoring serialized layouts.\n This function is rather fragile and the behavior may not remain the\n same across AwesomeWM versions.\n\n When setting a value, make sure the sum remains 1. Otherwise, the\n clients will just go offscreen or get negative size.\n\n \n\n![Usage example](../images/AUTOGEN_screen_wfact3.svg)\n\n \n    awful.client.setwfact(2/3, client.get()[1])\n    awful.client.setwfact(1/3, client.get()[2])\n    awful.client.setwfact(4/8, client.get()[3])\n    awful.client.setwfact(2/8, client.get()[4])\n    awful.client.setwfact(1/8, client.get()[5])\n    awful.client.setwfact(1/8, client.get()[6])\n",
      "tags":{
        "see":[],
        "emits":["property::windowfact Emitted on the c.first_tag object."]
      },
      "section":"legacylayout",
      "inferred":true,
      "subparams":[],
      "summary":"Define how tall a client should be in the tile layout.",
      "name":"awful.client.setwfact",
      "type":"legacylayout",
      "args":"(wfact, c)",
      "kind":"layout related functions",
      "lineno":1559
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"add",
        "2":"c",
        "map":{
          "add":" Amount to increase/decrease the client's window factor by.\n   Should be between `-current_window_factor` and something close to\n   infinite. Normalisation then ensures that the sum of all factors is 1.",
          "c":" the client."
        }
      },
      "summary":"Change window factor of a client.",
      "name":"awful.client.incwfact",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"client"
          },
          "add":{
            "type":"number"
          },
          "c":{
            "type":"client"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"client"
          },
          "add":{
            "type":"number"
          },
          "c":{
            "type":"client"
          }
        },
        "emits":[[]]
      },
      "description":"\n\n This will emit `property::windowfact` on the specific tag object\n `c.screen.selected_tag`.\n\n \n\n![Usage example](../images/AUTOGEN_screen_wfact1.svg)\n\n\n Changing the gap will make some clients taller:\n\n \n\n![Usage example](../images/AUTOGEN_screen_wfact2.svg)\n\n \n    awful.client.incwfact(2, client.get()[4])\n    awful.client.incwfact(3, client.get()[2])\n",
      "type":"legacylayout",
      "section":"legacylayout",
      "kind":"layout related functions",
      "args":"(add, c)",
      "tags":{
        "emits":["property::windowfact"]
      },
      "lineno":1633
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" A client."
        }
      },
      "summary":"Get a client's dockable state.",
      "name":"awful.client.dockable.get",
      "modifiers":{
        "return":[{
            "type":"bool"
          }],
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c)",
      "tags":[],
      "lineno":1657
    },{
      "parameter":"field",
      "params":{
        "1":"dockable",
        "map":{
          "dockable":" The dockable state"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "dockable":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "dockable":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n A dockable client is an application confined to the edge of the screen. The\n space it occupies is subtracted from the `screen.workarea`.\n\n Clients with a type of \"utility\", \"toolbar\" or \"dock\" are dockable by\n default.\n",
      "tags":{
        "see":[],
        "propemits":["false false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"If the client is dockable.",
      "name":"dockable",
      "type":"property",
      "args":"(dockable)",
      "kind":"object properties",
      "lineno":1675
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"value",
        "map":{
          "c":" A client.",
          "value":" True or false."
        }
      },
      "summary":"Set a client's dockable state, overriding auto-detection.",
      "name":"awful.client.dockable.set",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"boolean"
          },
          "c":{
            "type":"client"
          },
          "value":{
            "type":"boolean"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"boolean"
          },
          "c":{
            "type":"client"
          },
          "value":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n With this enabled you can dock windows by moving them from the center\n to the edge of the workarea.\n",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c, value)",
      "tags":[],
      "lineno":1698
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"requests_no_titlebar",
        "map":{
          "requests_no_titlebar":" Whether the client\n  requests not to get a titlebar."
        }
      },
      "summary":"If the client requests not to be decorated with a titlebar.",
      "name":"requests_no_titlebar",
      "modifiers":{
        "param":{
          "1":{
            "type":"boolean"
          },
          "requests_no_titlebar":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "requests_no_titlebar":{
            "type":"boolean"
          }
        }
      },
      "description":"\n\n The motif wm hints allow a client to request not to be decorated by the WM in\n various ways. This property uses the motif `MWM_DECOR_TITLE` hint and\n interprets it as the client (not) wanting a titlebar.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(requests_no_titlebar)",
      "tags":{
        "propemits":["false false"]
      },
      "lineno":1714
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"prop",
        "map":{
          "c":" The client.",
          "prop":" The property name."
        }
      },
      "summary":"Get a client property.",
      "name":"awful.client.property.get",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "c":{
            "type":"client"
          },
          "prop":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "c":{
            "type":"client"
          },
          "prop":{
            "type":"string"
          }
        }
      },
      "description":"\n\n This method is deprecated. It is now possible to use `c.value` directly.\n",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c, prop)",
      "tags":[],
      "lineno":1741
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"prop",
        "3":"value",
        "map":{
          "value":" The property value.",
          "c":" The client.",
          "prop":" The property name."
        }
      },
      "summary":"Set a client property.",
      "name":"awful.client.property.set",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":[],
          "value":[],
          "c":{
            "type":"client"
          },
          "prop":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string"
          },
          "3":[],
          "value":[],
          "c":{
            "type":"client"
          },
          "prop":{
            "type":"string"
          }
        }
      },
      "description":"\n\n This method is deprecated. It is now possible to use `c.value = value`\n directly.\n",
      "type":"deprecated",
      "section":"deprecated",
      "kind":"deprecated functions",
      "args":"(c, prop, value)",
      "tags":[],
      "lineno":1765
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"prop",
        "2":"kind",
        "map":{
          "prop":" The property name.",
          "kind":" The type (used for register_xproperty).\n   One of \"string\", \"number\" or \"boolean\"."
        }
      },
      "summary":"Set a client property to be persistent across restarts (via X properties).",
      "name":"awful.client.property.persist",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "prop":{
            "type":"string"
          },
          "kind":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "prop":{
            "type":"string"
          },
          "kind":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(prop, kind)",
      "tags":[],
      "lineno":1784
    },{
      "parameter":"field",
      "params":{
        "1":"filter",
        "2":"start",
        "3":"s",
        "map":{
          "start":"  what index to start iterating from.  Defaults to using the\n   index of the currently focused client.",
          "filter":" a function that returns true to indicate a positive match.",
          "s":" which screen to use.  nil means all screens."
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "type":"function"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"screen"
          },
          "start":{
            "type":"integer"
          },
          "filter":{
            "type":"function"
          },
          "s":{
            "type":"screen"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"function"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"screen"
          },
          "start":{
            "type":"integer"
          },
          "filter":{
            "type":"function"
          },
          "s":{
            "type":"screen"
          }
        },
        "usage":[[]]
      },
      "description":"\n\n Starting from the client in focus or the given index, all clients that match\n a given criteria.\n",
      "tags":[],
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Returns an iterator to cycle through clients.",
      "name":"awful.client.iterate",
      "kind":"static module functions",
      "usage":["-- un-minimize all urxvt instances\nlocal urxvt = function (c)\n  return ruled.client.match(c, {class = \"URxvt\"})\nend\n\nfor c in awful.client.iterate(urxvt) do\n  c.minimized = false\nend\n"],
      "args":"(filter, start, s)",
      "type":"staticfct",
      "lineno":1816
    },{
      "parameter":"field",
      "params":{
        "1":"cmd",
        "2":"matcher",
        "3":"merge",
        "map":{
          "merge":" If true then merge tags (select the client's\n   first tag additionally) when the client is not visible.\n   If it is a function, it will be called with the client as argument.",
          "matcher":" a function that returns true to indicate a matching client",
          "cmd":" the command to execute"
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "3":{
            "type":"bool|function"
          },
          "merge":{
            "type":"bool|function"
          },
          "matcher":{
            "type":"function"
          },
          "cmd":{
            "type":"string"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "3":{
            "type":"bool|function"
          },
          "merge":{
            "type":"bool|function"
          },
          "matcher":{
            "type":"function"
          },
          "cmd":{
            "type":"string"
          }
        },
        "usage":[[]]
      },
      "description":"\n If multiple clients match the given condition then the next one is\n focused.\n",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Switch to a client matching the given condition if running, else spawn it.",
      "name":"awful.client.run_or_raise",
      "kind":"deprecated functions",
      "usage":["-- run or raise urxvt (perhaps, with tabs) on modkey + semicolon\nawful.key({ modkey, }, 'semicolon', function ()\n    local matcher = function (c)\n        return ruled.client.match(c, {class = 'URxvt'})\n    end\n    awful.client.run_or_raise('urxvt', matcher)\nend);\n"],
      "args":"(cmd, matcher, merge)",
      "type":"deprecated",
      "lineno":1844
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"matcher",
        "map":{
          "c":" The client.",
          "matcher":" A function that should return true, if\n   a matching parent client is found."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"client|nil"
          }],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"function"
          },
          "c":{
            "type":"client"
          },
          "matcher":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"function"
          },
          "c":{
            "type":"client"
          },
          "matcher":{
            "type":"function"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get a matching transient_for client (if any).",
      "name":"awful.client.get_transient_for_matching",
      "type":"deprecated",
      "args":"(c, matcher)",
      "kind":"deprecated functions",
      "lineno":1869
    },{
      "parameter":"field",
      "params":{
        "1":"matcher",
        "map":{
          "matcher":" A function that should return true, if\n   a matching parent client is found."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[{
            "type":"client|nil"
          }],
        "param":{
          "1":{
            "type":"function"
          },
          "matcher":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"function"
          },
          "matcher":{
            "type":"function"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Get a matching transient_for client (if any).",
      "name":"get_transient_for_matching",
      "type":"method",
      "args":"(matcher)",
      "kind":"object methods ",
      "lineno":1884
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"c2",
        "map":{
          "c":" The child client (having transient_for).",
          "c2":" The parent client to check."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"client|nil"
          }],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"client"
          },
          "c":{
            "type":"client"
          },
          "c2":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"client"
          },
          "c":{
            "type":"client"
          },
          "c2":{
            "type":"client"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Is a client transient for another one?",
      "name":"awful.client.is_transient_for",
      "type":"deprecated",
      "args":"(c, c2)",
      "kind":"deprecated functions",
      "lineno":1902
    },{
      "parameter":"field",
      "params":{
        "1":"c2",
        "map":{
          "c2":" The parent client to check."
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "return":[{
            "type":"client|nil"
          }],
        "param":{
          "1":{
            "type":"client"
          },
          "c2":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"client"
          },
          "c2":{
            "type":"client"
          }
        }
      },
      "description":"\n\n This will traverse the chain formed by the `transient_for` property of `self`\n until a client `c` with `c.transient_for == c2` is found. The found client\n `c` is returned. If no client is found, `nil` is returned.\n\n While `transient_for` chains are technically possible, they are unlikely, so\n the most likely return values are `self` and `nil`.\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Is a client transient for another one?",
      "name":"is_transient_for",
      "type":"method",
      "args":"(c2)",
      "kind":"object methods ",
      "lineno":1923
    },{
      "parameter":"field",
      "params":{
        "1":"A",
        "map":{
          "A":" gears.shape compatible function."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"gears.shape"
          },
          "A":{
            "type":"gears.shape"
          }
        },
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"gears.shape"
          },
          "A":{
            "type":"gears.shape"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_awful_client_shape1.svg)\n\n \n     c1.shape = gears.shape.rectangle\n     c2.shape = gears.shape.rounded_rect\n     c3.shape = gears.shape.octogon\n",
      "tags":{
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Set the client shape.",
      "name":"shape",
      "type":"property",
      "args":"(A)",
      "kind":"object properties",
      "lineno":1961
    },{
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.context":" Why was this activate called?",
          "args.toggle_minimization":"",
          "args.force":" Force the activation even for unfocusable\n  clients.",
          "args.action":" Once activated, perform an action.",
          "args.switch_to_tag":"",
          "args":"",
          "args.switch_to_tags":"",
          "args.raise":" Raise the client to the top of its layer\n  and unminimize it (if needed)."
        }
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string",
            "opt":"other"
          },
          "3":{
            "type":"boolean",
            "opt":"true"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"boolean",
            "opt":"false"
          },
          "6":{
            "type":"boolean",
            "opt":"false"
          },
          "7":{
            "type":"boolean",
            "opt":"false"
          },
          "8":{
            "type":"boolean",
            "opt":"false"
          },
          "args.context":{
            "type":"string",
            "opt":"other"
          },
          "args.toggle_minimization":{
            "type":"boolean",
            "opt":"false"
          },
          "args.force":{
            "type":"boolean",
            "opt":"false"
          },
          "args.action":{
            "type":"boolean",
            "opt":"false"
          },
          "args.switch_to_tag":{
            "type":"boolean",
            "opt":"false"
          },
          "args":{
            "type":"table"
          },
          "args.switch_to_tags":{
            "type":"boolean",
            "opt":"false"
          },
          "args.raise":{
            "type":"boolean",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string",
            "opt":"other"
          },
          "3":{
            "type":"boolean",
            "opt":"true"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"boolean",
            "opt":"false"
          },
          "6":{
            "type":"boolean",
            "opt":"false"
          },
          "7":{
            "type":"boolean",
            "opt":"false"
          },
          "8":{
            "type":"boolean",
            "opt":"false"
          },
          "args.context":{
            "type":"string",
            "opt":"other"
          },
          "args.toggle_minimization":{
            "type":"boolean",
            "opt":"false"
          },
          "args.force":{
            "type":"boolean",
            "opt":"false"
          },
          "args.action":{
            "type":"boolean",
            "opt":"false"
          },
          "args.switch_to_tag":{
            "type":"boolean",
            "opt":"false"
          },
          "args":{
            "type":"table"
          },
          "args.switch_to_tags":{
            "type":"boolean",
            "opt":"false"
          },
          "args.raise":{
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"\n\n This method is the correct way to focus a client. While\n `client.focus = my_client` works and is commonly used in older code, it has\n some drawbacks. The most obvious one is that it bypasses the activate\n filters. It also doesn't handle minimized clients well and requires a lot\n of boilerplate code to make work properly.\n\n The valid `args.actions` are:\n\n * **mouse_move**: Move the client when the mouse cursor moves until the\n  mouse buttons are release.\n * **mouse_resize**: Resize the client when the mouse cursor moves until the\n  mouse buttons are release.\n * **mouse_center**: Move the mouse cursor to the center of the client if it\n  isn't already within its geometry,\n * **toggle_minimization**: If the client is already active, minimize it.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_activate1.svg)\n\n**Usage example output**:\n\n **Usage example:**\n\n\n \n    client.get()[8]:activate {\n         switch_to_tag = true,\n         raise         = true,\n         context       = &#34somet_reason&#34,\n    }\n     \n    -- Since this isnt denied by any permission, it will be true.\n    print(\n        &#34Confirm:&#34, client.get()[8].active, client.focus == client.get()[8]\n    )\n",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":{
        "args":["args.context","args.raise","args.force","args.switch_to_tags","args.switch_to_tag","args.action","args.toggle_minimization"]
      },
      "summary":"Activate (focus) a client.",
      "name":"activate",
      "type":"method",
      "args":"(args)",
      "kind":"object methods ",
      "lineno":2036
    },{
      "parameter":"field",
      "params":{
        "1":"permission",
        "2":"context",
        "map":{
          "permission":" The permission name (just the name, no `request::`).",
          "context":" The reason why this permission is requested."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "permission":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "permission":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Grant a permission for a client.",
      "name":"grant",
      "type":"method",
      "args":"(permission, context)",
      "kind":"object methods ",
      "lineno":2078
    },{
      "parameter":"field",
      "params":{
        "1":"permission",
        "2":"context",
        "map":{
          "permission":" The permission name (just the name, no `request::`).",
          "context":" The reason why this permission is requested."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "permission":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "permission":{
            "type":"string"
          },
          "context":{
            "type":"string"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Deny a permission for a client.",
      "name":"deny",
      "type":"method",
      "args":"(permission, context)",
      "kind":"object methods ",
      "lineno":2085
    },{
      "parameter":"field",
      "params":{
        "1":"active",
        "map":{
          "active":""
        }
      },
      "modifiers":{
        "see":[[],[],[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "active":{
            "type":"boolean"
          }
        },
        "return":[],
        "readonly":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "active":{
            "type":"boolean"
          }
        },
        "request":[[],[]]
      },
      "description":"\n\n This property is **READ ONLY**. Use `c:activate { context = \"myreason\" }`\n to change the focus.\n\n The reason for this is that directly setting the focus\n (which can also be done using `client.focus = c`) will bypass the focus\n stealing filters. This is easy at first, but as this gets called from more\n and more places, it quickly become unmanageable. This coding style is\n recommended for maintainable code:\n\n    -- Check if a client has focus:\n    if c.active then\n        -- do something\n    end\n\n    -- Check if there is a active (focused) client:\n    if client.focus ~= nil then\n        -- do something\n    end\n\n    -- Get the active (focused) client:\n    local c = client.focus\n\n    -- Set the focus:\n    c:activate {\n        context       = \"myreason\",\n        switch_to_tag = true,\n    }\n\n    -- Get notified when a client gets or loses the focus:\n    c:connect_signal(\"property::active\", function(c, is_active)\n        -- do something\n    end)\n\n    -- Get notified when any client gets or loses the focus:\n    client.connect_signal(\"property::active\", function(c, is_active)\n        -- do something\n    end)\n\n    -- Get notified when any client gets the focus:\n    client.connect_signal(\"focus\", function(c)\n        -- do something\n    end)\n\n    -- Get notified when any client loses the focus:\n    client.connect_signal(\"unfocus\", function(c)\n        -- do something\n    end)\n",
      "tags":{
        "see":[],
        "readonly":[""],
        "request":["client border active granted When a client becomes active.","client border inactive granted When a client stop being active."]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Return true if the client is active (has focus).",
      "name":"active",
      "type":"property",
      "args":"(active)",
      "kind":"object properties",
      "lineno":2146
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"The last geometry when client was floating.",
      "name":"property::floating_geometry",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":2173
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"content",
        "2":"hints",
        "map":{
          "content":" The context (like \"rules\")",
          "hints":" Some hints."
        }
      },
      "summary":"Emitted when a client need to get a titlebar.",
      "name":"request::titlebars",
      "modifiers":{
        "field":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "2":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "content":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "hints":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          }
        },
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "2":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "content":{
            "optchain":"nil",
            "type":"string",
            "opt":"nil"
          },
          "hints":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          }
        },
        "classsignal":[[]]
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"([content=nil[, hints=nil]])",
      "tags":{
        "classsignal":[""]
      },
      "lineno":2179
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"The client marked signal.",
      "name":"marked",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"deprecatedsignal",
      "section":"deprecatedsignal",
      "kind":"deprecated signals",
      "args":"()",
      "tags":[],
      "lineno":2182
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"The client unmarked signal.",
      "name":"unmarked",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"deprecatedsignal",
      "section":"deprecatedsignal",
      "kind":"deprecated signals",
      "args":"()",
      "tags":[],
      "lineno":2185
    },{
      "parameter":"field",
      "params":{
        "1":"context",
        "2":"hints",
        "map":{
          "hints":" The hints.",
          "context":" The context."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"table"
          },
          "hints":{
            "type":"table"
          },
          "context":{
            "type":"string"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"table"
          },
          "hints":{
            "type":"table"
          },
          "context":{
            "type":"string"
          }
        },
        "classsignal":[[]]
      },
      "description":"\n\n The context are:\n\n * **added**: When a new client is created.\n * **active**: When client gains the focus (or stop being urgent/floating\n   but is active).\n * **inactive**: When client loses the focus (or stop being urgent/floating\n   and is not active.\n * **urgent**: When a client becomes urgent.\n * **floating**: When the floating or maximization state changes.\n",
      "tags":{
        "see":[],
        "classsignal":[""]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"Emitted when the border client might need to be update.",
      "name":"request::border",
      "type":"signal",
      "args":"(context, hints)",
      "kind":"signals",
      "lineno":2203
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"merge",
        "map":{
          "merge":" If true then merge tags (select the client's\n   first tag additionally) when the client is not visible.\n   If it is a function, it will be called with the client as argument."
        }
      },
      "summary":"Jump to the client that received the urgent hint first.",
      "name":"awful.client.urgent.jumpto",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"bool|function"
          },
          "merge":{
            "type":"bool|function"
          }
        },
        "field":{
          "1":{
            "type":"bool|function"
          },
          "merge":{
            "type":"bool|function"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_jump_to_urgent1.svg)\n\n \n    awful.client.urgent.jumpto(false)\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(merge)",
      "tags":[],
      "lineno":2217
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":2316
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":2322
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":2335
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"c",
        "map":{
          "c":" The client that must be removed."
        }
      },
      "summary":"Remove a client from the focus history",
      "name":"awful.client.focus.history.delete",
      "modifiers":{
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "return":[]
      },
      "description":"",
      "type":"function",
      "section":"lib.awful.client.focus Functions",
      "kind":"lib.awful.client.focus functions",
      "args":"(c)",
      "tags":{
        "within":"lib.awful.client.focus Functions"
      },
      "lineno":49
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"i",
        "2":"c",
        "map":{
          "i":" The index.",
          "c":" The client."
        }
      },
      "summary":"Focus a client by its relative index.",
      "name":"awful.client.focus.byidx",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "i":[],
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        },
        "request":[[]]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_focus_byidx1.svg)\n\n**Usage example output**:\n\n **Usage example:**\n\n\n \n    -- Print at which index each client is now at.\n    local function print_indices()\n        color_focus()\n        local output = &#34&#34\n         \n        for idx, c in ipairs(client.get()) do\n             output = output .. c.name .. &#34:&#34 .. idx .. &#34, &#34\n        end\n         \n        print(output)\n    end\n     \n    print_indices()\n     \n    print(&#34Call focus.byidx&#34)\n    awful.client.focus.byidx(3, client.get()[1])\n    print_indices()\n     \n    print(&#34Call focus.byidx&#34)\n    awful.client.focus.byidx(2, client.get()[4])\n    print_indices()\n",
      "type":"function",
      "section":"lib.awful.client.focus Functions",
      "kind":"lib.awful.client.focus functions",
      "args":"(i[, c])",
      "tags":{
        "within":"lib.awful.client.focus Functions",
        "request":["client activate client.focus.byidx granted When `awful.focus.byidx`\n  is called."]
      },
      "lineno":97
    },{
      "parameter":"param",
      "params":{
        "1":"c",
        "map":{
          "c":" A client."
        }
      },
      "modifiers":{
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "return":[[]]
      },
      "description":"\n This usually means that desktop, dock and splash windows are\n not registered and cannot get focus.\n",
      "type":"function",
      "tags":{
        "within":"lib.awful.client.focus Functions"
      },
      "section":"lib.awful.client.focus Functions",
      "inferred":true,
      "subparams":[],
      "summary":"Filter out window that we do not want handled by focus.",
      "name":"awful.client.focus.filter",
      "retgroups":[{
          "g":0,
          "1":{
            "text":"The same client if it's ok, nil otherwise.",
            "type":"",
            "mods":[]
          }
        }],
      "ret":["The same client if it's ok, nil otherwise."],
      "kind":"lib.awful.client.focus functions",
      "args":"(c)",
      "lineno":112
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"c",
        "map":{
          "c":" The client that has been focused."
        }
      },
      "summary":"Update client focus history.",
      "name":"awful.client.focus.history.add",
      "modifiers":{
        "param":{
          "1":{
            "type":"client"
          },
          "c":{
            "type":"client"
          }
        },
        "return":[]
      },
      "description":"",
      "type":"function",
      "section":"lib.awful.client.focus Functions",
      "kind":"lib.awful.client.focus functions",
      "args":"(c)",
      "tags":{
        "within":"lib.awful.client.focus Functions"
      },
      "lineno":126
    },{
      "parameter":"param",
      "params":{
        "1":"s",
        "2":"idx",
        "3":"filter",
        "map":{
          "s":" The screen to look for.",
          "idx":" The index: 0 will return first candidate,\n   1 will return second, etc.",
          "filter":" An optional filter.  If no client is found in the\n   first iteration, `awful.client.focus.filter` is used by default to get any\n   client."
        }
      },
      "modifiers":{
        "param":{
          "1":{
            "type":"int|screen"
          },
          "2":{
            "type":"int"
          },
          "3":{
            "type":"function"
          },
          "s":{
            "type":"int|screen"
          },
          "idx":{
            "type":"int"
          },
          "filter":{
            "type":"function"
          }
        },
        "return":[{
            "type":"client.object"
          }]
      },
      "description":"",
      "type":"function",
      "tags":{
        "within":"lib.awful.client.focus Functions"
      },
      "section":"lib.awful.client.focus Functions",
      "inferred":true,
      "subparams":[],
      "summary":"Get the latest focused client for a screen in history.",
      "name":"awful.client.focus.history.get",
      "retgroups":[{
          "g":0,
          "1":{
            "text":"A client.",
            "type":"client.object",
            "mods":{
              "type":"client.object"
            }
          }
        }],
      "ret":["A client."],
      "kind":"lib.awful.client.focus functions",
      "args":"(s, idx, filter)",
      "lineno":143
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "map":[]
      },
      "summary":"Focus the previous client in history.",
      "name":"awful.client.focus.history.previous",
      "modifiers":{
        "return":[],
        "param":[],
        "request":[[]]
      },
      "description":"",
      "type":"function",
      "section":"lib.awful.client.focus Functions",
      "kind":"lib.awful.client.focus functions",
      "args":"()",
      "tags":{
        "within":"lib.awful.client.focus Functions",
        "request":["client activate client.focus.history.previous granted When\n  `awful.focus.history.previous` is called."]
      },
      "lineno":180
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"dir",
        "2":"c",
        "3":"stacked",
        "map":{
          "stacked":" Use stacking order? (top to bottom)",
          "dir":" The direction, can be either\n   `\"up\"`, `\"down\"`, `\"left\"` or `\"right\"`.",
          "c":" The client."
        }
      },
      "summary":"Focus a client by the given direction.",
      "name":"awful.client.focus.bydirection",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "dir":{
            "type":"string"
          },
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        },
        "request":[[]]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_focus_bydirection1.svg)\n\n \n     \n    -- It will go up in the same column.\n    awful.client.focus.bydirection(&#34up&#34, client.focus)\n     \n    -- Nothing happens because it cannot change screen.\n    awful.client.focus.bydirection(&#34right&#34, client.focus)\n     \n    -- Moves to the first column.\n    awful.client.focus.bydirection(&#34left&#34, client.focus)\n",
      "type":"function",
      "section":"lib.awful.client.focus Functions",
      "kind":"lib.awful.client.focus functions",
      "args":"(dir[, c[, stacked=false]])",
      "tags":{
        "within":"lib.awful.client.focus Functions",
        "request":["client activate client.focus.bydirection granted When\n  `awful.focus.bydirection` is called."]
      },
      "lineno":214
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"dir",
        "2":"c",
        "3":"stacked",
        "map":{
          "stacked":" Use stacking order? (top to bottom)",
          "dir":" The direction, can be either \"up\", \"down\", \"left\" or \"right\".",
          "c":" The client."
        }
      },
      "summary":"Focus a client by the given direction.",
      "name":"awful.client.focus.global_bydirection",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":{
            "optchain":true,
            "type":"client",
            "opt":true
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "stacked":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "dir":[],
          "c":{
            "optchain":true,
            "type":"client",
            "opt":true
          }
        },
        "request":[[]]
      },
      "description":" Moves across screens.\n\n \n\n![Usage example](../images/AUTOGEN_sequences_client_focus_bydirection2.svg)\n\n \n     \n    -- It will go up in the same column.\n    awful.client.focus.global_bydirection(&#34up&#34, client.focus)\n     \n    -- It will cross to screen[2].\n    awful.client.focus.global_bydirection(&#34right&#34, client.focus)\n     \n    -- Moves to the first column.\n    awful.client.focus.global_bydirection(&#34left&#34, client.focus)\n",
      "type":"function",
      "section":"lib.awful.client.focus Functions",
      "kind":"lib.awful.client.focus functions",
      "args":"(dir[, c[, stacked=false]])",
      "tags":{
        "within":"lib.awful.client.focus Functions",
        "request":["client activate client.focus.global_bydirection granted When\n  `awful.client.focus.global_bydirection` is called."]
      },
      "lineno":256
    },{
      "parameter":"param",
      "params":{
        "map":[]
      },
      "modifiers":{
        "param":[],
        "return":[{
            "type":"bool"
          },{
            "type":"int"
          }]
      },
      "description":"",
      "type":"function",
      "tags":{
        "within":"lib.awful.client.focus Functions"
      },
      "section":"lib.awful.client.focus Functions",
      "inferred":true,
      "subparams":[],
      "summary":"Is history tracking enabled?",
      "name":"awful.client.focus.history.is_enabled",
      "retgroups":[{
          "1":{
            "text":"True if history tracking is enabled.",
            "type":"bool",
            "mods":{
              "type":"bool"
            }
          },
          "2":{
            "text":"The number of times that tracking has been disabled.",
            "type":"int",
            "mods":{
              "type":"int"
            }
          },
          "g":0
        }],
      "ret":["True if history tracking is enabled.","The number of times that tracking has been disabled."],
      "kind":"lib.awful.client.focus functions",
      "args":"()",
      "lineno":288
    },{
      "parameter":"param",
      "params":{
        "map":[]
      },
      "modifiers":{
        "param":[],
        "return":[{
            "type":"boolean"
          }]
      },
      "description":"\n\n This is the default, but can be disabled\n through `awful.client.focus.history.disable_tracking`.",
      "type":"function",
      "tags":{
        "within":"lib.awful.client.focus Functions"
      },
      "section":"lib.awful.client.focus Functions",
      "inferred":true,
      "subparams":[],
      "summary":"Enable history tracking.",
      "name":"awful.client.focus.history.enable_tracking",
      "retgroups":[{
          "g":0,
          "1":{
            "text":"True if history tracking has been enabled.",
            "type":"boolean",
            "mods":{
              "type":"boolean"
            }
          }
        }],
      "ret":["True if history tracking has been enabled."],
      "kind":"lib.awful.client.focus functions",
      "args":"()",
      "lineno":295
    },{
      "parameter":"param",
      "params":{
        "map":[]
      },
      "modifiers":{
        "param":[],
        "return":[{
            "type":"int"
          }]
      },
      "description":"\n\n See `awful.client.focus.history.enable_tracking` to enable it again.",
      "type":"function",
      "tags":{
        "within":"lib.awful.client.focus Functions"
      },
      "section":"lib.awful.client.focus Functions",
      "inferred":true,
      "subparams":[],
      "summary":"Disable history tracking.",
      "name":"awful.client.focus.history.disable_tracking",
      "retgroups":[{
          "g":0,
          "1":{
            "text":"The internal value of `disabled_count` (calls to this\n   function without calling `awful.client.focus.history.enable_tracking`).",
            "type":"int",
            "mods":{
              "type":"int"
            }
          }
        }],
      "ret":["The internal value of `disabled_count` (calls to this\n   function without calling `awful.client.focus.history.enable_tracking`)."],
      "kind":"lib.awful.client.focus functions",
      "args":"()",
      "lineno":303
    }],
  "lineno":96
}