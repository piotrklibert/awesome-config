{
  "modifiers":{
    "see":[[]],
    "author":[[]],
    "usage":[[]],
    "copyright":[]
  },
  "description":"\n\n This widget is a specialized `wibox.widget.textbox` with the following extra\n features:\n\n * Honor the `beautiful` notification variables.\n * React to the `naughty.notification` object title changes.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_title_simple.svg)\n",
  "type":"widgetmod",
  "mod_name":"naughty.widget.title",
  "tags":{
    "author":["Emmanuel Lepage Vallee &lt;elv1313@gmail.com&gt;"],
    "copyright":"2017 Emmanuel Lepage Vallee",
    "see":[]
  },
  "inferred":true,
  "kind":"widgets",
  "summary":"A notification title.",
  "sections":{
    "by_name":[]
  },
  "name":"naughty.widget.title",
  "see":[{
      "label":"wibox.widget.textbox",
      "mod":{
        "inferred":true,
        "kind":"widgets",
        "mod_name":"wibox.widget.textbox",
        "summary":"A widget to display either plain or HTML text.",
        "sections":{
          "by_name":[]
        },
        "name":"wibox.widget.textbox",
        "modifiers":{
          "usage":[[]],
          "author":[[],[]],
          "supermodule":[[]],
          "copyright":[]
        },
        "description":"\n\n\n\n![Usage example](../images/AUTOGEN_wibox_widget_defaults_textbox.svg)\n",
        "items":[{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"string",
              "map":{
                "string":""
              }
            },
            "summary":"The textbox font.",
            "name":"beautiful.font",
            "modifiers":{
              "return":[],
              "param":{
                "1":[],
                "string":[]
              },
              "field":{
                "1":[],
                "string":[]
              }
            },
            "description":"",
            "type":"beautiful",
            "section":"beautiful",
            "kind":"theme variables",
            "args":"(string)",
            "tags":[],
            "lineno":39
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"s",
              "map":{
                "s":" The screen on which the textbox will be displayed."
              }
            },
            "summary":"Get the preferred size of a textbox.",
            "name":"get_preferred_size",
            "modifiers":{
              "return":[{
                  "type":"number"
                },{
                  "type":"number"
                }],
              "param":{
                "1":{
                  "type":"integer|screen"
                },
                "s":{
                  "type":"integer|screen"
                }
              },
              "field":{
                "1":{
                  "type":"integer|screen"
                },
                "s":{
                  "type":"integer|screen"
                }
              }
            },
            "description":"\n\n This returns the size that the textbox would use if infinite space were\n available.\n",
            "type":"method",
            "section":"method",
            "kind":"object methods ",
            "args":"(s)",
            "tags":[],
            "lineno":94
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"width",
              "2":"s",
              "map":{
                "s":" The screen on which the textbox will be displayed.",
                "width":" The available width."
              }
            },
            "summary":"Get the preferred height of a textbox at a given width.",
            "name":"get_height_for_width",
            "modifiers":{
              "return":[{
                  "type":"number"
                }],
              "param":{
                "1":{
                  "type":"number"
                },
                "2":{
                  "type":"integer|screen"
                },
                "s":{
                  "type":"integer|screen"
                },
                "width":{
                  "type":"number"
                }
              },
              "field":{
                "1":{
                  "type":"number"
                },
                "2":{
                  "type":"integer|screen"
                },
                "s":{
                  "type":"integer|screen"
                },
                "width":{
                  "type":"number"
                }
              }
            },
            "description":"\n\n This returns the height that the textbox would use when it is limited to the\n given width.\n",
            "type":"method",
            "section":"method",
            "kind":"object methods ",
            "args":"(width, s)",
            "tags":[],
            "lineno":115
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"dpi",
              "map":{
                "dpi":" The DPI value to render at."
              }
            },
            "summary":"Get the preferred size of a textbox.",
            "name":"get_preferred_size_at_dpi",
            "modifiers":{
              "return":[{
                  "type":"number"
                },{
                  "type":"number"
                }],
              "param":{
                "1":{
                  "type":"number"
                },
                "dpi":{
                  "type":"number"
                }
              },
              "field":{
                "1":{
                  "type":"number"
                },
                "dpi":{
                  "type":"number"
                }
              }
            },
            "description":"\n\n This returns the size that the textbox would use if infinite space were\n available.\n",
            "type":"method",
            "section":"method",
            "kind":"object methods ",
            "args":"(dpi)",
            "tags":[],
            "lineno":135
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"width",
              "2":"dpi",
              "map":{
                "dpi":" The DPI value to render at.",
                "width":" The available width."
              }
            },
            "summary":"Get the preferred height of a textbox at a given width.",
            "name":"get_height_for_width_at_dpi",
            "modifiers":{
              "return":[{
                  "type":"number"
                }],
              "param":{
                "1":{
                  "type":"number"
                },
                "2":{
                  "type":"number"
                },
                "dpi":{
                  "type":"number"
                },
                "width":{
                  "type":"number"
                }
              },
              "field":{
                "1":{
                  "type":"number"
                },
                "2":{
                  "type":"number"
                },
                "dpi":{
                  "type":"number"
                },
                "width":{
                  "type":"number"
                }
              }
            },
            "description":"\n\n This returns the height that the textbox would use when it is limited to the\n given width.\n",
            "type":"method",
            "section":"method",
            "kind":"object methods ",
            "args":"(width, dpi)",
            "tags":[],
            "lineno":152
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"text",
              "map":{
                "text":" The text to set. This can contain pango markup (e.g.\n   `<b>bold</b>`). You can use `gears.string.escape` to escape\n   parts of it."
              }
            },
            "summary":"Set the text of the textbox.(with\n [Pango markup](https://docs.gtk.org/Pango/pango_markup.html)).",
            "name":"set_markup_silently",
            "modifiers":{
              "return":[{
                  "1":true,
                  "type":"boolean"
                },{
                  "type":"boolean",
                  "2":true
                },{
                  "type":"string",
                  "2":true
                }],
              "param":{
                "1":{
                  "type":"string"
                },
                "text":{
                  "type":"string"
                }
              },
              "field":{
                "1":{
                  "type":"string"
                },
                "text":{
                  "type":"string"
                }
              }
            },
            "description":"",
            "type":"method",
            "section":"method",
            "kind":"object methods ",
            "args":"(text)",
            "tags":[],
            "lineno":171
          },{
            "parameter":"field",
            "params":{
              "1":"markup",
              "map":{
                "markup":" The text to set. This can contain pango markup (e.g.\n   `<b>bold</b>`). You can use `gears.string.escape` to escape\n   parts of it."
              }
            },
            "modifiers":{
              "see":[[]],
              "field":{
                "1":{
                  "type":"string"
                },
                "markup":{
                  "type":"string"
                }
              },
              "return":[],
              "propemits":[[]],
              "param":{
                "1":{
                  "type":"string"
                },
                "markup":{
                  "type":"string"
                }
              }
            },
            "description":"\n\n The main difference between `text` and `markup` is that `markup` is\n able to render a small subset of HTML tags. See the\n [Pango markup](https://docs.gtk.org/Pango/pango_markup.html)) documentation\n to see what is and isn't valid in this property.\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_markup1.svg)\n\n \n     local w = wibox.widget {\n         markup = &#34This is some <i>text</i>, <b>HTML tags</b> <u>WILL</u> work.&#34,\n         widget = wibox.widget.textbox,\n     }\n\n The `wibox.widget.textbox` colors are usually set by wrapping into a\n `wibox.container.background` widget, but can also be done using the\n markup:\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_markup2.svg)\n\n \n     local w = wibox.widget {\n         markup = &#34<span background='#ff0000' foreground='#0000ff'>Some</span>&#34..\n           &#34 nice <span foreground='#00ff00'>colors!</span>&#34,\n         widget = wibox.widget.textbox,\n     }\n",
            "tags":{
              "see":[],
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set the HTML text of the textbox.",
            "name":"markup",
            "type":"property",
            "args":"(markup)",
            "kind":"object properties",
            "lineno":230
          },{
            "parameter":"field",
            "params":{
              "1":"text",
              "map":{
                "text":" The text to display. Pango markup is ignored and shown\n  as-is."
              }
            },
            "modifiers":{
              "see":[[]],
              "field":{
                "1":{
                  "type":"string"
                },
                "text":{
                  "type":"string"
                }
              },
              "return":[],
              "propemits":[[]],
              "param":{
                "1":{
                  "type":"string"
                },
                "text":{
                  "type":"string"
                }
              }
            },
            "description":"\n\n This property renders the text as-is, it does not interpret it:\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_text1.svg)\n\n \n     local w = wibox.widget {\n         text   = &#34This is some <i>text</i>, <b>HTML tags</b> will <u>NOT</u> work.&#34,\n         widget = wibox.widget.textbox,\n     }\n\n One exception are the control characters, which are interpreted:\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_text2.svg)\n\n \n     local w = wibox.widget {\n         text   = &#34This is some text\\nover\\nmultiple lines!&#34,\n         widget = wibox.widget.textbox,\n     }\n",
            "tags":{
              "see":[],
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set a textbox plain text.",
            "name":"text",
            "type":"property",
            "args":"(text)",
            "kind":"object properties",
            "lineno":273
          },{
            "parameter":"field",
            "params":{
              "1":"mode",
              "map":{
                "mode":" The ellipsize mode."
              }
            },
            "modifiers":{
              "field":{
                "1":{
                  "optchain":"\"end\"",
                  "type":"string",
                  "opt":"\"end\""
                },
                "mode":{
                  "optchain":"\"end\"",
                  "type":"string",
                  "opt":"\"end\""
                }
              },
              "usage":[[]],
              "return":[],
              "param":{
                "1":{
                  "optchain":"\"end\"",
                  "type":"string",
                  "opt":"\"end\""
                },
                "mode":{
                  "optchain":"\"end\"",
                  "type":"string",
                  "opt":"\"end\""
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n Valid values are:\n\n * `\"start\"`\n * `\"middle\"`\n * `\"end\"`\n * `\"none\"`\n\n See Pango for additional details:\n [Layout.set_ellipsize](https://docs.gtk.org/Pango/method.Layout.set_ellipsize.html)\n\n\n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_ellipsize.svg)\n",
            "tags":{
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set the text ellipsize mode.",
            "name":"ellipsize",
            "kind":"object properties",
            "usage":["widget{\n    text = &#34This is a very long text, that cannot be displayed fully.&#34,\n    ellipsize = &#34start&#34,\n    widget = wibox.widget.textbox,\n},\nwidget{\n    text = &#34This is a very long text, that cannot be displayed fully.&#34,\n    ellipsize = &#34end&#34,\n    widget = wibox.widget.textbox,\n},\nwidget{\n    text = &#34This is a very long text, that cannot be displayed fully.&#34,\n    ellipsize = &#34middle&#34,\n    widget = wibox.widget.textbox,\n},\nwidget{\n    text = &#34This is a very long text, that cannot be displayed fully.&#34,\n    ellipsize = &#34none&#34,\n    valign = &#34top&#34,\n    widget = wibox.widget.textbox,\n}\n"],
            "args":"([mode=\"end\"])",
            "type":"property",
            "lineno":332
          },{
            "parameter":"field",
            "params":{
              "1":"mode",
              "map":{
                "mode":" Where to wrap? After \"word\", \"char\" or \"word_char\"."
              }
            },
            "modifiers":{
              "field":{
                "1":{
                  "optchain":"\"word_char\"",
                  "type":"string",
                  "opt":"\"word_char\""
                },
                "mode":{
                  "optchain":"\"word_char\"",
                  "type":"string",
                  "opt":"\"word_char\""
                }
              },
              "usage":[[]],
              "return":[],
              "param":{
                "1":{
                  "optchain":"\"word_char\"",
                  "type":"string",
                  "opt":"\"word_char\""
                },
                "mode":{
                  "optchain":"\"word_char\"",
                  "type":"string",
                  "opt":"\"word_char\""
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n Valid values are:\n\n * **word**\n * **char**\n * **word_char**\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_wrap1.svg)\n",
            "tags":{
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set a textbox wrap mode.",
            "name":"wrap",
            "kind":"object properties",
            "usage":["for _, wrap in ipairs {&#34word&#34, &#34char&#34, &#34word_char&#34} do\n    local w = wibox.widget {\n        wrap   = wrap,\n        text   = &#34Notable dinausors: Tyrannosaurus-Rex, Triceratops, Velociraptor, Sauropods, Archaeopteryx.&#34,\n        widget = wibox.widget.textbox,\n    }\nend\n"],
            "args":"([mode=\"word_char\"])",
            "type":"property",
            "lineno":370
          },{
            "parameter":"field",
            "params":{
              "1":"mode",
              "map":{
                "mode":" The vertical alignment"
              }
            },
            "modifiers":{
              "field":{
                "1":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                },
                "mode":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                }
              },
              "usage":[[]],
              "return":[],
              "param":{
                "1":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                },
                "mode":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n This aligns the text within the widget's bounds. In some situations this may\n differ from aligning the widget with `wibox.container.place`.\n\n Valid values are:\n\n * `\"top\"`\n * `\"center\"`\n * `\"bottom\"`\n\n\n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_valign1.svg)\n",
            "tags":{
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"The vertical text alignment.",
            "name":"valign",
            "kind":"object properties",
            "usage":["for _, valign in ipairs {&#34top&#34, &#34center&#34, &#34bottom&#34} do\n    local w = wibox.widget {\n        valign = valign,\n        text   = &#34some text&#34,\n        widget = wibox.widget.textbox,\n    }\nend\n"],
            "args":"([mode=\"center\"])",
            "type":"property",
            "lineno":411
          },{
            "parameter":"field",
            "params":{
              "1":"mode",
              "map":{
                "mode":" The horizontal alignment"
              }
            },
            "modifiers":{
              "field":{
                "1":{
                  "optchain":"\"left\"",
                  "type":"string",
                  "opt":"\"left\""
                },
                "mode":{
                  "optchain":"\"left\"",
                  "type":"string",
                  "opt":"\"left\""
                }
              },
              "usage":[[]],
              "return":[],
              "param":{
                "1":{
                  "optchain":"\"left\"",
                  "type":"string",
                  "opt":"\"left\""
                },
                "mode":{
                  "optchain":"\"left\"",
                  "type":"string",
                  "opt":"\"left\""
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n This aligns the text within the widget's bounds. In some situations this may\n differ from aligning the widget with `wibox.container.place`.\n\n Valid values are:\n\n * `\"left\"`\n * `\"center\"`\n * `\"right\"`\n\n\n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_align1.svg)\n",
            "tags":{
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"The horizontal text alignment.",
            "name":"align",
            "kind":"object properties",
            "usage":["for _, align in ipairs {&#34left&#34, &#34center&#34, &#34right&#34} do\n    local w = wibox.widget {\n        align  = align,\n        text   = &#34some text&#34,\n        widget = wibox.widget.textbox,\n    }\nend\n"],
            "args":"([mode=\"left\"])",
            "type":"property",
            "lineno":452
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"font",
              "map":{
                "font":" The font description as string."
              }
            },
            "summary":"Set a textbox font.",
            "name":"font",
            "modifiers":{
              "field":{
                "1":{
                  "optchain":"beautiful.font",
                  "type":"string",
                  "opt":"beautiful.font"
                },
                "font":{
                  "optchain":"beautiful.font",
                  "type":"string",
                  "opt":"beautiful.font"
                }
              },
              "usebeautiful":[[]],
              "return":[],
              "propemits":[[]],
              "param":{
                "1":{
                  "optchain":"beautiful.font",
                  "type":"string",
                  "opt":"beautiful.font"
                },
                "font":{
                  "optchain":"beautiful.font",
                  "type":"string",
                  "opt":"beautiful.font"
                }
              }
            },
            "description":"\n\n There is multiple valid font string representation. The most precise is\n [XFT](https://wiki.archlinux.org/title/X_Logical_Font_Description). It\n is also possible to use the family name, followed by the face and size\n such as `Monospace Bold 10`. This script lists the fonts present\n on your system:\n\n    #!/usr/bin/env lua\n\n    local lgi = require(\"lgi\")\n    local pangocairo = lgi.PangoCairo\n\n    local font_map = pangocairo.font_map_get_default()\n\n    for k, v in pairs(font_map:list_families()) do\n        print(v:get_name(), \"monospace?: \"..tostring(v:is_monospace()))\n        for k2, v2 in ipairs(v:list_faces()) do\n            print(\"    \".. v2:get_face_name())\n        end\n    end\n\n Save this script somewhere on your system, `chmod +x` it and run it. It\n will list something like:\n\n    Sans    monospace?: false\n        Regular\n        Bold\n        Italic\n        Bold Italic\n\n In this case, the font could be `Sans 10` or `Sans Bold Italic 10`.\n\n Here are examples of several font families:\n\n\n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_font1.svg)\n\n**Usage example output**:\n\n **Usage example:**\n\n\n \n    local pango = require(&#34lgi&#34).Pango\n    local fonts = {\n        &#34sans&#34,\n        &#34Roboto, Bold&#34,\n        &#34DejaVu Sans, Oblique&#34,\n        &#34Noto Mono, Regular&#34\n    }\n     \n    for _, font in ipairs(fonts) do\n        local w = wibox.widget {\n            font   = font,\n            text   = &#34The quick brown fox jumps over the lazy dog!&#34,\n            widget = wibox.widget.textbox,\n        }\n         \n        -- Use the low level Pango API to validate the font was parsed properly.\n        local desc = pango.FontDescription.from_string(w.font)\n        print(\n            string.format(\n                &#34%s %d %s %s %s&#34,\n                w.font,\n                desc:get_size(),\n                desc:get_family(),\n                desc:get_variant(),\n                desc:get_style()\n             )\n        )\n    end\n\n The font size is a number at the end of the font description string:\n\n\n\n![Usage example](../images/AUTOGEN_wibox_widget_textbox_font2.svg)\n\n \n    for _, font in ipairs { &#34sans 8&#34, &#34sans 10&#34, &#34sans 12&#34, &#34sans 14&#34 } do\n        local w = wibox.widget {\n            font   = font,\n            text   = &#34The quick brown fox jumps over the lazy dog!&#34,\n            widget = wibox.widget.textbox,\n        }\n    end\n",
            "type":"property",
            "section":"property",
            "kind":"object properties",
            "args":"([font=beautiful.font])",
            "tags":{
              "usebeautiful":["beautiful.font The default font."],
              "propemits":["true false"]
            },
            "lineno":559
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"text",
              "2":"ignore_markup",
              "map":{
                "ignore_markup":" Ignore the pango/HTML markup",
                "text":" The textbox content"
              }
            },
            "summary":"Create a new textbox.",
            "name":"wibox.widget.textbox",
            "modifiers":{
              "return":[{
                  "type":"table"
                }],
              "param":{
                "1":{
                  "optchain":"\"\"",
                  "type":"string",
                  "opt":"\"\""
                },
                "2":{
                  "optchain":"false",
                  "type":"boolean",
                  "opt":"false"
                },
                "ignore_markup":{
                  "optchain":"false",
                  "type":"boolean",
                  "opt":"false"
                },
                "text":{
                  "optchain":"\"\"",
                  "type":"string",
                  "opt":"\"\""
                }
              },
              "field":{
                "1":{
                  "optchain":"\"\"",
                  "type":"string",
                  "opt":"\"\""
                },
                "2":{
                  "optchain":"false",
                  "type":"boolean",
                  "opt":"false"
                },
                "ignore_markup":{
                  "optchain":"false",
                  "type":"boolean",
                  "opt":"false"
                },
                "text":{
                  "optchain":"\"\"",
                  "type":"string",
                  "opt":"\"\""
                }
              }
            },
            "description":"",
            "type":"constructorfct",
            "section":"constructorfct",
            "kind":"constructors",
            "args":"([text=\"\"[, ignore_markup=false]])",
            "tags":[],
            "lineno":580
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"text",
              "2":"s",
              "3":"font",
              "map":{
                "s":" The screen on which the textbox would be displayed.",
                "text":" The text content, pango markup supported.",
                "font":" The font description as string."
              }
            },
            "summary":"Get geometry of text label, as if textbox would be created for it on the screen.",
            "name":"get_markup_geometry",
            "modifiers":{
              "return":[{
                  "type":"table"
                }],
              "param":{
                "1":{
                  "type":"string"
                },
                "2":{
                  "optchain":"nil",
                  "type":"integer|screen",
                  "opt":"nil"
                },
                "3":{
                  "optchain":"beautiful.font",
                  "type":"string",
                  "opt":"beautiful.font"
                },
                "s":{
                  "optchain":"nil",
                  "type":"integer|screen",
                  "opt":"nil"
                },
                "text":{
                  "type":"string"
                },
                "font":{
                  "optchain":"beautiful.font",
                  "type":"string",
                  "opt":"beautiful.font"
                }
              },
              "field":{
                "1":{
                  "type":"string"
                },
                "2":{
                  "optchain":"nil",
                  "type":"integer|screen",
                  "opt":"nil"
                },
                "3":{
                  "optchain":"beautiful.font",
                  "type":"string",
                  "opt":"beautiful.font"
                },
                "s":{
                  "optchain":"nil",
                  "type":"integer|screen",
                  "opt":"nil"
                },
                "text":{
                  "type":"string"
                },
                "font":{
                  "optchain":"beautiful.font",
                  "type":"string",
                  "opt":"beautiful.font"
                }
              }
            },
            "description":"",
            "type":"staticfct",
            "section":"staticfct",
            "kind":"static module functions",
            "args":"(text[, s=nil[, font=beautiful.font]])",
            "tags":[],
            "lineno":617
          }],
        "type":"widgetmod",
        "usage":["wibox.widget{\n    markup = &#34This <i>is</i> a <b>textbox</b>!!!&#34,\n    align  = &#34center&#34,\n    valign = &#34center&#34,\n    widget = wibox.widget.textbox\n}\n"],
        "file":"/home/cji/portless/awesome/build/lib/wibox/widget/textbox.lua",
        "package":"",
        "tags":{
          "author":["Uli Schlachter","dodo"],
          "copyright":"2010, 2011 Uli Schlachter, dodo",
          "supermodule":["wibox.widget.base"]
        },
        "lineno":23
      },
      "name":""
    }],
  "usage":["local notif = naughty.notification {\n    title   = &#34A notification&#34,\n    message = &#34This notification no actions!&#34,\n    icon    = beautiful.awesome_icon,\n}\n\nwibox.widget {\n    notification = notif,\n    widget       = naughty.widget.title,\n}\n"],
  "file":"/home/cji/portless/awesome/build/lib/naughty/widget/title.lua",
  "package":"",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification",
        "map":{
          "notification":""
        }
      },
      "summary":"The attached notification.",
      "name":"notification",
      "modifiers":{
        "param":{
          "1":{
            "type":"naughty.notification"
          },
          "notification":{
            "type":"naughty.notification"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"naughty.notification"
          },
          "notification":{
            "type":"naughty.notification"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(notification)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":43
    },{
      "inferred":true,
      "subparams":{
        "args":["args.notification"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.notification":" The notification.",
          "args":""
        }
      },
      "summary":"Create a new naughty.widget.title.",
      "name":"naughty.widget.title",
      "modifiers":{
        "usebeautiful":[[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"naughty.notification"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"naughty.notification"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(args)",
      "tags":{
        "usebeautiful":["beautiful.notification_fg","beautiful.notification_font"]
      },
      "lineno":72
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get or set the children elements.",
      "name":"children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":119
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get all direct and indirect children widgets.",
      "name":"all_children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"\n This will scan all containers recursively to find widgets\n Warning: This method it prone to stack overflow id the widget, or any of its\n children, contain (directly or indirectly) itself.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":127
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":133
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":" The height (`nil` for automatic)"
        }
      },
      "summary":"Force a widget height.",
      "name":"forced_height",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":138
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":" The width (`nil` for automatic)"
        }
      },
      "summary":"Force a widget width.",
      "name":"forced_width",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":143
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" The opacity (between 0 and 1)"
        }
      },
      "summary":"The widget opacity (transparency).",
      "name":"opacity",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([opacity=1])",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":148
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"The widget visibility.",
      "name":"visible",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":153
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "table":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "table":[]
        },
        "return":[]
      },
      "description":"\n\n The table contains a list of `awful.button` objects.\n",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The widget buttons.",
      "name":"buttons",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":162
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button to add."
        }
      },
      "summary":"Add a new `awful.button` to this widget.",
      "name":"add_button",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(button)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":167
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"signal_name",
        "2":"...",
        "map":{
          "signal_name":"",
          "...":" Other arguments"
        }
      },
      "summary":"Emit a signal and ensure all parent widgets in the hierarchies also\n forward the signal.",
      "name":"emit_signal_recursive",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":" This is useful to track signals when there is a dynamic\n set of containers and layouts wrapping the widget.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(signal_name, ...)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":175
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the previous results of `:layout()` and `:fit()`\n are no longer valid.  Unless this signal is emitted, `:layout()` and `:fit()`\n must return the same result when called with the same arguments.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the layout (size) change.",
      "name":"widget::layout_changed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":183
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the content of the widget changes. The widget will\n be redrawn, it is not re-layouted. Put differently, it is assumed that\n `:layout()` and `:fit()` would still return the same results as before.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the widget content changed.",
      "name":"widget::redraw_needed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":191
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is pressed over the widget.",
      "name":"button::press",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":222
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is released over the widget.",
      "name":"button::release",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":253
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse enter a widget.",
      "name":"mouse::enter",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":278
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse leave a widget.",
      "name":"mouse::leave",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":303
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":319
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":325
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":338
    }],
  "lineno":31
}