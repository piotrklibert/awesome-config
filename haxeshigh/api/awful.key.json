{
  "inferred":true,
  "kind":"input_handling",
  "mod_name":"awful.key",
  "summary":"Create easily new key objects ignoring certain modifiers.",
  "sections":{
    "by_name":[]
  },
  "name":"awful.key",
  "modifiers":{
    "copyright":[],
    "author":[[],[]]
  },
  "description":"\n\n A key object can be used by @{awful.keyboard} and @{client} to define\n keybindings.\n\n Use awful.key to define a keybinding\n ---\n\n This example shows how to define a basic key object:\n\n \n\n\n \n     awful.key({ &#34Mod4&#34, &#34Shift&#34 }, &#34a&#34,\n         function () print(&#34The `Mod4` + `Shift` + `a` combo is pressed&#34) end,\n         function () print(&#34The `Mod4` + `Shift` + `a` combo is released&#34) end)\n\n This example shows how to define the same basic key object with the\n declarative pattern:\n\n \n\n\n \n     awful.key {\n         modifiers = { &#34Mod4&#34, &#34Shift&#34 },\n         key = 'a',\n         on_press = function ()\n             print(&#34The `Mod4` + `Shift` + `a` combo is pressed&#34)\n         end,\n         on_release = function ()\n             print(&#34The `Mod4` + `Shift` + `a` combo is released&#34)\n         end\n     }\n\n This second example of a key definition uses the numrow keygroup. In this\n example, we define a key object, that select the tag to show according to\n the key index from the numrow.\n\n \n\n\n \n     local show_tag_by_numrow_index = awful.key {\n         modifiers = { &#34Mod4&#34 },\n         keygroup = awful.key.keygroup.NUMROW,\n         description = &#34only view tag&#34,\n         group = &#34tag&#34,\n         on_press = function (index)\n             local screen = awful.screen.focused()\n             local tag = screen.tags[index]\n             if tag then\n                 tag:view_only()\n             end\n         end\n     }\n",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"The keyboard key used to trigger this keybinding.",
      "name":"key",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n It can be the key symbol, such as `space`, the character, such as ` ` or the\n keycode such as `#65`.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":[],
      "lineno":83
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"modifiers",
        "map":{
          "modifiers":""
        }
      },
      "summary":"The table of modifier keys.",
      "name":"modifiers",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "modifiers":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "modifiers":{
            "type":"table"
          }
        }
      },
      "description":"\n\n A modifier, such as `Control` are a predetermined set of keys that can be\n used to implement keybindings. Note that this list is fix and cannot be\n extended using random key names, code or characters.\n\n Common modifiers are:\n\n <table class='widget_list' border=1>\n  <tr style='font-weight: bold;'>\n   <th align='center'>Name</th>\n   <th align='center'>Description</th>\n  </tr>\n  <tr><td>Mod1</td><td>Usually called Alt on PCs and Option on Macs</td></tr>\n  <tr><td>Mod4</td><td>Also called Super, Windows and Command âŒ˜</td></tr>\n  <tr><td>Mod5</td><td>Also called AltGr or ISO Level 3</td></tr>\n  <tr><td>Shift</td><td>Both left and right shift keys</td></tr>\n  <tr><td>Control</td><td>Also called CTRL on some keyboards</td></tr>\n </table>\n\n Please note that Awesome ignores the status of \"Lock\" and \"Mod2\" (Num Lock).\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(modifiers)",
      "tags":[],
      "lineno":108
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"The description of the function run from a key binding.",
      "name":"description",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n This is used, for example, by `awful.hotkeys_popup`.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":[],
      "lineno":115
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"The key name.",
      "name":"name",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n This can be useful when searching for keybindings by keywords.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":[],
      "lineno":122
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"The key group bound to a function in a key binding.",
      "name":"group",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "field":{
          "1":[],
          "string":[]
        }
      },
      "description":"\n\n This is used, for example, by `awful.hotkeys_popup`.\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":[],
      "lineno":129
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"function",
        "map":{
          "function":""
        }
      },
      "summary":"The callback when this key is pressed.",
      "name":"on_press",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "function":[]
        },
        "field":{
          "1":[],
          "function":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(function)",
      "tags":[],
      "lineno":134
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"function",
        "map":{
          "function":""
        }
      },
      "summary":"The callback when this key is released.",
      "name":"on_release",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "function":[]
        },
        "field":{
          "1":[],
          "function":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(function)",
      "tags":[],
      "lineno":139
    },{
      "parameter":"field",
      "params":{
        "1":"NUMROW",
        "2":"ARROWS",
        "3":"FKEYS",
        "4":"NUMPAD",
        "map":{
          "NUMPAD":"The numpad keys.",
          "NUMROW":"The number row.",
          "FKEYS":"The function keys.",
          "ARROWS":"The directionnal arrows."
        }
      },
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n It can be used instead of keygroup names.\n\n Values associated to each property of this table are string:\n\n - **NUMROW** = `\"numrow\"`: The row above the letters in the US PC-105/PC-104 keyboards and\n its derivative. This is usually the number 1-9 followed by 0.\n\n - **ARROWS** = `\"arrows\"`: The Left/Right/Top/Bottom keys usually located right of the\n spacebar.\n\n - **FKEYS** = `\"fkeys\"`: The keys F1 through F12 located at the topmost row of any\n keyboard, plus F13 through F35 on specialist keyboards.\n\n - **NUMPAD** = `\"numpad\"`: The number keys on the keypad to the right of the letters and\n the arrow keys. Not present in every keyboard.\n",
      "tags":[],
      "section":"table",
      "inferred":true,
      "subparams":[],
      "summary":"The keygroups names.",
      "name":"keygroup",
      "kind":"tables",
      "lineno":162,
      "args":"(NUMROW, ARROWS, FKEYS, NUMPAD)",
      "type":"table"
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Execute this keybinding.",
      "name":":trigger",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":[],
      "lineno":199
    },{
      "parameter":"field",
      "params":{
        "1":"Lock",
        "2":"Mod2",
        "map":{
          "Mod2":"",
          "Lock":""
        }
      },
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n By default this is initialized as `{ \"Lock\", \"Mod2\" }`\n so the Caps Lock or Num Lock modifier are not taking into account by awesome\n when pressing keys.",
      "tags":[],
      "section":"table",
      "inferred":true,
      "subparams":[],
      "summary":"Modifiers to ignore.",
      "name":"ignore_modifiers",
      "kind":"tables",
      "lineno":258,
      "args":"(Lock, Mod2)",
      "type":"table"
    },{
      "parameter":"field",
      "params":{
        "1":"mod",
        "2":"k",
        "map":{
          "k":" The key",
          "mod":" A modified table. Valid modifiers are: Any, Mod1,\n   Mod2, Mod3, Mod4, Mod5, Shift, Lock and Control."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "k":{
            "type":"string"
          },
          "mod":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "k":{
            "type":"string"
          },
          "mod":{
            "type":"table"
          }
        }
      },
      "description":"\n If an awesome keybinding is assigned to the combination, it should be\n executed.\n\n To limit the chances of accidentally leaving a modifier key locked when\n calling this function from a keybinding, make sure is attached to the\n release event and not the press event.\n",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Execute a key combination.",
      "name":"execute",
      "type":"deprecated",
      "args":"(mod, k)",
      "kind":"deprecated functions",
      "lineno":273
    },{
      "inferred":true,
      "subparams":{
        "args":["args.key","args.keygroup","args.modifiers","args.on_press","args.on_release"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.on_release":" Callback for when the key is released.",
          "args.on_press":" Callback for when the key is pressed.",
          "args.key":" The key to trigger an event. It can be the character\n   itself of `#+keycode`.",
          "args.modifiers":" A list of modifier keys.  Valid modifiers are:\n   `Any`, `Mod1`, Mod2`, `Mod3`, `Mod4`, `Mod5`, `Shift`, `Lock` and `Control`.",
          "args":"",
          "args.keygroup":" The keygroup to trigger an event. This\n   parameter must be used as a replacement for the `key` parameter. See\n   @{awful.key.keygroup}."
        }
      },
      "summary":"Create a new key binding.",
      "name":"awful.key",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"string",
            "opt":true
          },
          "4":{
            "type":"table"
          },
          "5":{
            "type":"function"
          },
          "6":{
            "type":"function"
          },
          "args.on_release":{
            "type":"function"
          },
          "args.on_press":{
            "type":"function"
          },
          "args.key":{
            "type":"string"
          },
          "args.modifiers":{
            "type":"table"
          },
          "args":{
            "type":"table"
          },
          "args.keygroup":{
            "type":"string",
            "opt":true
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"string",
            "opt":true
          },
          "4":{
            "type":"table"
          },
          "5":{
            "type":"function"
          },
          "6":{
            "type":"function"
          },
          "args.on_release":{
            "type":"function"
          },
          "args.on_press":{
            "type":"function"
          },
          "args.key":{
            "type":"string"
          },
          "args.modifiers":{
            "type":"table"
          },
          "args":{
            "type":"table"
          },
          "args.keygroup":{
            "type":"string",
            "opt":true
          }
        }
      },
      "description":"",
      "type":"constructorfct2",
      "section":"constructorfct2",
      "kind":"ldoc_skip",
      "args":"(args)",
      "tags":[],
      "lineno":296
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"mod",
        "2":"_key",
        "3":"press",
        "4":"release",
        "5":"data",
        "map":{
          "data":" User data for key,\n for example {description=\"select next tag\", group=\"tag\"}.",
          "mod":" A list of modifier keys.  Valid modifiers are: `Any`,\n  `Mod1`, `Mod2`, `Mod3`, `Mod4`, `Mod5`, `Shift`, `Lock` and `Control`.",
          "_key":" The key to trigger an event. It can be the character\n  itself of `#+keycode`.",
          "release":" Callback for when the key is released.",
          "press":" Callback for when the key is pressed."
        }
      },
      "summary":"Create a new key binding (alternate constructor).",
      "name":"awful.key",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"function"
          },
          "4":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "5":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "data":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "mod":{
            "type":"table"
          },
          "_key":{
            "type":"string"
          },
          "release":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "press":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"function"
          },
          "4":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "5":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "data":{
            "optchain":true,
            "type":"table",
            "opt":true
          },
          "mod":{
            "type":"table"
          },
          "_key":{
            "type":"string"
          },
          "release":{
            "optchain":true,
            "type":"function",
            "opt":true
          },
          "press":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(mod, _key, press[, release[, data]])",
      "tags":[],
      "lineno":309
    },{
      "parameter":"field",
      "params":{
        "1":"numrow",
        "map":{
          "numrow":""
        }
      },
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n A definition for a keygroup (say, **arrows**) can be accessed by indexing\n this table (e.g. `awful.key.keygroups.arrows`).\n\n Every definition is given as an array, where every element is another array\n with the following structure:\n\n * The first element is a string representing a key, in any format the\n property `key` will allow.\n * The second element is a value. Key bindings created by `awful.key` and a\n `keygroup` are bound to a 1-parameter function, whose parameter is this\n second element.\n\n As an example, **arrows** is currently defined thus:\n\n    arrows = {\n        {\"Left\"  , \"Left\"  },\n        {\"Right\" , \"Right\" },\n        {\"Up\"    , \"Up\"    },\n        {\"Down\"  , \"Down\"  },\n    }\n\n This table is accessed internally by Awesome. Users will usually use key\n bindings with the property `keygroup` instead of accessing this table\n directly.",
      "tags":[],
      "section":"table",
      "inferred":true,
      "subparams":[],
      "summary":"The default definitions of keygroups.",
      "name":"keygroups",
      "kind":"tables",
      "lineno":402,
      "args":"(numrow)",
      "type":"table"
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"_key",
        "2":"pressed_mod",
        "3":"pressed_key",
        "map":{
          "_key":" The key object.",
          "pressed_mod":" The modifiers to compare with.",
          "pressed_key":" The key to compare with."
        }
      },
      "summary":"Compare a key object with modifiers and key.",
      "name":"match",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "3":[],
          "_key":[],
          "pressed_mod":[],
          "pressed_key":[]
        },
        "field":{
          "1":[],
          "2":[],
          "3":[],
          "_key":[],
          "pressed_mod":[],
          "pressed_key":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(_key, pressed_mod, pressed_key)",
      "tags":[],
      "lineno":474
    }],
  "type":"inputmodule",
  "file":"/home/cji/portless/awesome/build/lib/awful/key.lua",
  "package":"",
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;","Emmanuel Lepage Vallee &lt;elv1313@gmail.com&gt;"],
    "copyright":"2018 Emmanuel Lepage Vallee"
  },
  "lineno":66
}