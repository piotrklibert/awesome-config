{
  "inferred":true,
  "kind":"popups_and_bars",
  "mod_name":"awful.wibar",
  "summary":"The main AwesomeWM \"bar\" module.",
  "sections":{
    "by_name":[]
  },
  "name":"awful.wibar",
  "modifiers":{
    "author":[[]],
    "supermodule":[[]],
    "copyright":[]
  },
  "description":"\n\n This module allows you to easily create wibox and attach them to the edge of\n a screen.\n\n\n\n![Usage example](../images/AUTOGEN_awful_wibar_default.svg)\n\n \n     local wb = awful.wibar { position = &#34top&#34 }\n     wb:setup {\n         layout = wibox.layout.align.horizontal,\n         {\n             mytaglist,\n             layout = wibox.layout.fixed.horizontal,\n         },\n         mytasklist,\n         {\n             layout = wibox.layout.fixed.horizontal,\n             mykeyboardlayout,\n             mytextclock,\n         },\n     }\n\n You can even have vertical bars too.\n\n\n\n![Usage example](../images/AUTOGEN_awful_wibar_left.svg)\n\n \n     local wb = awful.wibar { position = &#34left&#34 }\n     wb:setup {\n         layout = wibox.layout.align.vertical,\n         {\n             -- Rotate the widgets with the container\n             {\n                 mytaglist,\n                 direction = 'west',\n                 widget = wibox.container.rotate\n             },\n             layout = wibox.layout.fixed.vertical,\n         },\n         mytasklist,\n         {\n             layout = wibox.layout.fixed.vertical,\n             {\n                 -- Rotate the widgets with the container\n                 {\n                     mykeyboardlayout,\n                     mytextclock,\n                     layout = wibox.layout.fixed.horizontal\n                 },\n                 direction = 'west',\n                 widget = wibox.container.rotate\n             }\n         },\n     }\n",
  "items":[{
      "parameter":"field",
      "params":{
        "1":"stretch",
        "map":{
          "stretch":""
        }
      },
      "modifiers":{
        "see":[[]],
        "param":{
          "1":{
            "type":"boolean"
          },
          "stretch":{
            "type":"boolean"
          }
        },
        "usage":[[]],
        "field":{
          "1":{
            "type":"boolean"
          },
          "stretch":{
            "type":"boolean"
          }
        },
        "return":[],
        "propemits":[[]],
        "propbeautiful":[[]]
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_awful_wibar_stretch.svg)\n",
      "tags":{
        "propbeautiful":[""],
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"If the wibar needs to be stretched to fill the screen.",
      "name":"stretch",
      "kind":"object properties",
      "usage":["awful.wibar {\n    position = &#34top&#34,\n    screen   = screen[1],\n    stretch  = true,\n    width    = 196,\n    widget   = {\n        text   = &#34stretched&#34,\n        align  = &#34center&#34,\n        widget = wibox.widget.textbox\n    },\n}\n \nawful.wibar {\n    position = &#34top&#34,\n    screen   = screen[2],\n    stretch  = false,\n    width    = 196,\n    widget   = {\n        text   = &#34not stretched&#34,\n        align  = &#34center&#34,\n        widget = wibox.widget.textbox\n    },\n}\n"],
      "args":"(stretch)",
      "type":"property",
      "lineno":146
    },{
      "parameter":"field",
      "params":{
        "1":"align",
        "map":{
          "align":""
        }
      },
      "modifiers":{
        "see":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "align":{
            "type":"string"
          }
        },
        "usage":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "align":{
            "type":"string"
          }
        },
        "return":[],
        "propemits":[[]],
        "propbeautiful":[[]]
      },
      "description":"\n\n Values are:\n\n  * `\"top\"`\n  * `\"bottom\"`\n  * `\"left\"`\n  * `\"right\"`\n  * `\"centered\"`\n\n  \n\n![Usage example](../images/AUTOGEN_awful_wibar_align.svg)\n",
      "tags":{
        "propbeautiful":[""],
        "see":[],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"How to align non-stretched wibars.",
      "name":"align",
      "kind":"object properties",
      "usage":["for s, align in ipairs { &#34left&#34, &#34centered&#34, &#34right&#34 } do\n    awful.wibar {\n        position = &#34top&#34,\n        screen   = screen[s],\n        stretch  = false,\n        width    = 196,\n        align    = align,\n        widget   = {\n            text   = align,\n            align  = &#34center&#34,\n            widget = wibox.widget.textbox\n        },\n    }\nend\n \nfor s, align in ipairs { &#34top&#34, &#34centered&#34, &#34bottom&#34 } do\n    awful.wibar {\n        position = &#34left&#34,\n        screen   = screen[s+3],\n        stretch  = false,\n        height   = 128,\n        align    = align,\n        widget   = {\n            {\n                text   = align,\n                align  = &#34center&#34,\n                widget = wibox.widget.textbox\n            },\n            direction = &#34east&#34,\n            widget    = wibox.container.rotate\n        },\n    }\nend\n"],
      "args":"(align)",
      "type":"property",
      "lineno":201
    },{
      "parameter":"field",
      "params":{
        "1":"margins",
        "map":{
          "margins":""
        }
      },
      "modifiers":{
        "propbeautiful":[[]],
        "usage":[[]],
        "field":{
          "1":{
            "type":"number|table"
          },
          "margins":{
            "type":"number|table"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"number|table"
          },
          "margins":{
            "type":"number|table"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n It can either be a table with `top`, `bottom`, `left` and `right`\n properties, or a single number that applies to all four sides.\n\n \n\n![Usage example](../images/AUTOGEN_awful_wibar_margins.svg)\n",
      "tags":{
        "propbeautiful":[""],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Margins on each side of the wibar.",
      "name":"margins",
      "kind":"object properties",
      "usage":["awful.wibar {\n    position = &#34top&#34,\n    screen   = screen[1],\n    stretch  = false,\n    width    = 196,\n    margins  = 24,\n    widget   = {\n        align  = &#34center&#34,\n        text   = &#34unform margins&#34,\n        widget = wibox.widget.textbox\n    }\n}\n \nawful.wibar {\n    position = &#34top&#34,\n    screen   = screen[2],\n    stretch  = false,\n    width    = 196,\n    margins = {\n        top    = 12,\n        bottom = 5\n    },\n    widget   = {\n        align  = &#34center&#34,\n        text   = &#34non unform margins&#34,\n        widget = wibox.widget.textbox\n    }\n}\n"],
      "args":"(margins)",
      "type":"property",
      "lineno":245
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"stretch",
        "map":{
          "stretch":""
        }
      },
      "summary":"If the wibar needs to be stretched to fill the screen.",
      "name":"beautiful.wibar_stretch",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"boolean"
          },
          "stretch":{
            "type":"boolean"
          }
        },
        "field":{
          "1":{
            "type":"boolean"
          },
          "stretch":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(stretch)",
      "tags":[],
      "lineno":250
    },{
      "parameter":"field",
      "params":{
        "1":"restrict_workarea",
        "map":{
          "restrict_workarea":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "usage":[[]],
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "restrict_workarea":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "restrict_workarea":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        },
        "propemits":[[]]
      },
      "description":"\n\n In the example below, we can see that the first screen workarea\n shrunk by the height of the wibar while the second screen is\n unchanged.\n\n \n\n![Usage example](../images/AUTOGEN_screen_wibar_workarea.svg)\n",
      "tags":{
        "propemits":["true false"],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Allow or deny the tiled clients to cover the wibar.",
      "name":"restrict_workarea",
      "kind":"object properties",
      "usage":["local screen1_wibar = awful.wibar {\n    position          = &#34top&#34,\n    restrict_workarea = true,\n    height            = 24,\n    screen            = screen[1],\n}\n \nlocal screen2_wibar = awful.wibar {\n    position          = &#34top&#34,\n    restrict_workarea = false,\n    height            = 24,\n    screen            = screen[2],\n}\n"],
      "args":"([restrict_workarea=true])",
      "type":"property",
      "lineno":281
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"favor_vertical",
        "map":{
          "favor_vertical":""
        }
      },
      "summary":"If there is both vertical and horizontal wibar, give more space to vertical ones.",
      "name":"beautiful.wibar_favor_vertical",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "favor_vertical":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "favor_vertical":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"\n\n By default, if multiple wibars risk overlapping, it will be resolved\n by giving more space to the horizontal one:\n\n ![wibar position](../images/AUTOGEN_awful_wibar_position.svg)\n\n If this variable is to to `true`, it will behave like:\n\n \n\n![Usage example](../images/AUTOGEN_awful_wibar_position2.svg)\n\n",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([favor_vertical=false])",
      "tags":[],
      "lineno":298
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"border_width",
        "map":{
          "border_width":""
        }
      },
      "summary":"The wibar border width.",
      "name":"beautiful.wibar_border_width",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "border_width":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "type":"integer"
          },
          "border_width":{
            "type":"integer"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(border_width)",
      "tags":[],
      "lineno":302
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"border_color",
        "map":{
          "border_color":""
        }
      },
      "summary":"The wibar border color.",
      "name":"beautiful.wibar_border_color",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "border_color":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "border_color":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(border_color)",
      "tags":[],
      "lineno":306
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"ontop",
        "map":{
          "ontop":""
        }
      },
      "summary":"If the wibar is to be on top of other windows.",
      "name":"beautiful.wibar_ontop",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"boolean"
          },
          "ontop":{
            "type":"boolean"
          }
        },
        "field":{
          "1":{
            "type":"boolean"
          },
          "ontop":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(ontop)",
      "tags":[],
      "lineno":310
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"cursor",
        "map":{
          "cursor":""
        }
      },
      "summary":"The wibar's mouse cursor.",
      "name":"beautiful.wibar_cursor",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "cursor":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "cursor":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(cursor)",
      "tags":[],
      "lineno":314
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":""
        }
      },
      "summary":"The wibar opacity, between 0 and 1.",
      "name":"beautiful.wibar_opacity",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(opacity)",
      "tags":[],
      "lineno":318
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"type",
        "map":{
          "type":""
        }
      },
      "summary":"The window type (desktop, normal, dock, …).",
      "name":"beautiful.wibar_type",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "type":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "type":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(type)",
      "tags":[],
      "lineno":322
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":""
        }
      },
      "summary":"The wibar's width.",
      "name":"beautiful.wibar_width",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "type":"integer"
          },
          "width":{
            "type":"integer"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(width)",
      "tags":[],
      "lineno":326
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":""
        }
      },
      "summary":"The wibar's height.",
      "name":"beautiful.wibar_height",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "type":"integer"
          },
          "height":{
            "type":"integer"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(height)",
      "tags":[],
      "lineno":330
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"bg",
        "map":{
          "bg":""
        }
      },
      "summary":"The wibar's background color.",
      "name":"beautiful.wibar_bg",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"color"
          },
          "bg":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"color"
          },
          "bg":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(bg)",
      "tags":[],
      "lineno":334
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"bgimage",
        "map":{
          "bgimage":""
        }
      },
      "summary":"The wibar's background image.",
      "name":"beautiful.wibar_bgimage",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"surface"
          },
          "bgimage":{
            "type":"surface"
          }
        },
        "field":{
          "1":{
            "type":"surface"
          },
          "bgimage":{
            "type":"surface"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(bgimage)",
      "tags":[],
      "lineno":338
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"fg",
        "map":{
          "fg":""
        }
      },
      "summary":"The wibar's foreground (text) color.",
      "name":"beautiful.wibar_fg",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          }
        },
        "field":{
          "1":{
            "type":"color"
          },
          "fg":{
            "type":"color"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(fg)",
      "tags":[],
      "lineno":342
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "summary":"The wibar's shape.",
      "name":"beautiful.wibar_shape",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        },
        "field":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(shape)",
      "tags":[],
      "lineno":346
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"margins",
        "map":{
          "margins":""
        }
      },
      "summary":"The wibar's margins.",
      "name":"beautiful.wibar_margins",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"number|table"
          },
          "margins":{
            "type":"number|table"
          }
        },
        "field":{
          "1":{
            "type":"number|table"
          },
          "margins":{
            "type":"number|table"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(margins)",
      "tags":[],
      "lineno":350
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"align",
        "map":{
          "align":""
        }
      },
      "summary":"The wibar's alignments.",
      "name":"beautiful.wibar_align",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "align":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "align":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(align)",
      "tags":[],
      "lineno":355
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"position",
        "map":{
          "position":" Either \"left\", right\", \"top\" or \"bottom\""
        }
      },
      "summary":"The wibox position.",
      "name":"position",
      "modifiers":{
        "param":{
          "1":{
            "type":"string"
          },
          "position":{
            "type":"string"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"string"
          },
          "position":{
            "type":"string"
          }
        }
      },
      "description":"\n\n The valid values are:\n\n * left\n * right\n * top\n * bottom\n\n \n\n![Usage example](../images/AUTOGEN_awful_wibar_position.svg)\n\n \n    local colors = {\n        top    = &#34#ffff00&#34,\n        bottom = &#34#ff00ff&#34,\n        left   = &#34#00ffff&#34,\n        right  = &#34#ffcc00&#34\n    }\n     \n    for _, position in ipairs { &#34top&#34, &#34bottom&#34, &#34left&#34, &#34right&#34 } do\n        awful.wibar {\n            position = position,\n            bg       = colors[position],\n            widget   = {\n                {\n                    text   = position,\n                    align  = &#34center&#34,\n                    widget = wibox.widget.textbox\n                },\n                direction = (position == &#34left&#34 or position == &#34right&#34) and\n                    &#34east&#34 or &#34north&#34,\n                widget    = wibox.container.rotate\n            },\n        }\n    end\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(position)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":489
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Remove a wibar.",
      "name":"remove",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":[],
      "lineno":638
    },{
      "parameter":"field",
      "params":{
        "1":"wb",
        "2":"position",
        "3":"screen",
        "map":{
          "position":" The position of the wibox: top, bottom, left or right.",
          "screen":" The screen to attach to",
          "wb":" The wibox to attach."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "3":[],
          "position":[],
          "screen":[],
          "wb":[]
        },
        "field":{
          "1":[],
          "2":[],
          "3":[],
          "position":[],
          "screen":[],
          "wb":[]
        }
      },
      "description":"\n\n This function has been moved to the `awful.placement` module. Calling this\n no longer does anything.\n",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Attach a wibox to a screen.",
      "name":"attach",
      "type":"deprecated",
      "args":"(wb, position, screen)",
      "kind":"deprecated functions",
      "lineno":665
    },{
      "parameter":"field",
      "params":{
        "1":"wb",
        "2":"align",
        "3":"screen",
        "map":{
          "align":" The alignment",
          "screen":" This argument is deprecated. It is not used. Use wb.screen\n  directly.",
          "wb":" The wibox."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "3":[],
          "align":[],
          "screen":[],
          "wb":[]
        },
        "field":{
          "1":[],
          "2":[],
          "3":[],
          "align":[],
          "screen":[],
          "wb":[]
        }
      },
      "description":"\n\n Supported alignment are:\n\n * top_left\n * top_right\n * bottom_left\n * bottom_right\n * left\n * right\n * top\n * bottom\n * centered\n * center_vertical\n * center_horizontal\n",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Align a wibox.",
      "name":"align",
      "type":"deprecated",
      "args":"(wb, align, screen)",
      "kind":"deprecated functions",
      "lineno":694
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "field":[]
      },
      "description":"\n\n **This function has been removed.**\n",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Stretch a wibox so it takes all screen width or height.",
      "name":"awful.wibox.stretch",
      "type":"deprecated",
      "args":"()",
      "kind":"deprecated functions",
      "lineno":717
    },{
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.visible":" Visibility.",
          "args.margins":" The wibar margins.",
          "args.shape_bounding":" The wibox’s bounding shape as a (native) cairo surface.",
          "args.position":" The position.",
          "args.opacity":" The opacity, between 0 and 1.",
          "args.shape_input":" The wibox’s input shape as a (native) cairo surface.",
          "args.widget":" The widget that the wibox displays.",
          "args.stretch":" If the wibar need to be stretched to fill the screen.",
          "args.fg":" The foreground (text) color.",
          "args.type":" The window type (desktop, normal, dock, …).",
          "args.input_passthrough":" If the inputs are\n  forward to the element below.",
          "args.restrict_workarea":" Allow or deny the tiled clients to cover the wibar.",
          "args.border_width":" Border width.",
          "args.shape":" The shape.",
          "args.height":" The height.",
          "args.bg":" The background.",
          "args.x":" The x coordinates.",
          "args.width":" The width.",
          "args.shape_clip":" The wibox’s clip shape as a (native) cairo surface.",
          "args.screen":" The wibox screen.",
          "args.bgimage":" The background image of the drawable.",
          "args.y":" The y coordinates.",
          "args":"",
          "args.cursor":" The mouse cursor.",
          "args.align":" How to align non-stretched wibars.",
          "args.ontop":" On top of other windows.",
          "args.border_color":" Border color."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"boolean"
          },
          "5":{
            "type":"string"
          },
          "6":{
            "type":"table|number"
          },
          "7":{
            "type":"integer"
          },
          "8":{
            "type":"string"
          },
          "9":{
            "type":"boolean",
            "opt":"false"
          },
          "10":{
            "type":"string"
          },
          "11":{
            "type":"boolean"
          },
          "12":{
            "type":"number",
            "opt":"1"
          },
          "13":{
            "type":"string"
          },
          "14":{
            "type":"integer"
          },
          "15":{
            "type":"integer"
          },
          "16":{
            "type":"integer"
          },
          "17":{
            "type":"integer"
          },
          "18":{
            "type":"screen"
          },
          "19":{
            "type":"wibox.widget"
          },
          "20":[],
          "21":[],
          "22":[],
          "23":{
            "type":"color"
          },
          "24":{
            "type":"surface"
          },
          "25":{
            "type":"color"
          },
          "26":{
            "type":"gears.shape"
          },
          "27":{
            "type":"boolean",
            "opt":"false"
          },
          "args.visible":{
            "type":"boolean"
          },
          "args.margins":{
            "type":"table|number"
          },
          "args.shape_bounding":[],
          "args.position":{
            "type":"string"
          },
          "args.opacity":{
            "type":"number",
            "opt":"1"
          },
          "args.shape_input":[],
          "args.widget":{
            "type":"wibox.widget"
          },
          "args.stretch":{
            "type":"string"
          },
          "args.fg":{
            "type":"color"
          },
          "args.type":{
            "type":"string"
          },
          "args.input_passthrough":{
            "type":"boolean",
            "opt":"false"
          },
          "args.restrict_workarea":{
            "type":"boolean"
          },
          "args.border_width":{
            "type":"integer"
          },
          "args.shape":{
            "type":"gears.shape"
          },
          "args.height":{
            "type":"integer"
          },
          "args.bg":{
            "type":"color"
          },
          "args.x":{
            "type":"integer"
          },
          "args.width":{
            "type":"integer"
          },
          "args.shape_clip":[],
          "args.screen":{
            "type":"screen"
          },
          "args.bgimage":{
            "type":"surface"
          },
          "args.y":{
            "type":"integer"
          },
          "args":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "args.cursor":{
            "type":"string"
          },
          "args.align":{
            "type":"string"
          },
          "args.ontop":{
            "type":"boolean",
            "opt":"false"
          },
          "args.border_color":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "type":"string"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"boolean"
          },
          "5":{
            "type":"string"
          },
          "6":{
            "type":"table|number"
          },
          "7":{
            "type":"integer"
          },
          "8":{
            "type":"string"
          },
          "9":{
            "type":"boolean",
            "opt":"false"
          },
          "10":{
            "type":"string"
          },
          "11":{
            "type":"boolean"
          },
          "12":{
            "type":"number",
            "opt":"1"
          },
          "13":{
            "type":"string"
          },
          "14":{
            "type":"integer"
          },
          "15":{
            "type":"integer"
          },
          "16":{
            "type":"integer"
          },
          "17":{
            "type":"integer"
          },
          "18":{
            "type":"screen"
          },
          "19":{
            "type":"wibox.widget"
          },
          "20":[],
          "21":[],
          "22":[],
          "23":{
            "type":"color"
          },
          "24":{
            "type":"surface"
          },
          "25":{
            "type":"color"
          },
          "26":{
            "type":"gears.shape"
          },
          "27":{
            "type":"boolean",
            "opt":"false"
          },
          "args.visible":{
            "type":"boolean"
          },
          "args.margins":{
            "type":"table|number"
          },
          "args.shape_bounding":[],
          "args.position":{
            "type":"string"
          },
          "args.opacity":{
            "type":"number",
            "opt":"1"
          },
          "args.shape_input":[],
          "args.widget":{
            "type":"wibox.widget"
          },
          "args.stretch":{
            "type":"string"
          },
          "args.fg":{
            "type":"color"
          },
          "args.type":{
            "type":"string"
          },
          "args.input_passthrough":{
            "type":"boolean",
            "opt":"false"
          },
          "args.restrict_workarea":{
            "type":"boolean"
          },
          "args.border_width":{
            "type":"integer"
          },
          "args.shape":{
            "type":"gears.shape"
          },
          "args.height":{
            "type":"integer"
          },
          "args.bg":{
            "type":"color"
          },
          "args.x":{
            "type":"integer"
          },
          "args.width":{
            "type":"integer"
          },
          "args.shape_clip":[],
          "args.screen":{
            "type":"screen"
          },
          "args.bgimage":{
            "type":"surface"
          },
          "args.y":{
            "type":"integer"
          },
          "args":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "args.cursor":{
            "type":"string"
          },
          "args.align":{
            "type":"string"
          },
          "args.ontop":{
            "type":"boolean",
            "opt":"false"
          },
          "args.border_color":{
            "type":"string"
          }
        }
      },
      "description":"\n You can add also position key with value top, bottom, left or right.\n You can also use width or height in % and set align to center, right or left.\n You can also set the screen key with a screen number to attach the wibox.\n If not specified, the primary screen is assumed.",
      "tags":{
        "see":[]
      },
      "section":"constructorfct",
      "inferred":true,
      "subparams":{
        "args":["args.position","args.stretch","args.restrict_workarea","args.align","args.margins","args.border_width","args.border_color","args.ontop","args.cursor","args.visible","args.opacity","args.type","args.x","args.y","args.width","args.height","args.screen","args.widget","args.shape_bounding","args.shape_clip","args.shape_input","args.bg","args.bgimage","args.fg","args.shape","args.input_passthrough"]
      },
      "summary":"Create a new wibox and attach it to a screen edge.",
      "name":"awful.wibar",
      "type":"constructorfct",
      "args":"([args=nil])",
      "kind":"constructors",
      "lineno":753
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"Border width.",
      "name":"border_width",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":881
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"Border color.",
      "name":"border_color",
      "modifiers":{
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "string":[]
        },
        "propemits":[[]]
      },
      "description":"\n\n Please note that this property only support string based 24 bit or 32 bit\n colors:\n\n    Red Blue\n     _|  _|\n    #FF00FF\n       T‾\n     Green\n\n\n    Red Blue\n     _|  _|\n    #FF00FF00\n       T‾  ‾T\n    Green   Alpha\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":904
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"On top of other windows.",
      "name":"ontop",
      "modifiers":{
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":911
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The mouse cursor.",
      "name":"cursor",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":919
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Visibility.",
      "name":"visible",
      "modifiers":{
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":926
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" (between 0 and 1)"
        }
      },
      "summary":"The opacity of the wibox, between 0 and 1.",
      "name":"opacity",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(opacity)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":933
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The window type (desktop, normal, dock, ...).",
      "name":"type",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":941
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"The x coordinates.",
      "name":"x",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":948
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"The y coordinates.",
      "name":"y",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":955
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":""
        }
      },
      "summary":"The width of the wibox.",
      "name":"width",
      "modifiers":{
        "field":{
          "1":[],
          "width":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "width":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":962
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":""
        }
      },
      "summary":"The height of the wibox.",
      "name":"height",
      "modifiers":{
        "field":{
          "1":[],
          "height":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "height":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":969
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":""
        }
      },
      "summary":"The wibox screen.",
      "name":"screen",
      "modifiers":{
        "field":{
          "1":[],
          "screen":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "screen":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(screen)",
      "tags":{
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "lineno":976
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"drawable",
        "map":{
          "drawable":""
        }
      },
      "summary":"The wibox's `drawable`.",
      "name":"drawable",
      "modifiers":{
        "field":{
          "1":{
            "type":"drawable"
          },
          "drawable":{
            "type":"drawable"
          }
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"drawable"
          },
          "drawable":{
            "type":"drawable"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(drawable)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":983
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "map":{
          "widget":""
        }
      },
      "summary":"The widget that the `wibox` displays.",
      "name":"widget",
      "modifiers":{
        "field":{
          "1":[],
          "widget":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "widget":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(widget)",
      "tags":{
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "lineno":989
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The X window id.",
      "name":"window",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":997
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n If you want to set a shape, let say some rounded corners, use\n the `shape` property rather than this. If you want something\n very complex, for example, holes, then use this.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's bounding shape as a (native) cairo surface.",
      "name":"shape_bounding",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":1009
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n The clip shape is the shape of the window *content* rather\n than the outer window shape.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's clip shape as a (native) cairo surface.",
      "name":"shape_clip",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":1020
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n The input shape allows to disable clicks and mouse events\n on part of the window. This is how `input_passthrough` is\n implemented.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's input shape as a (native) cairo surface.",
      "name":"shape_input",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":1032
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The wibar's shape.",
      "name":"shape",
      "type":"property",
      "args":"(shape)",
      "kind":"object properties",
      "lineno":1040
    },{
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n\n This replace the `shape_input` mask with an empty area. All mouse and\n keyboard events are sent to the object (such as a client) positioned below\n this wibox. When used alongside compositing, it allows, for example, to have\n a subtle transparent wibox on top a fullscreen client to display important\n data such as a low battery warning.\n",
      "tags":{
        "propemits":["true false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Forward the inputs to the client below the wibox.",
      "name":"input_passthrough",
      "type":"property",
      "args":"([boolean=false])",
      "kind":"object properties",
      "lineno":1054
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"buttons_table",
        "map":{
          "buttons_table":" A table of buttons objects, or nothing."
        }
      },
      "summary":"Get or set mouse buttons bindings to a wibox.",
      "name":"buttons",
      "modifiers":{
        "field":{
          "1":[],
          "buttons_table":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "buttons_table":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(buttons_table)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":1061
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"A",
        "map":{
          "A":" table with coordinates to modify."
        }
      },
      "summary":"Get or set wibox geometry.",
      "name":"geometry",
      "modifiers":{
        "field":{
          "1":[],
          "A":[]
        },
        "emits":[[]],
        "return":[[]],
        "baseclass":[[]],
        "param":{
          "1":[],
          "A":[]
        },
        "emitstparam":[[]]
      },
      "description":" That's the same as accessing or setting the x,\n y, width or height properties of a wibox.\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(A)",
      "tags":{
        "emits":["property::geometry When the geometry change."],
        "baseclass":["wibox"],
        "emitstparam":["property::geometry table geo The geometry table."]
      },
      "lineno":1071
    },{
      "parameter":"field",
      "params":{
        "1":"strut",
        "map":{
          "strut":" A table with new strut, or nothing"
        }
      },
      "modifiers":{
        "see":[[]],
        "emits":[[]],
        "field":{
          "1":[],
          "strut":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "strut":[]
        },
        "return":[[]]
      },
      "description":"\n\n Struts are the area which should be reserved on each side of\n the screen for this wibox. This is used to make bars and\n docked displays. Note that `awful.wibar` implements all the\n required boilerplate code to make bar. Only use this if you\n want special type of bars (like bars not fully attached to\n the side of the screen).\n",
      "tags":{
        "see":[],
        "emits":["property::struts"],
        "baseclass":["wibox"]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Get or set wibox struts.",
      "name":"struts",
      "type":"method",
      "args":"(strut)",
      "kind":"object methods ",
      "lineno":1087
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "color":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "color":[]
        },
        "return":[]
      },
      "description":"\n\n The background color can be transparent. If there is a\n compositing manager such as compton, then it will be\n real transparency and may include blur (provided by the\n compositor). When there is no compositor, it will take\n a picture of the wallpaper and blend it.\n",
      "tags":{
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default background color.",
      "name":"beautiful.bg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":1100
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "color":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "color":[]
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default foreground (text) color.",
      "name":"beautiful.fg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":1106
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox"]
      },
      "lineno":1112
    },{
      "parameter":"field",
      "params":{
        "1":"The",
        "map":{
          "The":" background to use. This must either be a cairo pattern object,\n   nil or a string that gears.color() understands."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":{
          "1":{
            "type":"c"
          },
          "The":{
            "type":"c"
          }
        },
        "usebeautiful":[[]],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"c"
          },
          "The":{
            "type":"c"
          }
        }
      },
      "description":"\n\n The background color can be transparent. If there is a\n compositing manager such as compton, then it will be\n real transparency and may include blur (provided by the\n compositor). When there is no compositor, it will take\n a picture of the wallpaper and blend it.\n",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.bg_normal The default (fallback) bg color."],
        "baseclass":["wibox"],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The background of the wibox.",
      "name":"bg",
      "type":"property",
      "args":"(The)",
      "kind":"object properties",
      "lineno":1128
    },{
      "parameter":"field",
      "params":{
        "1":"image",
        "map":{
          "image":" A background image or a function."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"gears.suface|string|function"
          },
          "image":{
            "type":"gears.suface|string|function"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"gears.suface|string|function"
          },
          "image":{
            "type":"gears.suface|string|function"
          }
        }
      },
      "description":"\n\n If `image` is a function, it will be called with `(context, cr, width, height)`\n as arguments. Any other arguments passed to this method will be appended.\n",
      "tags":{
        "propemits":["true false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The background image of the drawable.",
      "name":"bgimage",
      "type":"property",
      "args":"(image)",
      "kind":"object properties",
      "lineno":1139
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"color",
        "map":{
          "c":" The foreground to use. This must either be a cairo pattern object,\n   nil or a string that gears.color() understands.",
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":{
          "1":{
            "type":"color"
          },
          "2":[],
          "c":{
            "type":"color"
          },
          "color":[]
        },
        "usebeautiful":[[]],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"color"
          },
          "2":[],
          "c":{
            "type":"color"
          },
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.fg_normal The default (fallback) fg color."],
        "baseclass":["wibox"],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The foreground (text) of the wibox.",
      "name":"fg",
      "type":"property",
      "args":"(c, color)",
      "kind":"object properties",
      "lineno":1149
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "map":{
          "y":" Y coordinate of the point",
          "x":" X coordinate of the point"
        }
      },
      "summary":"Find a widget by a point.",
      "name":"find_widgets",
      "modifiers":{
        "baseclass":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        }
      },
      "description":"\n The wibox must have drawn itself at least once for this to work.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(x, y)",
      "tags":{
        "baseclass":["wibox"]
      },
      "lineno":1159
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1175
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1181
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":1194
    }],
  "type":"popupmod",
  "file":"/home/cji/portless/awesome/build/lib/awful/wibar.lua",
  "package":"",
  "tags":{
    "author":["Emmanuel Lepage Vallee &lt;elv1313@gmail.com&gt;"],
    "copyright":"2016 Emmanuel Lepage Vallee",
    "supermodule":["awful.popup"]
  },
  "lineno":68
}