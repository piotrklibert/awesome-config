{
  "inferred":true,
  "kind":"declarative_rules",
  "mod_name":"ruled.notifications",
  "summary":"Rules for notifications.",
  "sections":{
    "by_name":[]
  },
  "name":"ruled.notifications",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_rules_urgency.svg)\n\n \n    ruled.notification.connect_signal(&#34request::rules&#34, function()\n        -- Add a red background for urgent notifications.\n        ruled.notification.append_rule {\n            rule       = { urgency = &#34critical&#34 },\n            properties = { bg = &#34#ff0000&#34, fg = &#34#ffffff&#34, timeout = 0 }\n        }\n         \n        -- Or green background for normal ones.\n        ruled.notification.append_rule {\n            rule       = { urgency = &#34normal&#34 },\n            properties = { bg      = &#34#00ff00&#34, fg = &#34#000000&#34}\n        }\n    end)\n  \n    -- Create a normal notification.\n    naughty.notification {\n        title   = &#34A notification 1&#34,\n        message = &#34This is very informative&#34,\n        icon    = beautiful.awesome_icon,\n        urgency = &#34normal&#34,\n    }\n  \n    -- Create a normal notification.\n    naughty.notification {\n        title   = &#34A notification 2&#34,\n        message = &#34This is very informative&#34,\n        icon    = beautiful.awesome_icon,\n        urgency = &#34critical&#34,\n    }\n\n In this example, we setup a different widget template for some music\n notifications:\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_rules_widget_template.svg)\n\n \n    ruled.notification.connect_signal(&#34request::rules&#34, function()\n        -- Add a red background for urgent notifications.\n        ruled.notification.append_rule {\n            rule       = { app_name = &#34mdp&#34 },\n            properties = {\n                widget_template = {\n                    {\n                        {\n                            {\n                                {\n                                    naughty.widget.icon,\n                                    forced_height = 48,\n                                    halign        = &#34center&#34,\n                                    valign        = &#34center&#34,\n                                    widget        = wibox.container.place\n                                },\n                                {\n                                    align  = &#34center&#34,\n                                    widget = naughty.widget.title,\n                                },\n                                {\n                                    align  = &#34center&#34,\n                                    widget = naughty.widget.message,\n                                },\n                                {\n                                    orientation   = &#34horizontal&#34,\n                                    widget        = wibox.widget.separator,\n                                    forced_height = 1,\n                                },\n                                {\n                                    nil,\n                                    {\n                                        wibox.widget.textbox &#34⏪&#34,\n                                        wibox.widget.textbox &#34⏸&#34,\n                                        wibox.widget.textbox &#34⏩&#34,\n                                        spacing = 20,\n                                        layout  = wibox.layout.fixed.horizontal,\n                                    },\n                                    expand = &#34outside&#34,\n                                    nil,\n                                    layout = wibox.layout.align.horizontal,\n                                },\n                                spacing = 10,\n                                layout  = wibox.layout.fixed.vertical,\n                            },\n                            margins = beautiful.notification_margin,\n                            widget  = wibox.container.margin,\n                        },\n                        id     = &#34background_role&#34,\n                        widget = naughty.container.background,\n                    },\n                    strategy = &#34max&#34,\n                    width    = 160,\n                    widget   = wibox.container.constraint,\n                }\n            }\n        }\n    end)\n    naughty.connect_signal(&#34request::display&#34, function(n)\n        naughty.layout.box { notification = n }\n    end)\n        icon      = beautiful.awesome_icon,\n\n In this example, we add action to a notification that originally lacked\n them:\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_rules_add_actions.svg)\n\n \n    ruled.notification.connect_signal(&#34request::rules&#34, function()\n        -- Add a red background for urgent notifications.\n        ruled.notification.append_rule {\n            rule       = { }, -- Match everything.\n            properties = {\n                append_actions = {\n                   naughty.action {\n                       name = &#34Snooze (5m)&#34,\n                   },\n                   naughty.action {\n                       name = &#34Snooze (15m)&#34,\n                   },\n                   naughty.action {\n                       name = &#34Snooze (1h)&#34,\n                   },\n                },\n            }\n        }\n    end)\n  \n    -- Create a normal notification.\n    naughty.notification {\n        title   = &#34A notification&#34,\n        message = &#34This is very informative&#34,\n        icon    = beautiful.awesome_icon,\n        actions = {\n            naughty.action { name = &#34Existing 1&#34 },\n            naughty.action { name = &#34Existing 2&#34 },\n        }\n    }\n\n Here is a list of all properties available in the `properties` section of\n a rule:\n\n<table class='widget_list' border=1>\n <tr>\n  <th align='center'>Name</th>\n  <th align='center'>Description</th>\n </tr>\n   <tr><td><a href='../core_components/notification.html#id'>id</a></td><td>Unique identifier of the notification</td></tr>\n   <tr><td><a href='../core_components/notification.html#title'>title</a></td><td>Title of the notification</td></tr>\n   <tr><td><a href='../core_components/notification.html#timeout'>timeout</a></td><td>Time in seconds after which popup expires</td></tr>\n   <tr><td><a href='../core_components/notification.html#urgency'>urgency</a></td><td>The notification urgency level</td></tr>\n   <tr><td><a href='../core_components/notification.html#category'>category</a></td><td>The notification category</td></tr>\n   <tr><td><a href='../core_components/notification.html#resident'>resident</a></td><td>True if the notification should be kept when an action is pressed</td></tr>\n   <tr><td><a href='../core_components/notification.html#hover_timeout'>hover\\_timeout</a></td><td>Delay in seconds after which hovered popup disappears</td></tr>\n   <tr><td><a href='../core_components/notification.html#screen'>screen</a></td><td>Target screen for the notification</td></tr>\n   <tr><td><a href='../core_components/notification.html#position'>position</a></td><td>Corner of the workarea displaying the popups</td></tr>\n   <tr><td><a href='../core_components/notification.html#ontop'>ontop</a></td><td>Boolean forcing popups to display on top</td></tr>\n   <tr><td><a href='../core_components/notification.html#height'>height</a></td><td>Popup height</td></tr>\n   <tr><td><a href='../core_components/notification.html#width'>width</a></td><td>Popup width</td></tr>\n   <tr><td><a href='../core_components/notification.html#font'>font</a></td><td>Notification font</td></tr>\n   <tr><td><a href='../core_components/notification.html#icon'>icon</a></td><td>\\\"All in one\\\" way to access the default image or icon</td></tr>\n   <tr><td><a href='../core_components/notification.html#icon_size'>icon\\_size</a></td><td>Desired icon size in px</td></tr>\n   <tr><td><a href='../core_components/notification.html#app_icon'>app\\_icon</a></td><td>The icon provided in the `app_icon` field of the DBus notification</td></tr>\n   <tr><td><a href='../core_components/notification.html#image'>image</a></td><td>The notification image</td></tr>\n   <tr><td><a href='../core_components/notification.html#images'>images</a></td><td>The notification (animated) images</td></tr>\n   <tr><td><a href='../core_components/notification.html#fg'>fg</a></td><td>Foreground color</td></tr>\n   <tr><td><a href='../core_components/notification.html#bg'>bg</a></td><td>Background color</td></tr>\n   <tr><td><a href='../core_components/notification.html#border_width'>border\\_width</a></td><td>Border width</td></tr>\n   <tr><td><a href='../core_components/notification.html#border_color'>border\\_color</a></td><td>Border color</td></tr>\n   <tr><td><a href='../core_components/notification.html#shape'>shape</a></td><td>Widget shape</td></tr>\n   <tr><td><a href='../core_components/notification.html#opacity'>opacity</a></td><td>Widget opacity</td></tr>\n   <tr><td><a href='../core_components/notification.html#margin'>margin</a></td><td>Widget margin</td></tr>\n   <tr><td><a href='../core_components/notification.html#preset'>preset</a></td><td>Table with any of the above parameters</td></tr>\n   <tr><td><a href='../core_components/notification.html#callback'>callback</a></td><td>Function that will be called with all arguments</td></tr>\n   <tr><td><a href='../core_components/notification.html#actions'>actions</a></td><td>A table containing strings that represents actions to buttons</td></tr>\n   <tr><td><a href='../core_components/notification.html#ignore'>ignore</a></td><td>Ignore this notification, do not display</td></tr>\n   <tr><td><a href='../core_components/notification.html#suspended'>suspended</a></td><td>Tell if the notification is currently suspended (read only)</td></tr>\n   <tr><td><a href='../core_components/notification.html#is_expired'>is\\_expired</a></td><td>If the notification is expired</td></tr>\n   <tr><td><a href='../core_components/notification.html#auto_reset_timeout'>auto\\_reset\\_timeout</a></td><td>If the timeout needs to be reset when a property changes</td></tr>\n   <tr><td><a href='../core_components/notification.html#ignore_suspend'>ignore\\_suspend</a></td><td></td></tr>\n   <tr><td><a href='../core_components/notification.html#clients'>clients</a></td><td>A list of clients associated with this notification</td></tr>\n   <tr><td><a href='../core_components/notification.html#app_name'>app\\_name</a></td><td>The application name specified by the notification</td></tr>\n   <tr><td><a href='../core_components/notification.html#widget_template'>widget\\_template</a></td><td>The widget template used to represent the notification</td></tr>\n </table>\n",
  "items":[{
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "modifiers":{
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "usage":[[]]
      },
      "description":"\n\n This is useful, along with other matching properties and the `ignore`\n notification property, to prevent focused application from spamming with\n useless notifications.\n\n\n\n",
      "tags":[],
      "section":"matchingproperty",
      "inferred":true,
      "subparams":[],
      "summary":"The notification is attached to the focused client.",
      "name":"has_focus",
      "kind":"extra matching properties used in rules",
      "usage":["-- Note that the the message is matched as a pattern.\nruled.notification.append_rule {\n    rule       = { message = &#34I am SPAM&#34, has_focus = true },\n    properties = { ignore  = true}\n}\n"],
      "args":"(boolean)",
      "type":"matchingproperty",
      "lineno":224
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "usage":[[]]
      },
      "description":"\n\n\n\n",
      "tags":{
        "see":[]
      },
      "section":"matchingproperty",
      "inferred":true,
      "subparams":[],
      "summary":"The notification is attached to a client with this class.",
      "name":"has_class",
      "kind":"extra matching properties used in rules",
      "usage":["ruled.notification.append_rule {\n    rule       = { has_class = &#34amarok&#34 },\n    properties = {\n        widget_template = my_music_widget_template,\n        actions         = get_mpris_actions(),\n    }\n}\n"],
      "args":"(string)",
      "type":"matchingproperty",
      "lineno":242
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "param":{
          "1":[],
          "string":[]
        },
        "usage":[[]]
      },
      "description":"\n\n\n\n",
      "tags":{
        "see":[]
      },
      "section":"matchingproperty",
      "inferred":true,
      "subparams":[],
      "summary":"The notification is attached to a client with this instance name.",
      "name":"has_instance",
      "kind":"extra matching properties used in rules",
      "usage":["ruled.notification.append_rule {\n    rule       = { has_instance = &#34amarok&#34 },\n    properties = {\n        widget_template = my_music_widget_template,\n        actions         = get_mpris_actions(),\n    }\n}\n"],
      "args":"(string)",
      "type":"matchingproperty",
      "lineno":260
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "summary":"Append some actions to a notification.",
      "name":"append_actions",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n Using `actions` directly is destructive since it will override existing\n actions.\n",
      "type":"clientruleproperty",
      "section":"clientruleproperty",
      "kind":"extra properties available in the rules",
      "args":"(table)",
      "tags":[],
      "lineno":268
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":""
        }
      },
      "summary":"Set a fallback timeout when the notification doesn't have an explicit timeout.",
      "name":"implicit_timeout",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "number":[]
        },
        "field":{
          "1":[],
          "number":[]
        }
      },
      "description":"\n\n The value is in seconds. If none is specified, the default is 5 seconds. If\n the notification specifies its own timeout, this property will be skipped.\n",
      "type":"clientruleproperty",
      "section":"clientruleproperty",
      "kind":"extra properties available in the rules",
      "args":"(number)",
      "tags":[],
      "lineno":276
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Do not let this notification timeout, even if it asks for it.",
      "name":"never_timeout",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"clientruleproperty",
      "section":"clientruleproperty",
      "kind":"extra properties available in the rules",
      "args":"(boolean)",
      "tags":[],
      "lineno":280
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "map":{
          "name":" The source name."
        }
      },
      "summary":"Remove a source.",
      "name":"ruled.notification.remove_rule_source",
      "modifiers":{
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"string"
          },
          "name":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "name":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name)",
      "tags":[],
      "lineno":351
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"n",
        "map":{
          "n":" The notification."
        }
      },
      "summary":"Apply the tag rules to a client.",
      "name":"ruled.notification.apply",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"naughty.notification"
          },
          "n":{
            "type":"naughty.notification"
          }
        },
        "field":{
          "1":{
            "type":"naughty.notification"
          },
          "n":{
            "type":"naughty.notification"
          }
        }
      },
      "description":"\n\n This is useful when it is necessary to apply rules after a tag has been\n created. Many workflows can make use of \"blank\" tags which wont match any\n rules until later.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(n)",
      "tags":[],
      "lineno":363
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"rule",
        "map":{
          "rule":" A valid rule."
        }
      },
      "summary":"Add a new rule to the default set.",
      "name":"ruled.notification.append_rule",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "rule":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "rule":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(rule)",
      "tags":[],
      "lineno":384
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"rule",
        "map":{
          "rule":" A table with rules."
        }
      },
      "summary":"Add a new rules to the default set.",
      "name":"ruled.notification.append_rules",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "rule":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "rule":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(rule)",
      "tags":[],
      "lineno":391
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"rule",
        "map":{
          "rule":" A valid rule."
        }
      },
      "summary":"Remove a new rule to the default set.",
      "name":"ruled.notification.remove_rule",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "rule":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "rule":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(rule)",
      "tags":[],
      "lineno":398
    },{
      "inferred":true,
      "subparams":{
        "callback":["callback.c","callback.properties","callback.callbacks"]
      },
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"callback",
        "3":"depends_on",
        "4":"precede",
        "map":{
          "callback.callbacks":" A table of all callbacks scheduled to be\n  executed after the main properties are applied.",
          "callback.properties":" The current properties. The callback should\n  add to and overwrite properties in this table",
          "depends_on":" A list of names of sources this source depends on\n  (sources that must be executed *before* `name`.",
          "callback":" The callback that is called to produce properties.",
          "precede":" A list of names of sources this source have a\n  priority over.",
          "name":" The provider name. It must be unique.",
          "callback.c":" The client"
        }
      },
      "summary":"Add a new rule source.",
      "name":"add_rule_source",
      "modifiers":{
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "3":{
            "type":"client"
          },
          "4":{
            "type":"table"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table",
            "opt":"{}"
          },
          "7":{
            "type":"table",
            "opt":"{}"
          },
          "callback.callbacks":{
            "type":"table"
          },
          "callback.properties":{
            "type":"table"
          },
          "depends_on":{
            "type":"table",
            "opt":"{}"
          },
          "callback":{
            "type":"function"
          },
          "precede":{
            "type":"table",
            "opt":"{}"
          },
          "name":{
            "type":"string"
          },
          "callback.c":{
            "type":"client"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "3":{
            "type":"client"
          },
          "4":{
            "type":"table"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table",
            "opt":"{}"
          },
          "7":{
            "type":"table",
            "opt":"{}"
          },
          "callback.callbacks":{
            "type":"table"
          },
          "callback.properties":{
            "type":"table"
          },
          "depends_on":{
            "type":"table",
            "opt":"{}"
          },
          "callback":{
            "type":"function"
          },
          "precede":{
            "type":"table",
            "opt":"{}"
          },
          "name":{
            "type":"string"
          },
          "callback.c":{
            "type":"client"
          }
        }
      },
      "description":"\n\n A rule source is a provider called when a client initially request tags. It\n allows to configure, select or create a tag (or many) to be attached to the\n client.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, callback, depends_on, precede)",
      "tags":[],
      "lineno":423
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"rulecomponent",
      "inferred":true,
      "subparams":[],
      "summary":"A table whose content will be used to set the target object properties.",
      "name":"properties",
      "type":"rulecomponent",
      "args":"(table)",
      "kind":"rule components",
      "lineno":459
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"function",
        "map":{
          "function":""
        }
      },
      "summary":"A callback function to call *before* the `properties` have been applied.",
      "name":"callback",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "function":[]
        },
        "field":{
          "1":[],
          "function":[]
        }
      },
      "description":"\n\n The callback is called with the current client as first argument.\n",
      "type":"rulecomponent",
      "section":"rulecomponent",
      "kind":"rule components",
      "args":"(function)",
      "tags":[],
      "lineno":469
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"rulecomponent",
      "inferred":true,
      "subparams":[],
      "summary":"A table whose content will be compared to the target object current properties.",
      "name":"rule",
      "type":"rulecomponent",
      "args":"(table)",
      "kind":"rule components",
      "lineno":476
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n",
      "tags":{
        "see":[]
      },
      "section":"rulecomponent",
      "inferred":true,
      "subparams":[],
      "summary":"Similar to `rule`, but each entry is a table with multiple values.",
      "name":"rule_any",
      "type":"rulecomponent",
      "args":"(table)",
      "kind":"rule components",
      "lineno":484
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"rulecomponent",
      "inferred":true,
      "subparams":[],
      "summary":"The negative equivalent of `rule`.",
      "name":"except",
      "type":"rulecomponent",
      "args":"(table)",
      "kind":"rule components",
      "lineno":491
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"rulecomponent",
      "inferred":true,
      "subparams":[],
      "summary":"The negative equivalent of `rule_any`.",
      "name":"except_any",
      "type":"rulecomponent",
      "args":"(table)",
      "kind":"rule components",
      "lineno":498
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"rulecomponent",
      "inferred":true,
      "subparams":[],
      "summary":"Matches when one of every \\\"category\\\" of components match.",
      "name":"rule_every",
      "type":"rulecomponent",
      "args":"(table)",
      "kind":"rule components",
      "lineno":505
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n The comparison will be made using the lesser (`<`) operator.\n",
      "tags":{
        "see":[]
      },
      "section":"rulecomponent",
      "inferred":true,
      "subparams":[],
      "summary":"A table whose content will be compared to the target object current properties.",
      "name":"rule_lesser",
      "type":"rulecomponent",
      "args":"(table)",
      "kind":"rule components",
      "lineno":514
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[],[]],
        "return":[],
        "param":{
          "1":[],
          "table":[]
        },
        "field":{
          "1":[],
          "table":[]
        }
      },
      "description":"\n\n The comparison will be made using the greater (`>`) operator.\n",
      "tags":{
        "see":[]
      },
      "section":"rulecomponent",
      "inferred":true,
      "subparams":[],
      "summary":"A table whose content will be compared to the target object current properties.",
      "name":"rule_greater",
      "type":"rulecomponent",
      "args":"(table)",
      "kind":"rule components",
      "lineno":523
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"id",
        "map":{
          "id":""
        }
      },
      "summary":"An identifier for this rule.",
      "name":"id",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table|string|number|function"
          },
          "id":{
            "type":"table|string|number|function"
          }
        },
        "field":{
          "1":{
            "type":"table|string|number|function"
          },
          "id":{
            "type":"table|string|number|function"
          }
        }
      },
      "description":"\n\n It can be anything. It will be compared with the `==` operator. Strings are\n highly recommended.\n\n Setting an `id` is useful to be able to remove the rule by using its id\n instead of a table reference. Modules can also listen to `rule::appended` and\n modify or disable a rule.\n",
      "type":"rulecomponent",
      "section":"rulecomponent",
      "kind":"rule components",
      "args":"(id)",
      "tags":[],
      "lineno":535
    }],
  "type":"ruleslib",
  "file":"/home/cji/portless/awesome/build/lib/ruled/notification.lua",
  "package":"",
  "tags":{
    "author":["Emmanuel Lepage Vallee &lt;elv1313@gmail.com&gt;"],
    "copyright":"2017-2019 Emmanuel Lepage Vallee"
  },
  "lineno":200
}