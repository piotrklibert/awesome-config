{
  "inferred":true,
  "kind":"core_components",
  "mod_name":"awesome",
  "summary":"AwesomeWM lifecycle API.",
  "sections":{
    "by_name":[]
  },
  "name":"awesome",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"\n\n This module contains the functions and signal to manage the lifecycle of the\n AwesomeWM process. It allows to execute code at specific point from the early\n initialization all the way to the last events before exiting or restarting.\n\n Additionally it handles signals for spawn and keyboard related events.\n",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"type",
        "map":{
          "name":" The name of the X11 property.",
          "type":" One of \"string\", \"number\" or \"boolean\"."
        }
      },
      "summary":"Register a new xproperty.",
      "name":"register_xproperty",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "name":{
            "type":"string"
          },
          "type":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "name":{
            "type":"string"
          },
          "type":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, type)",
      "tags":[],
      "lineno":42
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"err",
        "map":{
          "err":" Table with the error object, can be converted to a string with\n `tostring(err)`."
        }
      },
      "summary":"A call into the Lua code aborted with an error.",
      "name":"debug::error",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "err":[]
        },
        "field":{
          "1":[],
          "err":[]
        }
      },
      "description":"\n\n This signal is used in the example configuration, @{05-awesomerc.md},\n to let a notification box pop up.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(err)",
      "tags":[],
      "lineno":76
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"hint",
        "2":"see",
        "3":"args",
        "map":{
          "see":" The name of the newer API",
          "hint":" String with a hint on what to use instead of the\n deprecated functionality.",
          "args":" The name of the newer API"
        }
      },
      "summary":"A deprecated Lua function was called.",
      "name":"debug::deprecation",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"nil",
            "type":"string|nil",
            "opt":"nil"
          },
          "3":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          },
          "see":{
            "optchain":"nil",
            "type":"string|nil",
            "opt":"nil"
          },
          "hint":{
            "type":"string"
          },
          "args":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"nil",
            "type":"string|nil",
            "opt":"nil"
          },
          "3":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          },
          "see":{
            "optchain":"nil",
            "type":"string|nil",
            "opt":"nil"
          },
          "hint":{
            "type":"string"
          },
          "args":{
            "optchain":"nil",
            "type":"table|nil",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(hint[, see=nil[, args=nil]])",
      "tags":[],
      "lineno":84
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"unknown1",
        "2":"unknown2",
        "map":{
          "unknown1":" Class?",
          "unknown2":" Key?"
        }
      },
      "summary":"An invalid key was read from an object.",
      "name":"debug::index::miss",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "unknown1":[],
          "unknown2":[]
        },
        "field":{
          "1":[],
          "2":[],
          "unknown1":[],
          "unknown2":[]
        }
      },
      "description":"\n\n This can happen if `foo` in an `c.foo` access does not exist.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(unknown1, unknown2)",
      "tags":[],
      "lineno":93
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"unknown1",
        "2":"unknown2",
        "3":"unknown3",
        "map":{
          "unknown1":" Class?",
          "unknown2":" Key?",
          "unknown3":" Value?"
        }
      },
      "summary":"An invalid key was written to an object.",
      "name":"debug::newindex::miss",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "3":[],
          "unknown1":[],
          "unknown2":[],
          "unknown3":[]
        },
        "field":{
          "1":[],
          "2":[],
          "3":[],
          "unknown1":[],
          "unknown2":[],
          "unknown3":[]
        }
      },
      "description":"\n\n This can happen if `foo` in an `c.foo = \"bar\"` assignment doesn't exist.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(unknown1, unknown2, unknown3)",
      "tags":[],
      "lineno":99
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"The systray should be updated.",
      "name":"systray::update",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This signal is used in `wibox.widget.systray`.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":106
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"The wallpaper has changed.",
      "name":"wallpaper_changed",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This signal is used for pseudo-transparency in `wibox.drawable` if no\n composite manager is running.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":113
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Keyboard map has changed.",
      "name":"xkb::map_changed",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This signal is sent after the new keymap has been loaded. It is used in\n `awful.widget.keyboardlayout` to redraw the layout.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":120
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"group",
        "map":{
          "group":" Integer containing the changed group"
        }
      },
      "summary":"Keyboard group has changed.",
      "name":"xkb::group_changed.",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "group":[]
        },
        "field":{
          "1":[],
          "group":[]
        }
      },
      "description":"\n\n It's used in `awful.widget.keyboardlayout` to redraw the layout.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(group)",
      "tags":[],
      "lineno":127
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Refresh.",
      "name":"refresh",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This signal is emitted as a kind of idle signal in the event loop.\n One example usage is in `gears.timer` to executed delayed calls.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":133
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"AwesomeWM is about to enter the event loop.",
      "name":"startup",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n\n This means all initialization has been done.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":142
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"reason_restart",
        "map":{
          "reason_restart":" Boolean value is true if the signal was sent\n because of a restart."
        }
      },
      "summary":"AwesomeWM is exiting / about to restart.",
      "name":"exit",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "reason_restart":[]
        },
        "field":{
          "1":[],
          "reason_restart":[]
        }
      },
      "description":"\n\n This signal is emitted in the `atexit` handler as well when awesome\n restarts.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(reason_restart)",
      "tags":[],
      "lineno":151
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"output",
        "2":"connection_state",
        "map":{
          "connection_state":" String containing the connection status of\n the output: It will be either \"Connected\", \"Disconnected\" or\n \"Unknown\".",
          "output":" String containing which output has changed."
        }
      },
      "summary":"The output status of a screen has changed.",
      "name":"screen::change",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "connection_state":{
            "type":"string"
          },
          "output":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"string"
          },
          "connection_state":{
            "type":"string"
          },
          "output":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(output, connection_state)",
      "tags":[],
      "lineno":153
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"code",
        "map":{
          "code":" The exit code to use when exiting."
        }
      },
      "summary":"Quit awesome.",
      "name":"quit",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "type":"integer",
            "opt":"0"
          },
          "code":{
            "optchain":"0",
            "type":"integer",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "type":"integer",
            "opt":"0"
          },
          "code":{
            "optchain":"0",
            "type":"integer",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"([code=0])",
      "tags":[],
      "lineno":197
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"cmd",
        "map":{
          "cmd":" The command line to execute."
        }
      },
      "summary":"Execute another application, probably a window manager, to replace\n awesome.",
      "name":"exec",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "cmd":[]
        },
        "field":{
          "1":[],
          "cmd":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(cmd)",
      "tags":[],
      "lineno":214
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Restart awesome.",
      "name":"restart",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":228
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"pid",
        "2":"sig",
        "map":{
          "pid":" Process identifier.  0 and negative values have special\n   meaning.  See `man 3 kill`.",
          "sig":" Signal number.\n   See `awesome.unix_signal` for a list of signals."
        }
      },
      "summary":"Send a signal to a process.",
      "name":"kill",
      "modifiers":{
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "pid":{
            "type":"integer"
          },
          "sig":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer"
          },
          "pid":{
            "type":"integer"
          },
          "sig":{
            "type":"integer"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(pid, sig)",
      "tags":[],
      "lineno":243
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Synchronize with the X11 server.",
      "name":"sync",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":" This is needed in the test suite to avoid\n some race conditions. You should never need to use this function.",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":258
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"pixbuf",
        "2":"path",
        "map":{
          "path":" The pixbuf origin path",
          "pixbuf":" The pixbuf as a light user datum."
        }
      },
      "summary":"Translate a GdkPixbuf to a cairo image surface..",
      "name":"pixbuf_to_surface",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "2":[],
          "path":[],
          "pixbuf":[]
        },
        "field":{
          "1":[],
          "2":[],
          "path":[],
          "pixbuf":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(pixbuf, path)",
      "tags":[],
      "lineno":272
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "map":{
          "name":" The file name."
        }
      },
      "summary":"Load an image from a given path.",
      "name":"load_image",
      "modifiers":{
        "return":[{
            "1":true
          },{
            "2":true
          },{
            "type":"string",
            "2":true
          }],
        "param":{
          "1":[],
          "name":[]
        },
        "field":{
          "1":[],
          "name":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name)",
      "tags":[],
      "lineno":291
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"size",
        "map":{
          "size":" The size of the icons in pixels."
        }
      },
      "summary":"Set the preferred size for client icons.",
      "name":"set_preferred_icon_size",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "size":[]
        },
        "field":{
          "1":[],
          "size":[]
        }
      },
      "description":"\n\n The closest equal or bigger size is picked if present, otherwise the closest\n smaller size is picked. The default is 0 pixels, ie. the smallest icon.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(size)",
      "tags":[],
      "lineno":321
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"version",
        "map":{
          "version":""
        }
      },
      "summary":"The AwesomeWM version.",
      "name":"version",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"string"
          },
          "version":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(version)",
      "tags":[],
      "lineno":610
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"release",
        "map":{
          "release":""
        }
      },
      "summary":"The AwesomeWM release name.",
      "name":"release",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"string"
          },
          "release":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(release)",
      "tags":[],
      "lineno":637
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"api_level",
        "map":{
          "api_level":""
        }
      },
      "summary":"The AwesomeWM API level.",
      "name":"api_level",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"string"
          },
          "api_level":{
            "type":"string"
          }
        }
      },
      "description":"\n\n By default, this matches the major version (first component of the version).\n\n API levels are used to allow newer version of AwesomeWM to alter the behavior\n and subset deprecated APIs. Using an older API level than the current major\n version allows to use legacy `rc.lua` with little porting. However, they won't\n be able to use all the new features. Attempting to use a newer feature along\n with an older API level is not and will not be supported, even if it almost\n works. Keeping up to date with the newer API levels is highly recommended.\n\n Going the other direction, setting an higher API level allows to take\n advantage of experimental feature. It will also be much harsher when it comes\n to deprecation. Setting the API level value beyond `current+3` will treat\n using APIs currently pending deprecation as fatal errors. All new code\n submitted to the upstream AwesomeWM codebase is forbidden to use deprecated\n APIs. Testing your patches with mode and the default config is recommended\n before submitting a patch.\n\n You can use the `-l` command line option or `api-level` modeline key to set\n the API level for your `rc.lua`. This setting is global and read only,\n individual modules cannot set their own API level.\n",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(api_level)",
      "tags":[],
      "lineno":642
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"conffile",
        "map":{
          "conffile":""
        }
      },
      "summary":"The configuration file which has been loaded.",
      "name":"conffile",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"string"
          },
          "conffile":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(conffile)",
      "tags":[],
      "lineno":647
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"startup",
        "map":{
          "startup":""
        }
      },
      "summary":"True if we are still in startup, false otherwise.",
      "name":"startup",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"boolean"
          },
          "startup":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(startup)",
      "tags":[],
      "lineno":653
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"startup_errors",
        "map":{
          "startup_errors":""
        }
      },
      "summary":"Error message for errors that occurred during\n  startup.",
      "name":"startup_errors",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"string"
          },
          "startup_errors":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(startup_errors)",
      "tags":[],
      "lineno":658
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"composite_manager_running",
        "map":{
          "composite_manager_running":""
        }
      },
      "summary":"True if a composite manager is running.",
      "name":"composite_manager_running",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"boolean"
          },
          "composite_manager_running":{
            "type":"boolean"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(composite_manager_running)",
      "tags":[],
      "lineno":663
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"unix_signal",
        "map":{
          "unix_signal":""
        }
      },
      "summary":"Table mapping between signal numbers and signal identifiers.",
      "name":"unix_signal",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"table"
          },
          "unix_signal":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(unix_signal)",
      "tags":[],
      "lineno":668
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"hostname",
        "map":{
          "hostname":""
        }
      },
      "summary":"The hostname of the computer on which we are running.",
      "name":"hostname",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"string"
          },
          "hostname":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(hostname)",
      "tags":[],
      "lineno":673
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"themes_path",
        "map":{
          "themes_path":""
        }
      },
      "summary":"The path where themes were installed to.",
      "name":"themes_path",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"string"
          },
          "themes_path":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(themes_path)",
      "tags":[],
      "lineno":678
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"icon_path",
        "map":{
          "icon_path":""
        }
      },
      "summary":"The path where icons were installed to.",
      "name":"icon_path",
      "modifiers":{
        "return":[],
        "field":{
          "1":{
            "type":"string"
          },
          "icon_path":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"(icon_path)",
      "tags":[],
      "lineno":680
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" A string with the event name.",
          "func":" The function to call."
        }
      },
      "summary":"Add a global signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "name":[],
          "func":[]
        },
        "field":{
          "1":[],
          "2":[],
          "name":[],
          "func":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, func)",
      "tags":[],
      "lineno":776
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" A string with the event name.",
          "func":" The function to call."
        }
      },
      "summary":"Remove a global signal.",
      "name":"disconnect_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "name":[],
          "func":[]
        },
        "field":{
          "1":[],
          "2":[],
          "name":[],
          "func":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, func)",
      "tags":[],
      "lineno":791
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" A string with the event name.",
          "...":" The signal arguments."
        }
      },
      "summary":"Emit a global signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "name":[],
          "...":[]
        },
        "field":{
          "1":[],
          "2":[],
          "name":[],
          "...":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, ...)",
      "tags":[],
      "lineno":808
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"arg",
        "map":{
          "arg":" Table which only got the \"id\" key set"
        }
      },
      "summary":"For some reason the application aborted startup",
      "name":"spawn::canceled",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "arg":[]
        },
        "field":{
          "1":[],
          "arg":[]
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(arg)",
      "tags":[],
      "lineno":37
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"arg",
        "map":{
          "arg":" Table which describes the spawn event"
        }
      },
      "summary":"When one of the fields from the @{spawn::initiated} table changes",
      "name":"spawn::change",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "arg":[]
        },
        "field":{
          "1":[],
          "arg":[]
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(arg)",
      "tags":[],
      "lineno":42
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"arg",
        "map":{
          "arg":" Table which only got the \"id\" key set"
        }
      },
      "summary":"An application finished starting",
      "name":"spawn::completed",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "arg":[]
        },
        "field":{
          "1":[],
          "arg":[]
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(arg)",
      "tags":[],
      "lineno":47
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"arg",
        "map":{
          "arg":" Table which describes the spawn event"
        }
      },
      "summary":"When a new client is beginning to start",
      "name":"spawn::initiated",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "arg":[]
        },
        "field":{
          "1":[],
          "arg":[]
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(arg)",
      "tags":[],
      "lineno":52
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"arg",
        "map":{
          "arg":" Table which only got the \"id\" key set"
        }
      },
      "summary":"An application started a spawn event but didn't start in time.",
      "name":"spawn::timeout",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "arg":[]
        },
        "field":{
          "1":[],
          "arg":[]
        }
      },
      "description":"",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"(arg)",
      "tags":[],
      "lineno":54
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"cmd",
        "2":"use_sn",
        "3":"stdin",
        "4":"stdout",
        "5":"stderr",
        "6":"exit_callback",
        "7":"cmd",
        "map":{
          "exit_callback":" Function to call on process exit. The\n   function arguments will be type of exit (\"exit\" or \"signal\") and the exit\n   code / the signal number causing process termination.",
          "cmd":" The environment to use for the spawned program.\n   Without this the spawned process inherits awesome's environment.",
          "use_sn":" Use startup-notification?",
          "stdout":" Return a fd for stdout?",
          "stderr":" Return a fd for stderr?",
          "stdin":" Return a fd for stdin?"
        }
      },
      "summary":"Spawn a program.",
      "name":"spawn",
      "modifiers":{
        "return":[{
            "1":true,
            "type":"integer"
          },{
            "1":true,
            "type":"string"
          },{
            "1":true,
            "type":"integer"
          },{
            "1":true,
            "type":"integer"
          },{
            "1":true,
            "type":"integer"
          },{
            "type":"string",
            "2":true
          }],
        "param":{
          "1":{
            "type":"string|table"
          },
          "2":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "4":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "6":{
            "optchain":"nil",
            "type":"function",
            "opt":"nil"
          },
          "7":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "exit_callback":{
            "optchain":"nil",
            "type":"function",
            "opt":"nil"
          },
          "cmd":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "use_sn":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "stdout":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "stderr":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "stdin":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "type":"string|table"
          },
          "2":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "4":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "6":{
            "optchain":"nil",
            "type":"function",
            "opt":"nil"
          },
          "7":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "exit_callback":{
            "optchain":"nil",
            "type":"function",
            "opt":"nil"
          },
          "cmd":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "use_sn":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "stdout":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "stderr":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "stdin":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"\n The program will be started on the default screen.\n",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(cmd[, use_sn=true[, stdin=false[, stdout=false[, stderr=false[, exit_callback=nil[, cmd=nil]]]]]])",
      "tags":[],
      "lineno":425
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"num",
        "map":{
          "num":" keyboard layout number, integer from 0 to 3"
        }
      },
      "summary":"Switch keyboard layout.",
      "name":"xkb_set_layout_group",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"integer"
          },
          "num":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "type":"integer"
          },
          "num":{
            "type":"integer"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(num)",
      "tags":[],
      "lineno":34
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get current layout number.",
      "name":"xkb_get_layout_group",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"integer"
          }]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":54
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get layout short names.",
      "name":"xkb_get_group_names",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"string"
          }]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":86
    }],
  "type":"coreclassmod",
  "file":"/home/cji/portless/awesome/build/luaa.c",
  "package":"",
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2008-2009 Julien Danjou"
  },
  "lineno":40
}