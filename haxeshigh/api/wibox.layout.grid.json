{
  "inferred":true,
  "kind":"widget_layouts",
  "mod_name":"wibox.layout.grid",
  "summary":"A grid layout.",
  "sections":{
    "by_name":[]
  },
  "name":"wibox.layout.grid",
  "modifiers":{
    "usage":[[]],
    "author":[[]],
    "supermodule":[[]],
    "copyright":[]
  },
  "description":"\n\n Widgets spanning several columns or rows cannot be included using the\n declarative system.\n Instead, create the grid layout and call the `add_widget_at` method.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_imperative.svg)\n\n \n     local l = wibox.widget {\n         homogeneous   = true,\n         spacing       = 5,\n         min_cols_size = 10,\n         min_rows_size = 10,\n         layout        = wibox.layout.grid,\n     }\n     l:add_widget_at(first , 2, 1, 1, 2)\n     l:add_widget_at(second, 3, 1, 1, 2)\n     l:add_widget_at(third , 2, 3, 2, 1)\n     l:add_widget_at(fourth, 4, 1, 1, 1)\n     l:add_widget_at(fifth , 4, 2, 1, 2)\n     l:insert_row(1)\n     l:add_widget_at(lorem, 1, 1, 1, 3)\n\n Using the declarative system, widgets are automatically added next to each\n other spanning only one cell.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_defaults_grid.svg)\n",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":" Preferred orientation: \"horizontal\" or \"vertical\"."
        }
      },
      "summary":"Set the preferred orientation of the grid layout.",
      "name":"orientation",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"\"vertical\"",
            "opt":"\"vertical\""
          },
          "string":{
            "optchain":"\"vertical\"",
            "opt":"\"vertical\""
          }
        },
        "field":{
          "1":{
            "optchain":"\"vertical\"",
            "opt":"\"vertical\""
          },
          "string":{
            "optchain":"\"vertical\"",
            "opt":"\"vertical\""
          }
        }
      },
      "description":"\n\n Allowed values are \"horizontal\" and \"vertical\".\n When calling `get_next_empty`, empty cells are browsed differently:\n\n * for \"horizontal\", the grid can be extended horizontally. The current\n  column is filled first; if no empty cell is found up to `forced_num_rows`,\n  the next column is filled, creating it if it does not exist.\n\n * for \"vertical\", the grid can be extended vertically. The current row is\n  filled first; if no empty cell is found up to `forced_num_cols`, the next\n  row is filled, creating it if it does not exist.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_orientation.svg)\n\n**Usage example output**:\n\n\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([string=\"vertical\"])",
      "tags":[],
      "lineno":98
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Allow to superpose widgets in the same cell.",
      "name":"superpose",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n If false, check before adding a new widget if it will superpose with another\n widget and prevent from adding it.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_superpose.svg)\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([boolean=false])",
      "tags":[],
      "lineno":109
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" Forced number of rows (`nil` for automatic)."
        }
      },
      "summary":"Force the number of rows of the layout.",
      "name":"forced_num_rows",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"number|nil",
            "opt":"nil"
          },
          "number":{
            "optchain":"nil",
            "type":"number|nil",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"number|nil",
            "opt":"nil"
          },
          "number":{
            "optchain":"nil",
            "type":"number|nil",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([number=nil])",
      "tags":[],
      "lineno":113
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" Forced number of columns (`nil` for automatic)."
        }
      },
      "summary":"Force the number of columns of the layout.",
      "name":"forced_num_cols",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"number|nil",
            "opt":"nil"
          },
          "number":{
            "optchain":"nil",
            "type":"number|nil",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"number|nil",
            "opt":"nil"
          },
          "number":{
            "optchain":"nil",
            "type":"number|nil",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([number=nil])",
      "tags":[],
      "lineno":117
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" Minimum size of the columns."
        }
      },
      "summary":"Set the minimum size for the columns.",
      "name":"min_cols_size",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_min_size.svg)\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([number=0])",
      "tags":[],
      "lineno":126
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" Minimum size of the rows."
        }
      },
      "summary":"Set the minimum size for the rows.",
      "name":"min_rows_size",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([number=0])",
      "tags":[],
      "lineno":130
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" The spacing"
        }
      },
      "summary":"The spacing between columns.",
      "name":"horizontal_spacing",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"\n\n see `spacing`\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([number=0])",
      "tags":[],
      "lineno":137
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" The spacing"
        }
      },
      "summary":"The spacing between rows.",
      "name":"vertical_spacing",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"\n\n see `spacing`\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([number=0])",
      "tags":[],
      "lineno":144
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"number",
        "map":{
          "number":" The spacing"
        }
      },
      "summary":"The spacing between rows and columns.",
      "name":"spacing",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "opt":"0"
          },
          "number":{
            "optchain":"0",
            "opt":"0"
          }
        }
      },
      "description":"\n Set both `horizontal_spacing` and `vertical_spacing` to the same value.\n Get the value `horizontal_spacing` or `vertical_spacing` defined by the\n preferred `orientation`.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_spacing.svg)\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([number=0])",
      "tags":[],
      "lineno":156
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":" Expand the grid into the available space"
        }
      },
      "summary":"Controls if the columns are expanded to use all the available width.",
      "name":"horizontal_expand",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n\n see `expand`\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([boolean=false])",
      "tags":[],
      "lineno":163
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":" Expand the grid into the available space"
        }
      },
      "summary":"Controls if the rows are expanded to use all the available height.",
      "name":"vertical_expand",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n\n see `expand`\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([boolean=false])",
      "tags":[],
      "lineno":170
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":" Expand the grid into the available space"
        }
      },
      "summary":"Controls if the columns/rows are expanded to use all the available space.",
      "name":"expand",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n Set both `horizontal_expand` and `vertical_expand` to the same value.\n Get the value `horizontal_expand` or `vertical_expand` defined by the\n preferred `orientation`.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_expand.svg)\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([boolean=false])",
      "tags":[],
      "lineno":182
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":" All the columns have the same width."
        }
      },
      "summary":"Controls if the columns all have the same width or if the width of each\n column depends on the content.",
      "name":"horizontal_homogeneous",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        }
      },
      "description":"\n\n see `homogeneous`\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([boolean=true])",
      "tags":[],
      "lineno":190
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":" All the rows have the same height."
        }
      },
      "summary":"Controls if the rows all have the same height or if the height of each row\n depends on the content.",
      "name":"vertical_homogeneous",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        }
      },
      "description":"\n\n see `homogeneous`\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([boolean=true])",
      "tags":[],
      "lineno":198
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":" All the columns/rows have the same size."
        }
      },
      "summary":"Controls if the columns/rows all have the same size or if the size depends\n on the content.",
      "name":"homogeneous",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        },
        "field":{
          "1":{
            "optchain":"true",
            "opt":"true"
          },
          "boolean":{
            "optchain":"true",
            "opt":"true"
          }
        }
      },
      "description":"\n Set both `horizontal_homogeneous` and `vertical_homogeneous` to the same value.\n Get the value `horizontal_homogeneous` or `vertical_homogeneous` defined\n by the preferred `orientation`.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_expand.svg)\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([boolean=true])",
      "tags":[],
      "lineno":211
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"row",
        "2":"col",
        "3":"row_span",
        "4":"col_span",
        "map":{
          "row":" Top row index",
          "row_span":" Number of rows to span",
          "col":" Left column index",
          "col_span":" Number of columns to span"
        }
      },
      "summary":"Child widget position.",
      "name":"position",
      "modifiers":{
        "return":[],
        "field":{
          "1":[],
          "2":[],
          "3":[],
          "4":[],
          "row":[],
          "row_span":[],
          "col":[],
          "col_span":[]
        }
      },
      "description":" Return of `get_widget_position`.",
      "type":"table",
      "section":"table",
      "kind":"tables",
      "args":"(row, col, row_span, col_span)",
      "tags":[],
      "lineno":218
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the number of rows and columns occupied by the widgets in the grid.",
      "name":"get_dimension",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"number,number"
          }]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":[],
      "lineno":283
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"hint_row",
        "2":"hint_column",
        "map":{
          "hint_column":" The column coordinate of the last occupied cell.",
          "hint_row":" The row coordinate of the last occupied cell."
        }
      },
      "summary":"Find the next available cell to insert a widget.",
      "name":"get_next_empty",
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "2":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "hint_column":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "hint_row":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "2":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "hint_column":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "hint_row":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"\n The grid is browsed according to the `orientation`.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"([hint_row=1[, hint_column=1]])",
      "tags":[],
      "lineno":312
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"...",
        "map":{
          "...":" Widgets that should be added (must at least be one)"
        }
      },
      "summary":"Add some widgets to the given grid layout.",
      "name":"add",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "...":[]
        },
        "field":{
          "1":[],
          "...":[]
        }
      },
      "description":"\n\n The widgets are assumed to span one cell.\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(...)",
      "tags":[],
      "lineno":347
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"child",
        "2":"row",
        "3":"col",
        "4":"row_span",
        "5":"col_span",
        "map":{
          "col":" Column number for the top left corner of the widget",
          "row":" Row number for the top left corner of the widget",
          "row_span":" The number of rows the widget spans.",
          "col_span":" The number of columns the widget spans.",
          "child":" Widget that should be added"
        }
      },
      "summary":"Add a widget to the grid layout at specific coordinate.",
      "name":"add_widget_at",
      "modifiers":{
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":[],
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "5":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "col":{
            "type":"number"
          },
          "row":{
            "type":"number"
          },
          "row_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "col_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "child":[]
        },
        "field":{
          "1":[],
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "5":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "col":{
            "type":"number"
          },
          "row":{
            "type":"number"
          },
          "row_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "col_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "child":[]
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_add.svg)\n\n**Usage example output**:\n\n\n\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(child, row, col[, row_span=1[, col_span=1]])",
      "tags":[],
      "lineno":376
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"...",
        "map":{
          "...":" Widgets that should be removed (must at least be one)"
        }
      },
      "summary":"Remove one or more widgets from the layout.",
      "name":"remove",
      "modifiers":{
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":[],
          "...":[]
        },
        "field":{
          "1":[],
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(...)",
      "tags":[],
      "lineno":417
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"row",
        "2":"col",
        "3":"row_span",
        "4":"col_span",
        "map":{
          "row":" The row coordinate of the widget to remove",
          "row_span":" The number of rows the area to remove spans.",
          "col":" The column coordinate of the widget to remove",
          "col_span":" The number of columns the area to remove spans."
        }
      },
      "summary":"Remove widgets at the coordinates.",
      "name":"remove_widgets_at",
      "modifiers":{
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "4":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "row":{
            "type":"number"
          },
          "row_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "col":{
            "type":"number"
          },
          "col_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "4":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "row":{
            "type":"number"
          },
          "row_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "col":{
            "type":"number"
          },
          "col_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_remove.svg)\n\n**Usage example output**:\n\n\n\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(row, col[, row_span=1[, col_span=1]])",
      "tags":[],
      "lineno":454
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "map":{
          "widget":" The widget"
        }
      },
      "summary":"Return the coordinates of the widget.",
      "name":"get_widget_position",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":[],
          "widget":[]
        },
        "field":{
          "1":[],
          "widget":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget)",
      "tags":[],
      "lineno":475
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"row",
        "2":"col",
        "3":"row_span",
        "4":"col_span",
        "map":{
          "row":" The row coordinate of the widget",
          "row_span":" The number of rows to span.",
          "col":" The column coordinate of the widget",
          "col_span":" The number of columns to span."
        }
      },
      "summary":"Return the widgets at the coordinates.",
      "name":"get_widgets_at",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "4":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "row":{
            "type":"number"
          },
          "row_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "col":{
            "type":"number"
          },
          "col_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "4":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "row":{
            "type":"number"
          },
          "row_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "col":{
            "type":"number"
          },
          "col_span":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(row, col[, row_span=1[, col_span=1]])",
      "tags":[],
      "lineno":495
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"old",
        "2":"new",
        "map":{
          "old":" The widget to remove",
          "new":" The widget to add"
        }
      },
      "summary":"Replace old widget by new widget, spanning the same columns and rows.",
      "name":"replace_widget",
      "modifiers":{
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":[],
          "2":[],
          "old":[],
          "new":[]
        },
        "field":{
          "1":[],
          "2":[],
          "old":[],
          "new":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(old, new)",
      "tags":[],
      "lineno":516
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" Insert the new column at index. If `nil`, the column is added at the end."
        }
      },
      "summary":"Insert column at index.",
      "name":"insert_column",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_insert_column.svg)\n\n**Usage example output**:\n\n\n\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index)",
      "tags":[],
      "lineno":591
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" Extend the column at index. If `nil`, the last column is extended."
        }
      },
      "summary":"Extend column at index.",
      "name":"extend_column",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        }
      },
      "description":"\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_extend_column.svg)\n\n**Usage example output**:\n\n\n\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index)",
      "tags":[],
      "lineno":615
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" Remove column at index. If `nil`, the last column is removed."
        }
      },
      "summary":"Remove column at index.",
      "name":"remove_column",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_wibox_layout_grid_remove_column.svg)\n\n**Usage example output**:\n\n\n\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index)",
      "tags":[],
      "lineno":640
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" Insert the new row at index. If `nil`, the row is added at the end."
        }
      },
      "summary":"Insert row at index.",
      "name":"insert_row",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        }
      },
      "description":"\n\n see `insert_column`\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index)",
      "tags":[],
      "lineno":658
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" Extend the row at index. If `nil`, the last row is extended."
        }
      },
      "summary":"Extend row at index.",
      "name":"extend_row",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        }
      },
      "description":"\n\n see `extend_column`\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index)",
      "tags":[],
      "lineno":676
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "map":{
          "index":" Remove row at index. If `nil`, the last row is removed."
        }
      },
      "summary":"Remove row at index.",
      "name":"remove_row",
      "modifiers":{
        "return":[{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "index":{
            "type":"number|nil"
          }
        }
      },
      "description":"\n\n see `remove_column`\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index)",
      "tags":[],
      "lineno":694
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Reset the grid layout.",
      "name":"reset",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n Remove all widgets and reset row and column counts\n\n **Signal:** widget::reset",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":[],
      "lineno":956
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"When the layout is reset.",
      "name":"widget::reset",
      "modifiers":{
        "field":[],
        "return":[]
      },
      "description":"\n This signal is emitted when the layout has been reset,\n all the widgets removed and the row and column counts reset.",
      "type":"signal",
      "section":"signal",
      "kind":"signals",
      "args":"()",
      "tags":[],
      "lineno":975
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"orientation",
        "map":{
          "orientation":" The preferred grid extension direction."
        }
      },
      "summary":"Return a new grid layout.",
      "name":"wibox.layout.grid",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"\"y\"",
            "type":"string",
            "opt":"\"y\""
          },
          "orientation":{
            "optchain":"\"y\"",
            "type":"string",
            "opt":"\"y\""
          }
        },
        "field":{
          "1":{
            "optchain":"\"y\"",
            "type":"string",
            "opt":"\"y\""
          },
          "orientation":{
            "optchain":"\"y\"",
            "type":"string",
            "opt":"\"y\""
          }
        }
      },
      "description":"\n\n A grid layout sets widgets in a grids of custom number of rows and columns.",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"([orientation=\"y\"])",
      "tags":[],
      "lineno":980
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"forced_num_rows",
        "2":"...",
        "map":{
          "...":" Widgets that should be added to the layout.",
          "forced_num_rows":" Forced number of rows (`nil` for automatic)."
        }
      },
      "summary":"Return a new horizontal grid layout.",
      "name":"horizontal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "2":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          },
          "forced_num_rows":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "2":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          },
          "forced_num_rows":{
            "type":"number|nil"
          }
        }
      },
      "description":"\n\n Each new widget is positioned below the last widget on the same column\n up to `forced_num_rows`. Then the next column is filled, creating it if it doesn't exist.",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(forced_num_rows, ...)",
      "tags":[],
      "lineno":1019
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"forced_num_cols",
        "2":"...",
        "map":{
          "...":" Widgets that should be added to the layout.",
          "forced_num_cols":" Forced number of columns (`nil` for automatic)."
        }
      },
      "summary":"Return a new vertical grid layout.",
      "name":"vertical",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "2":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          },
          "forced_num_cols":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "2":{
            "type":"widget"
          },
          "...":{
            "type":"widget"
          },
          "forced_num_cols":{
            "type":"number|nil"
          }
        }
      },
      "description":"\n\n Each new widget is positioned left of the last widget on the same row\n up to `forced_num_cols`. Then the next row is filled, creating it if it doesn't exist.",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(forced_num_cols, ...)",
      "tags":[],
      "lineno":1037
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index",
        "2":"widget2",
        "map":{
          "index":" A widget or a widget index",
          "widget2":" The widget to replace the previous one with"
        }
      },
      "summary":"Set a widget at a specific index, replacing the current one.",
      "name":"set",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget2":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"widget"
          },
          "index":{
            "type":"number"
          },
          "widget2":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index, widget2)",
      "tags":{
        "emits":["widget::replaced"],
        "interface":["layout"],
        "emitstparam":["widget::replaced widget self The layout.","widget::replaced widget widget The inserted widget.","widget::replaced widget previous The previous widget.","widget::replaced number index The replaced index."]
      },
      "lineno":1067
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "2":"widget2",
        "3":"recursive",
        "map":{
          "widget2":" The widget to replace `widget` with",
          "widget":" The widget to replace",
          "recursive":" Recurse into all compatible layouts to\n   find the widget."
        }
      },
      "summary":"Replace the first instance of `widget` in the layout with `widget2`.",
      "name":"replace_widget",
      "modifiers":{
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "widget":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(widget, widget2[, recursive=false])",
      "tags":{
        "emits":["widget::replaced"],
        "interface":["layout"],
        "emitstparam":["widget::replaced widget self The layout.","widget::replaced widget widget index The inserted widget.","widget::replaced widget previous The previous widget.","widget::replaced number index The replaced index."]
      },
      "lineno":1083
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"index1",
        "2":"index2",
        "map":{
          "index2":" The second widget index",
          "index1":" The first widget index"
        }
      },
      "summary":"Swap 2 widgets in a layout.",
      "name":"swap",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index2":{
            "type":"number"
          },
          "index1":{
            "type":"number"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "index2":{
            "type":"number"
          },
          "index1":{
            "type":"number"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[],[]],
        "interface":[[]]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(index1, index2)",
      "tags":{
        "emits":["widget::swapped"],
        "interface":["layout"],
        "emitstparam":["widget::swapped widget self The layout.","widget::swapped widget widget1 The first widget.","widget::swapped widget widget2 The second widget.","widget::swapped number index1 The first index.","widget::swapped number index1 The second index."]
      },
      "lineno":1098
    },{
      "parameter":"field",
      "params":{
        "1":"widget1",
        "2":"widget2",
        "3":"recursive",
        "map":{
          "widget2":" The second widget",
          "recursive":" Recurse into all compatible layouts to\n   find the widget.",
          "widget1":" The first widget"
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget1":{
            "type":"widget"
          }
        },
        "emits":[[]],
        "param":{
          "1":{
            "type":"widget"
          },
          "2":{
            "type":"widget"
          },
          "3":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget2":{
            "type":"widget"
          },
          "recursive":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "widget1":{
            "type":"widget"
          }
        },
        "return":[{
            "type":"boolean"
          }],
        "emitstparam":[[],[],[],[],[]],
        "interface":[[]]
      },
      "description":"\n\n If `widget1` is present multiple time, only the first instance is swapped.\n\n Calls `set` internally, so the signal `widget::replaced` is emitted for both\n widgets as well.\n",
      "tags":{
        "see":[],
        "emits":["widget::swapped"],
        "interface":["layout"],
        "emitstparam":["widget::swapped widget self The layout.","widget::swapped widget widget1 The first widget.","widget::swapped widget widget2 The second widget.","widget::swapped number index1 The first index.","widget::swapped number index1 The second index."]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Swap 2 widgets in a layout.",
      "name":"swap_widgets",
      "type":"method",
      "args":"(widget1, widget2[, recursive=false])",
      "kind":"object methods ",
      "lineno":1121
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Reset the layout.",
      "name":"reset",
      "modifiers":{
        "emits":[[]],
        "field":[],
        "return":[],
        "emitstparam":[[]],
        "interface":[[]]
      },
      "description":" This removes all widgets from the layout.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":{
        "interface":["layout"],
        "emits":["widget::reset"],
        "emitstparam":["widget::reset widget self The layout."]
      },
      "lineno":1127
    }],
  "type":"layoutmod",
  "usage":["wibox.widget {\n    generic_widget( &#34first&#34  ),\n    generic_widget( &#34second&#34 ),\n    generic_widget( &#34third&#34  ),\n    generic_widget( &#34fourth&#34 ),\n    forced_num_cols = 2,\n    forced_num_rows = 2,\n    homogeneous     = true,\n    expand          = true,\n    layout = wibox.layout.grid\n}\n"],
  "file":"/home/cji/portless/awesome/build/lib/wibox/layout/grid.lua",
  "package":"",
  "tags":{
    "author":["getzze"],
    "copyright":"2017 getzze",
    "supermodule":["wibox.widget.base"]
  },
  "lineno":53
}