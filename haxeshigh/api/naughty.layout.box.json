{
  "inferred":true,
  "kind":"popups_and_bars",
  "mod_name":"naughty.layout.box",
  "summary":"A notification popup widget.",
  "sections":{
    "by_name":[]
  },
  "name":"naughty.layout.box",
  "modifiers":{
    "author":[[]],
    "supermodule":[[]],
    "copyright":[]
  },
  "description":"\n\n By default, the box is composed of many other widgets:\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_default.svg)\n\n",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_max_width",
        "map":{
          "notification_max_width":""
        }
      },
      "summary":"The maximum notification width.",
      "name":"beautiful.notification_max_width",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"500",
            "type":"number",
            "opt":"500"
          },
          "notification_max_width":{
            "optchain":"500",
            "type":"number",
            "opt":"500"
          }
        },
        "field":{
          "1":{
            "optchain":"500",
            "type":"number",
            "opt":"500"
          },
          "notification_max_width":{
            "optchain":"500",
            "type":"number",
            "opt":"500"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([notification_max_width=500])",
      "tags":[],
      "lineno":155
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification_position",
        "map":{
          "notification_position":""
        }
      },
      "summary":"The maximum notification position.",
      "name":"beautiful.notification_position",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"\"top_right\"",
            "type":"string",
            "opt":"\"top_right\""
          },
          "notification_position":{
            "optchain":"\"top_right\"",
            "type":"string",
            "opt":"\"top_right\""
          }
        },
        "field":{
          "1":{
            "optchain":"\"top_right\"",
            "type":"string",
            "opt":"\"top_right\""
          },
          "notification_position":{
            "optchain":"\"top_right\"",
            "type":"string",
            "opt":"\"top_right\""
          }
        }
      },
      "description":"\n\n Valid values are:\n\n * top_left\n * top_middle\n * top_right\n * bottom_left\n * bottom_middle\n * bottom_right\n",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([notification_position=\"top_right\"])",
      "tags":[],
      "lineno":169
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification",
        "map":{
          "notification":""
        }
      },
      "summary":"The widget notification object.",
      "name":"notification",
      "modifiers":{
        "param":{
          "1":{
            "type":"naughty.notification"
          },
          "notification":{
            "type":"naughty.notification"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"naughty.notification"
          },
          "notification":{
            "type":"naughty.notification"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(notification)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":175
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "map":{
          "widget":""
        }
      },
      "summary":"The widget template to construct the box content.",
      "name":"widget_template",
      "modifiers":{
        "usebeautiful":[[]],
        "return":[],
        "param":{
          "1":[],
          "widget":[]
        },
        "field":{
          "1":[],
          "widget":[]
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_default.svg)\n\n\n The default template is (less or more):\n\n    {\n        {\n            {\n                {\n                    {\n                        naughty.widget.icon,\n                        {\n                            naughty.widget.title,\n                            naughty.widget.message,\n                            spacing = 4,\n                            layout  = wibox.layout.fixed.vertical,\n                        },\n                        fill_space = true,\n                        spacing    = 4,\n                        layout     = wibox.layout.fixed.horizontal,\n                    },\n                    naughty.list.actions,\n                    spacing = 10,\n                    layout  = wibox.layout.fixed.vertical,\n                },\n                margins = beautiful.notification_margin,\n                widget  = wibox.container.margin,\n            },\n            id     = \"background_role\",\n            widget = naughty.container.background,\n        },\n        strategy = \"max\",\n        width    = width(beautiful.notification_max_width\n            or beautiful.xresources.apply_dpi(500)),\n        widget   = wibox.container.constraint,\n    }\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(widget)",
      "tags":{
        "usebeautiful":["beautiful.notification_max_width The maximum width for the\n  resulting widget."]
      },
      "lineno":221
    },{
      "inferred":true,
      "subparams":{
        "args":["args.widget_template","args.notification","args.position","args.border_width","args.border_color","args.ontop","args.cursor","args.visible","args.opacity","args.type","args.x","args.y","args.width","args.height","args.screen","args.widget","args.shape_bounding","args.shape_clip","args.shape_input","args.bg","args.bgimage","args.fg","args.shape","args.input_passthrough"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.visible":" Visibility.",
          "args.shape_bounding":" The wibox’s bounding shape as a (native) cairo surface.",
          "args.position":" The position. See `naughty.notification.position`.",
          "args.opacity":" The opacity, between 0 and 1.",
          "args.shape_input":" The wibox’s input shape as a (native) cairo surface.",
          "args.widget":" The widget that the wibox displays.",
          "args.fg":" The foreground (text) color.",
          "args.type":" The window type (desktop, normal, dock, …).",
          "args.input_passthrough":" If the inputs are\n  forward to the element below.",
          "args.shape":" The shape.",
          "args.screen":" The wibox screen.",
          "args.notification":" The notification object.",
          "args.bg":" The background.",
          "args.shape_clip":" The wibox’s clip shape as a (native) cairo surface.",
          "args.x":" The x coordinates.",
          "args.width":" The width.",
          "args.widget_template":" A widget definition template which will\n  be instantiated for each box.",
          "args.border_color":" Border color.",
          "args.bgimage":" The background image of the drawable.",
          "args.y":" The y coordinates.",
          "args.cursor":" The mouse cursor.",
          "args.height":" The height.",
          "args":"",
          "args.ontop":" On top of other windows.",
          "args.border_width":" Border width."
        }
      },
      "summary":"Create a notification popup box.",
      "name":"naughty.layout.box",
      "modifiers":{
        "usebeautiful":[[]],
        "return":[],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"naughty.notification"
          },
          "4":{
            "type":"string"
          },
          "5":{
            "type":"integer"
          },
          "6":{
            "type":"string"
          },
          "7":{
            "type":"boolean",
            "opt":"false"
          },
          "8":{
            "type":"string"
          },
          "9":{
            "type":"boolean"
          },
          "10":{
            "type":"number",
            "opt":"1"
          },
          "11":{
            "type":"string"
          },
          "12":{
            "type":"integer"
          },
          "13":{
            "type":"integer"
          },
          "14":{
            "type":"integer"
          },
          "15":{
            "type":"integer"
          },
          "16":{
            "type":"screen"
          },
          "17":{
            "type":"wibox.widget"
          },
          "18":[],
          "19":[],
          "20":[],
          "21":{
            "type":"color"
          },
          "22":{
            "type":"surface"
          },
          "23":{
            "type":"color"
          },
          "24":{
            "type":"gears.shape"
          },
          "25":{
            "type":"boolean",
            "opt":"false"
          },
          "args.visible":{
            "type":"boolean"
          },
          "args.shape_bounding":[],
          "args.position":{
            "type":"string"
          },
          "args.opacity":{
            "type":"number",
            "opt":"1"
          },
          "args.shape_input":[],
          "args.widget":{
            "type":"wibox.widget"
          },
          "args.fg":{
            "type":"color"
          },
          "args.type":{
            "type":"string"
          },
          "args.input_passthrough":{
            "type":"boolean",
            "opt":"false"
          },
          "args.shape":{
            "type":"gears.shape"
          },
          "args.screen":{
            "type":"screen"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args.bg":{
            "type":"color"
          },
          "args.shape_clip":[],
          "args.x":{
            "type":"integer"
          },
          "args.width":{
            "type":"integer"
          },
          "args.widget_template":{
            "type":"table"
          },
          "args.border_color":{
            "type":"string"
          },
          "args.bgimage":{
            "type":"surface"
          },
          "args.y":{
            "type":"integer"
          },
          "args.cursor":{
            "type":"string"
          },
          "args.height":{
            "type":"integer"
          },
          "args":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "args.ontop":{
            "type":"boolean",
            "opt":"false"
          },
          "args.border_width":{
            "type":"integer"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"naughty.notification"
          },
          "4":{
            "type":"string"
          },
          "5":{
            "type":"integer"
          },
          "6":{
            "type":"string"
          },
          "7":{
            "type":"boolean",
            "opt":"false"
          },
          "8":{
            "type":"string"
          },
          "9":{
            "type":"boolean"
          },
          "10":{
            "type":"number",
            "opt":"1"
          },
          "11":{
            "type":"string"
          },
          "12":{
            "type":"integer"
          },
          "13":{
            "type":"integer"
          },
          "14":{
            "type":"integer"
          },
          "15":{
            "type":"integer"
          },
          "16":{
            "type":"screen"
          },
          "17":{
            "type":"wibox.widget"
          },
          "18":[],
          "19":[],
          "20":[],
          "21":{
            "type":"color"
          },
          "22":{
            "type":"surface"
          },
          "23":{
            "type":"color"
          },
          "24":{
            "type":"gears.shape"
          },
          "25":{
            "type":"boolean",
            "opt":"false"
          },
          "args.visible":{
            "type":"boolean"
          },
          "args.shape_bounding":[],
          "args.position":{
            "type":"string"
          },
          "args.opacity":{
            "type":"number",
            "opt":"1"
          },
          "args.shape_input":[],
          "args.widget":{
            "type":"wibox.widget"
          },
          "args.fg":{
            "type":"color"
          },
          "args.type":{
            "type":"string"
          },
          "args.input_passthrough":{
            "type":"boolean",
            "opt":"false"
          },
          "args.shape":{
            "type":"gears.shape"
          },
          "args.screen":{
            "type":"screen"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args.bg":{
            "type":"color"
          },
          "args.shape_clip":[],
          "args.x":{
            "type":"integer"
          },
          "args.width":{
            "type":"integer"
          },
          "args.widget_template":{
            "type":"table"
          },
          "args.border_color":{
            "type":"string"
          },
          "args.bgimage":{
            "type":"surface"
          },
          "args.y":{
            "type":"integer"
          },
          "args.cursor":{
            "type":"string"
          },
          "args.height":{
            "type":"integer"
          },
          "args":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "args.ontop":{
            "type":"boolean",
            "opt":"false"
          },
          "args.border_width":{
            "type":"integer"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"([args=nil])",
      "tags":{
        "usebeautiful":["beautiful.notification_position If `position` is not defined\n in the notification object (or in this constructor)."]
      },
      "lineno":361
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"Border width.",
      "name":"border_width",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":433
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"Border color.",
      "name":"border_color",
      "modifiers":{
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "string":[]
        },
        "propemits":[[]]
      },
      "description":"\n\n Please note that this property only support string based 24 bit or 32 bit\n colors:\n\n    Red Blue\n     _|  _|\n    #FF00FF\n       T‾\n     Green\n\n\n    Red Blue\n     _|  _|\n    #FF00FF00\n       T‾  ‾T\n    Green   Alpha\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":456
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"On top of other windows.",
      "name":"ontop",
      "modifiers":{
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":463
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The mouse cursor.",
      "name":"cursor",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":471
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Visibility.",
      "name":"visible",
      "modifiers":{
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":478
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" (between 0 and 1)"
        }
      },
      "summary":"The opacity of the wibox, between 0 and 1.",
      "name":"opacity",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(opacity)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":485
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The window type (desktop, normal, dock, ...).",
      "name":"type",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":493
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"The x coordinates.",
      "name":"x",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":500
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"The y coordinates.",
      "name":"y",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":507
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":""
        }
      },
      "summary":"The width of the wibox.",
      "name":"width",
      "modifiers":{
        "field":{
          "1":[],
          "width":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "width":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":514
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":""
        }
      },
      "summary":"The height of the wibox.",
      "name":"height",
      "modifiers":{
        "field":{
          "1":[],
          "height":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "height":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":521
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":""
        }
      },
      "summary":"The wibox screen.",
      "name":"screen",
      "modifiers":{
        "field":{
          "1":[],
          "screen":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "screen":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(screen)",
      "tags":{
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "lineno":528
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"drawable",
        "map":{
          "drawable":""
        }
      },
      "summary":"The wibox's `drawable`.",
      "name":"drawable",
      "modifiers":{
        "field":{
          "1":{
            "type":"drawable"
          },
          "drawable":{
            "type":"drawable"
          }
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"drawable"
          },
          "drawable":{
            "type":"drawable"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(drawable)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":535
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "map":{
          "widget":""
        }
      },
      "summary":"The widget that the `wibox` displays.",
      "name":"widget",
      "modifiers":{
        "field":{
          "1":[],
          "widget":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "widget":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(widget)",
      "tags":{
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "lineno":541
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The X window id.",
      "name":"window",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":549
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n If you want to set a shape, let say some rounded corners, use\n the `shape` property rather than this. If you want something\n very complex, for example, holes, then use this.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's bounding shape as a (native) cairo surface.",
      "name":"shape_bounding",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":561
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n The clip shape is the shape of the window *content* rather\n than the outer window shape.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's clip shape as a (native) cairo surface.",
      "name":"shape_clip",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":572
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n The input shape allows to disable clicks and mouse events\n on part of the window. This is how `input_passthrough` is\n implemented.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's input shape as a (native) cairo surface.",
      "name":"shape_input",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":584
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The wibar's shape.",
      "name":"shape",
      "type":"property",
      "args":"(shape)",
      "kind":"object properties",
      "lineno":592
    },{
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n\n This replace the `shape_input` mask with an empty area. All mouse and\n keyboard events are sent to the object (such as a client) positioned below\n this wibox. When used alongside compositing, it allows, for example, to have\n a subtle transparent wibox on top a fullscreen client to display important\n data such as a low battery warning.\n",
      "tags":{
        "propemits":["true false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Forward the inputs to the client below the wibox.",
      "name":"input_passthrough",
      "type":"property",
      "args":"([boolean=false])",
      "kind":"object properties",
      "lineno":606
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"buttons_table",
        "map":{
          "buttons_table":" A table of buttons objects, or nothing."
        }
      },
      "summary":"Get or set mouse buttons bindings to a wibox.",
      "name":"buttons",
      "modifiers":{
        "field":{
          "1":[],
          "buttons_table":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "buttons_table":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(buttons_table)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":613
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"A",
        "map":{
          "A":" table with coordinates to modify."
        }
      },
      "summary":"Get or set wibox geometry.",
      "name":"geometry",
      "modifiers":{
        "field":{
          "1":[],
          "A":[]
        },
        "emits":[[]],
        "return":[[]],
        "baseclass":[[]],
        "param":{
          "1":[],
          "A":[]
        },
        "emitstparam":[[]]
      },
      "description":" That's the same as accessing or setting the x,\n y, width or height properties of a wibox.\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(A)",
      "tags":{
        "emits":["property::geometry When the geometry change."],
        "baseclass":["wibox"],
        "emitstparam":["property::geometry table geo The geometry table."]
      },
      "lineno":623
    },{
      "parameter":"field",
      "params":{
        "1":"strut",
        "map":{
          "strut":" A table with new strut, or nothing"
        }
      },
      "modifiers":{
        "see":[[]],
        "emits":[[]],
        "field":{
          "1":[],
          "strut":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "strut":[]
        },
        "return":[[]]
      },
      "description":"\n\n Struts are the area which should be reserved on each side of\n the screen for this wibox. This is used to make bars and\n docked displays. Note that `awful.wibar` implements all the\n required boilerplate code to make bar. Only use this if you\n want special type of bars (like bars not fully attached to\n the side of the screen).\n",
      "tags":{
        "see":[],
        "emits":["property::struts"],
        "baseclass":["wibox"]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Get or set wibox struts.",
      "name":"struts",
      "type":"method",
      "args":"(strut)",
      "kind":"object methods ",
      "lineno":639
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "color":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "color":[]
        },
        "return":[]
      },
      "description":"\n\n The background color can be transparent. If there is a\n compositing manager such as compton, then it will be\n real transparency and may include blur (provided by the\n compositor). When there is no compositor, it will take\n a picture of the wallpaper and blend it.\n",
      "tags":{
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default background color.",
      "name":"beautiful.bg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":652
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "color":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "color":[]
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default foreground (text) color.",
      "name":"beautiful.fg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":658
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox"]
      },
      "lineno":664
    },{
      "parameter":"field",
      "params":{
        "1":"The",
        "map":{
          "The":" background to use. This must either be a cairo pattern object,\n   nil or a string that gears.color() understands."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":{
          "1":{
            "type":"c"
          },
          "The":{
            "type":"c"
          }
        },
        "usebeautiful":[[]],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"c"
          },
          "The":{
            "type":"c"
          }
        }
      },
      "description":"\n\n The background color can be transparent. If there is a\n compositing manager such as compton, then it will be\n real transparency and may include blur (provided by the\n compositor). When there is no compositor, it will take\n a picture of the wallpaper and blend it.\n",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.bg_normal The default (fallback) bg color."],
        "baseclass":["wibox"],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The background of the wibox.",
      "name":"bg",
      "type":"property",
      "args":"(The)",
      "kind":"object properties",
      "lineno":680
    },{
      "parameter":"field",
      "params":{
        "1":"image",
        "map":{
          "image":" A background image or a function."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"gears.suface|string|function"
          },
          "image":{
            "type":"gears.suface|string|function"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"gears.suface|string|function"
          },
          "image":{
            "type":"gears.suface|string|function"
          }
        }
      },
      "description":"\n\n If `image` is a function, it will be called with `(context, cr, width, height)`\n as arguments. Any other arguments passed to this method will be appended.\n",
      "tags":{
        "propemits":["true false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The background image of the drawable.",
      "name":"bgimage",
      "type":"property",
      "args":"(image)",
      "kind":"object properties",
      "lineno":691
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"color",
        "map":{
          "c":" The foreground to use. This must either be a cairo pattern object,\n   nil or a string that gears.color() understands.",
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":{
          "1":{
            "type":"color"
          },
          "2":[],
          "c":{
            "type":"color"
          },
          "color":[]
        },
        "usebeautiful":[[]],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"color"
          },
          "2":[],
          "c":{
            "type":"color"
          },
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.fg_normal The default (fallback) fg color."],
        "baseclass":["wibox"],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The foreground (text) of the wibox.",
      "name":"fg",
      "type":"property",
      "args":"(c, color)",
      "kind":"object properties",
      "lineno":701
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "map":{
          "y":" Y coordinate of the point",
          "x":" X coordinate of the point"
        }
      },
      "summary":"Find a widget by a point.",
      "name":"find_widgets",
      "modifiers":{
        "baseclass":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        }
      },
      "description":"\n The wibox must have drawn itself at least once for this to work.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(x, y)",
      "tags":{
        "baseclass":["wibox"]
      },
      "lineno":711
    }],
  "type":"popupmod",
  "file":"/home/cji/portless/awesome/build/lib/naughty/layout/box.lua",
  "package":"",
  "tags":{
    "author":["Emmanuel Lepage Vallee &lt;elv1313@gmail.com&gt;"],
    "copyright":"2017 Emmanuel Lepage Vallee",
    "supermodule":["awful.popup"]
  },
  "lineno":17
}