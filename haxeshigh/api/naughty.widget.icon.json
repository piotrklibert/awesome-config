{
  "modifiers":{
    "see":[[]],
    "author":[[]],
    "usage":[[]],
    "copyright":[]
  },
  "description":"\n\n This widget is a specialized `wibox.widget.imagebox` with the following extra\n features:\n\n * Honor the `beautiful` notification variables.\n * Restrict the size avoid huge notifications\n * Provides some strategies to handle small icons\n * React to the `naughty.notification` object icon changes.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_icon_simple.svg)\n",
  "type":"widgetmod",
  "mod_name":"naughty.widget.icon",
  "tags":{
    "author":["Emmanuel Lepage Vallee &lt;elv1313@gmail.com&gt;"],
    "copyright":"2017 Emmanuel Lepage Vallee",
    "see":[]
  },
  "inferred":true,
  "kind":"widgets",
  "summary":"A notification square icon.",
  "sections":{
    "by_name":[]
  },
  "name":"naughty.widget.icon",
  "see":[{
      "label":"wibox.widget.imagebox",
      "mod":{
        "inferred":true,
        "kind":"widgets",
        "mod_name":"wibox.widget.imagebox",
        "summary":"A widget to display an image.",
        "sections":{
          "by_name":[]
        },
        "name":"wibox.widget.imagebox",
        "modifiers":{
          "author":[[]],
          "supermodule":[[]],
          "copyright":[]
        },
        "description":"\n\n The `wibox.widget.imagebox` is part of the Awesome WM's widget system\n (see @{03-declarative-layout.md}).\n\n This widget displays an image. The image can be a file,\n a cairo image surface, or an rsvg handle object (see the\n [image property](#image)).\n\n Examples using a `wibox.widget.imagebox`:\n ---\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_defaults_imagebox.svg)\n\n \n     local my_imagebox = wibox.widget.imagebox(beautiful.awesome_icon, false)\n\n Alternatively, you can declare the `imagebox` widget using the\n declarative pattern (both variants are strictly equivalent):\n\n \n\n\n \n     local my_imagebox = wibox.widget {\n         image  = beautiful.awesome_icon,\n         resize = false,\n         widget = wibox.widget.imagebox\n     }\n",
        "items":[{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"image",
              "map":{
                "image":" The image to render."
              }
            },
            "summary":"The image rendered by the `imagebox`.",
            "name":"image",
            "modifiers":{
              "param":{
                "1":{
                  "type":"image"
                },
                "image":{
                  "type":"image"
                }
              },
              "return":[],
              "propemits":[[]],
              "field":{
                "1":{
                  "type":"image"
                },
                "image":{
                  "type":"image"
                }
              }
            },
            "description":"\n\n It can can be any of the following:\n\n * A `string`: Interpreted as a path to an image file\n * A cairo image surface: Directly used as-is\n * A librsvg handle object: Directly used as-is\n * `nil`: Unset the image.\n",
            "type":"property",
            "section":"property",
            "kind":"object properties",
            "args":"(image)",
            "tags":{
              "propemits":["false false"]
            },
            "lineno":323
          },{
            "parameter":"field",
            "params":{
              "1":"image",
              "map":{
                "image":" The image to render."
              }
            },
            "modifiers":{
              "see":[[]],
              "usage":[[],[]],
              "field":{
                "1":{
                  "type":"image"
                },
                "image":{
                  "type":"image"
                }
              },
              "return":[{
                  "type":"boolean"
                }],
              "param":{
                "1":{
                  "type":"image"
                },
                "image":{
                  "type":"image"
                }
              },
              "hidden":[[]]
            },
            "description":"\n\n The image can be a file, a cairo image surface, or an rsvg handle object\n (see the [image property](#image)).",
            "tags":{
              "see":[],
              "hidden":[""]
            },
            "section":"method",
            "inferred":true,
            "subparams":[],
            "summary":"Set the `imagebox` image.",
            "name":"set_image",
            "kind":"object methods ",
            "usage":["my_imagebox:set_image(beautiful.awesome_icon)\n","my_imagebox:set_image('/usr/share/icons/theme/my_icon.png')\n"],
            "args":"(image)",
            "type":"method",
            "lineno":334
          },{
            "parameter":"field",
            "params":{
              "1":"clip_shape",
              "map":{
                "clip_shape":" A `gears.shape` compatible shape function."
              }
            },
            "modifiers":{
              "see":[[]],
              "usage":[[]],
              "field":{
                "1":{
                  "type":"function|gears.shape"
                },
                "clip_shape":{
                  "type":"function|gears.shape"
                }
              },
              "return":[],
              "param":{
                "1":{
                  "type":"function|gears.shape"
                },
                "clip_shape":{
                  "type":"function|gears.shape"
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n A clip shape defines an area and dimension to which the content should be\n trimmed.\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_clip_shape.svg)\n",
            "tags":{
              "propemits":["true false"],
              "see":[]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set a clip shape for this imagebox.",
            "name":"clip_shape",
            "kind":"object properties",
            "usage":["for _, resize in ipairs {true, false} do\n    for idx, shape in ipairs {gears.shape.circle, gears.shape.squircle, gears.shape.rounded_rect} do\n        local w = wibox.widget {\n            {\n                {\n                    image         = beautiful.awesome_icon,\n                    forced_height = 32,\n                    forced_width  = 32,\n                    clip_shape    = shape,\n                    resize        = resize,\n                    widget        = wibox.widget.imagebox\n                },\n                widget = wibox.container.place\n            },\n            widget = wibox.container.background\n        }\n    end\nend\n"],
            "args":"(clip_shape)",
            "type":"property",
            "lineno":412
          },{
            "parameter":"field",
            "params":{
              "1":"clip_shape",
              "map":{
                "clip_shape":" A `gears_shape` compatible shape function."
              }
            },
            "modifiers":{
              "see":[[],[]],
              "field":{
                "1":{
                  "type":"function|gears.shape"
                },
                "clip_shape":{
                  "type":"function|gears.shape"
                }
              },
              "hidden":[[]],
              "param":{
                "1":{
                  "type":"function|gears.shape"
                },
                "clip_shape":{
                  "type":"function|gears.shape"
                }
              },
              "return":[]
            },
            "description":"\n\n A clip shape defines an area and dimensions to which the content should be\n trimmed.\n\n Additional parameters will be passed to the clip shape function.\n",
            "tags":{
              "see":[],
              "hidden":[""]
            },
            "section":"method",
            "inferred":true,
            "subparams":[],
            "summary":"Set a clip shape for this imagebox.",
            "name":"set_clip_shape",
            "type":"method",
            "args":"(clip_shape)",
            "kind":"object methods ",
            "lineno":424
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"resize",
              "map":{
                "resize":""
              }
            },
            "summary":"Should the image be resized to fit into the available space?",
            "name":"resize",
            "modifiers":{
              "propemits":[[]],
              "return":[],
              "param":{
                "1":{
                  "type":"boolean"
                },
                "resize":{
                  "type":"boolean"
                }
              },
              "field":{
                "1":{
                  "type":"boolean"
                },
                "resize":{
                  "type":"boolean"
                }
              }
            },
            "description":"\n\n Note that `upscale` and `downscale` can affect the value of `resize`.\n If conflicting values are passed to the constructor, then the result\n is undefined.\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_resize.svg)\n",
            "type":"property",
            "section":"property",
            "kind":"object properties",
            "args":"(resize)",
            "tags":{
              "propemits":["true false"]
            },
            "lineno":445
          },{
            "parameter":"field",
            "params":{
              "1":"upscale",
              "map":{
                "upscale":""
              }
            },
            "modifiers":{
              "see":[[],[]],
              "return":[],
              "param":{
                "1":{
                  "type":"boolean"
                },
                "upscale":{
                  "type":"boolean"
                }
              },
              "field":{
                "1":{
                  "type":"boolean"
                },
                "upscale":{
                  "type":"boolean"
                }
              }
            },
            "description":"\n\n Note that `upscale` and `downscale` can affect the value of `resize`.\n If conflicting values are passed to the constructor, then the result\n is undefined.\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_upscale.svg)\n",
            "tags":{
              "see":[]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Allow the image to be upscaled (made bigger).",
            "name":"upscale",
            "type":"property",
            "args":"(upscale)",
            "kind":"object properties",
            "lineno":460
          },{
            "parameter":"field",
            "params":{
              "1":"downscale",
              "map":{
                "downscale":""
              }
            },
            "modifiers":{
              "see":[[],[]],
              "return":[],
              "param":{
                "1":{
                  "type":"boolean"
                },
                "downscale":{
                  "type":"boolean"
                }
              },
              "field":{
                "1":{
                  "type":"boolean"
                },
                "downscale":{
                  "type":"boolean"
                }
              }
            },
            "description":"\n\n Note that `upscale` and `downscale` can affect the value of `resize`.\n If conflicting values are passed to the constructor, then the result\n is undefined.\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_downscale.svg)\n",
            "tags":{
              "see":[]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Allow the image to be downscaled (made smaller).",
            "name":"downscale",
            "type":"property",
            "args":"(downscale)",
            "kind":"object properties",
            "lineno":475
          },{
            "parameter":"field",
            "params":{
              "1":"stylesheet",
              "map":{
                "stylesheet":""
              }
            },
            "modifiers":{
              "field":{
                "1":{
                  "type":"string"
                },
                "stylesheet":{
                  "type":"string"
                }
              },
              "usage":[[]],
              "return":[],
              "param":{
                "1":{
                  "type":"string"
                },
                "stylesheet":{
                  "type":"string"
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n If the image is an SVG (vector graphics), this property allows to set\n a CSS stylesheet. It can be used to set colors and much more.\n\n Note that this property is a string, not a path. If the stylesheet is\n stored on disk, read the content first.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_stylesheet.svg)\n",
            "tags":{
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set the SVG CSS stylesheet.",
            "name":"stylesheet",
            "kind":"object properties",
            "usage":["local image = '<?xml version=&#341.0&#34 encoding=&#34UTF-8&#34 standalone=&#34no&#34?>'..\n    '<svg width=&#34190&#34 height=&#3460&#34>'..\n        '<rect x=&#3410&#34  y=&#3410&#34 width=&#3450&#34 height=&#3450&#34 />'..\n        '<rect x=&#3470&#34  y=&#3410&#34 width=&#3450&#34 height=&#3450&#34 class=&#34my_class&#34 />'..\n        '<rect x=&#34130&#34 y=&#3410&#34 width=&#3450&#34 height=&#3450&#34 id=&#34my_id&#34 />'..\n    '</svg>'\n \nlocal stylesheet = &#34&#34 ..\n     &#34rect { fill: #ffff00&#59 } &#34..\n     &#34.my_class { fill: #00ff00&#59 } &#34..\n     &#34#my_id { fill: #0000ff&#59 }&#34\n \nlocal w = wibox.widget {\n    stylesheet = stylesheet,\n    image      = image,\n    widget     = wibox.widget.imagebox\n}\n"],
            "args":"(stylesheet)",
            "type":"property",
            "lineno":510
          },{
            "parameter":"field",
            "params":{
              "1":"dpi",
              "map":{
                "dpi":""
              }
            },
            "modifiers":{
              "see":[[]],
              "usage":[[]],
              "field":{
                "1":{
                  "type":"number|table"
                },
                "dpi":{
                  "type":"number|table"
                }
              },
              "return":[],
              "param":{
                "1":{
                  "type":"number|table"
                },
                "dpi":{
                  "type":"number|table"
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n Force a specific DPI when rendering the `.svg`. For other file formats,\n this does nothing.\n\n It can either be a number of a table containing the `x` and `y` keys.\n\n Please note that DPI and `resize` can \"fight\" each other and end up\n making the image smaller instead of bigger.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_dpi.svg)\n",
            "tags":{
              "propemits":["true false"],
              "see":[]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set the SVG DPI (dot per inch).",
            "name":"dpi",
            "kind":"object properties",
            "usage":["local image = '<?xml version=&#341.0&#34 encoding=&#34UTF-8&#34 standalone=&#34no&#34?>'..\n    '<svg width=&#342in&#34 height=&#341in&#34>'..\n        '<rect height=&#340.1in&#34 width=&#340.1in&#34 style=&#34fill:red&#59&#34 />'..\n        '<text x=&#3410&#34 y=&#3432&#34 width=&#34150&#34 style=&#34font-size: 0.1in&#59&#34>Hello world!</text>'..\n    '</svg>'\n\n for _, dpi in ipairs {100, 200, 300} do\n     local w = wibox.widget {\n        image         = image,\n        dpi           = dpi,\n        resize        = false,\n        forced_height = 70,\n        forced_width  = 150,\n        widget        = wibox.widget.imagebox\n    }\n end\n"],
            "args":"(dpi)",
            "type":"property",
            "lineno":547
          },{
            "parameter":"field",
            "params":{
              "1":"auto_dpi",
              "map":{
                "auto_dpi":""
              }
            },
            "modifiers":{
              "see":[[]],
              "field":{
                "1":{
                  "optchain":"false",
                  "type":"boolean",
                  "opt":"false"
                },
                "auto_dpi":{
                  "optchain":"false",
                  "type":"boolean",
                  "opt":"false"
                }
              },
              "return":[],
              "propemits":[[]],
              "param":{
                "1":{
                  "optchain":"false",
                  "type":"boolean",
                  "opt":"false"
                },
                "auto_dpi":{
                  "optchain":"false",
                  "type":"boolean",
                  "opt":"false"
                }
              }
            },
            "description":"\n\n By default, the SVG are interpreted as-is. When this property is set,\n the screen DPI will be passed to the SVG renderer. Depending on which\n tool was used to create the `.svg`, this may do nothing at all. However,\n for example, if the `.svg` uses `<text>` elements and doesn't have an\n hardcoded stylesheet, the result will differ.\n",
            "tags":{
              "see":[],
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Use the object DPI when rendering the SVG.",
            "name":"auto_dpi",
            "type":"property",
            "args":"([auto_dpi=false])",
            "kind":"object properties",
            "lineno":560
          },{
            "parameter":"field",
            "params":{
              "1":"horizontal_fit_policy",
              "map":{
                "horizontal_fit_policy":""
              }
            },
            "modifiers":{
              "see":[[],[]],
              "field":{
                "1":{
                  "optchain":"\"auto\"",
                  "type":"string",
                  "opt":"\"auto\""
                },
                "horizontal_fit_policy":{
                  "optchain":"\"auto\"",
                  "type":"string",
                  "opt":"\"auto\""
                }
              },
              "return":[],
              "propemits":[[]],
              "param":{
                "1":{
                  "optchain":"\"auto\"",
                  "type":"string",
                  "opt":"\"auto\""
                },
                "horizontal_fit_policy":{
                  "optchain":"\"auto\"",
                  "type":"string",
                  "opt":"\"auto\""
                }
              }
            },
            "description":"\n\n Valid values are:\n\n  * `\"auto\"`: Honor the `resize` variable and preserve the aspect ratio.\n   This is the default behaviour.\n  * `\"none\"`: Do not resize at all.\n  * `\"fit\"`: Resize to the widget width.\n\n Here is the result for a 22x32 image:\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_horizontal_fit_policy.svg)\n\n",
            "tags":{
              "see":[],
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set the horizontal fit policy.",
            "name":"horizontal_fit_policy",
            "type":"property",
            "args":"([horizontal_fit_policy=\"auto\"])",
            "kind":"object properties",
            "lineno":624
          },{
            "parameter":"field",
            "params":{
              "1":"horizontal_fit_policy",
              "map":{
                "horizontal_fit_policy":""
              }
            },
            "modifiers":{
              "see":[[],[]],
              "field":{
                "1":{
                  "optchain":"\"auto\"",
                  "type":"string",
                  "opt":"\"auto\""
                },
                "horizontal_fit_policy":{
                  "optchain":"\"auto\"",
                  "type":"string",
                  "opt":"\"auto\""
                }
              },
              "return":[],
              "propemits":[[]],
              "param":{
                "1":{
                  "optchain":"\"auto\"",
                  "type":"string",
                  "opt":"\"auto\""
                },
                "horizontal_fit_policy":{
                  "optchain":"\"auto\"",
                  "type":"string",
                  "opt":"\"auto\""
                }
              }
            },
            "description":"\n\n Valid values are:\n\n  * `\"auto\"`: Honor the `resize` varible and preserve the aspect ratio.\n   This is the default behaviour.\n  * `\"none\"`: Do not resize at all.\n  * `\"fit\"`: Resize to the widget height.\n\n Here is the result for a 32x22 image:\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_vertical_fit_policy.svg)\n\n",
            "tags":{
              "see":[],
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set the vertical fit policy.",
            "name":"vertical_fit_policy",
            "type":"property",
            "args":"([horizontal_fit_policy=\"auto\"])",
            "kind":"object properties",
            "lineno":647
          },{
            "parameter":"field",
            "params":{
              "1":"valign",
              "map":{
                "valign":""
              }
            },
            "modifiers":{
              "see":[[],[]],
              "usage":[[]],
              "field":{
                "1":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                },
                "valign":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                }
              },
              "return":[],
              "param":{
                "1":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                },
                "valign":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n Possible values are:\n\n * `\"top\"`\n * `\"center\"` (default)\n * `\"bottom\"`\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_valign.svg)\n",
            "tags":{
              "propemits":["true false"],
              "see":[]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"The vertical alignment.",
            "name":"valign",
            "kind":"object properties",
            "usage":["for _, resize in ipairs {true, false} do\n    for _, valign in ipairs {&#34top&#34, &#34center&#34, &#34bottom&#34} do\n        local w = wibox.widget {\n            {\n                {\n                    image         = beautiful.awesome_icon,\n                    forced_height = 32,\n                    forced_width  = 32,\n                    valign        = valign,\n                    resize        = resize,\n                    widget        = wibox.widget.imagebox\n                },\n                bg     = beautiful.bg_normal,\n                widget = wibox.container.background\n            },\n            widget = wibox.container.place\n        }\n    end\nend\n"],
            "args":"([valign=\"center\"])",
            "type":"property",
            "lineno":686
          },{
            "parameter":"field",
            "params":{
              "1":"halign",
              "map":{
                "halign":""
              }
            },
            "modifiers":{
              "see":[[],[]],
              "usage":[[]],
              "field":{
                "1":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                },
                "halign":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                }
              },
              "return":[],
              "param":{
                "1":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                },
                "halign":{
                  "optchain":"\"center\"",
                  "type":"string",
                  "opt":"\"center\""
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n Possible values are:\n\n * `\"left\"`\n * `\"center\"` (default)\n * `\"right\"`\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_halign.svg)\n",
            "tags":{
              "propemits":["true false"],
              "see":[]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"The horizontal alignment.",
            "name":"halign",
            "kind":"object properties",
            "usage":["for _, resize in ipairs {true, false} do\n    for _, halign in ipairs {&#34left&#34, &#34center&#34, &#34right&#34} do\n        local w = wibox.widget {\n            {\n                {\n                    image         = beautiful.awesome_icon,\n                    forced_height = 32,\n                    forced_width  = 32,\n                    halign        = halign,\n                    resize        = resize,\n                    widget        = wibox.widget.imagebox\n                },\n                bg     = beautiful.bg_normal,\n                widget = wibox.container.background\n            },\n            widget = wibox.container.place\n        }\n    end\nend\n"],
            "args":"([halign=\"center\"])",
            "type":"property",
            "lineno":725
          },{
            "parameter":"field",
            "params":{
              "1":"max_scaling_factor",
              "map":{
                "max_scaling_factor":""
              }
            },
            "modifiers":{
              "see":[[],[],[]],
              "field":{
                "1":{
                  "type":"number"
                },
                "max_scaling_factor":{
                  "type":"number"
                }
              },
              "return":[],
              "propemits":[[]],
              "param":{
                "1":{
                  "type":"number"
                },
                "max_scaling_factor":{
                  "type":"number"
                }
              }
            },
            "description":"\n\n If an image is scaled too much, it gets very blurry. This\n property allows to limit the scaling.\n Use the properties `valign` and `halign` to control how the image will be\n aligned.\n\n In the example below, the original size is 22x22\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_max_scaling_factor.svg)\n\n",
            "tags":{
              "see":[],
              "propemits":["true false"]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"The maximum scaling factor.",
            "name":"max_scaling_factor",
            "type":"property",
            "args":"(max_scaling_factor)",
            "kind":"object properties",
            "lineno":746
          },{
            "parameter":"field",
            "params":{
              "1":"scaling_quality",
              "map":{
                "scaling_quality":" Either `\"fast\"`, `\"good\"`, `\"best\"`,\n   `\"nearest\"` or `\"bilinear\"`."
              }
            },
            "modifiers":{
              "see":[[],[],[],[]],
              "usage":[[]],
              "field":{
                "1":{
                  "type":"string"
                },
                "scaling_quality":{
                  "type":"string"
                }
              },
              "return":[],
              "param":{
                "1":{
                  "type":"string"
                },
                "scaling_quality":{
                  "type":"string"
                }
              },
              "propemits":[[]]
            },
            "description":"\n\n Depending on how the image is used, what is the \"correct\" way to\n scale can change. For example, upscaling a pixel art image should\n not make it blurry. However, scaling up a photo should not make it\n blocky.\n\n<table class='widget_list' border=1>\n <tr style='font-weight: bold;'>\n  <th align='center'>Value</th>\n  <th align='center'>Description</th>\n </tr>\n <tr><td>fast</td><td>A high-performance filter</td></tr>\n <tr><td>good</td><td>A reasonable-performance filter</td></tr>\n <tr><td>best</td><td>The highest-quality available</td></tr>\n <tr><td>nearest</td><td>Nearest-neighbor filtering (blocky)</td></tr>\n <tr><td>bilinear</td><td>Linear interpolation in two dimensions</td></tr>\n</table>\n\n The image used in the example below has a resolution of 32x22 and is\n intentionally blocky to highlight the difference.\n It is zoomed by a factor of 3.\n\n \n\n![Usage example](../images/AUTOGEN_wibox_widget_imagebox_scaling_quality.svg)\n",
            "tags":{
              "propemits":["true false"],
              "see":[]
            },
            "section":"property",
            "inferred":true,
            "subparams":[],
            "summary":"Set the scaling aligorithm.",
            "name":"scaling_quality",
            "kind":"object properties",
            "usage":["for _, quality in ipairs {&#34fast&#34, &#34good&#34, &#34best&#34, &#34nearest&#34, &#34bilinear&#34} do\n   local w = wibox.widget {\n       {\n           {\n               image           = img,\n               forced_height   = 64,\n               forced_width    = 96,\n               scaling_quality = quality,\n               widget          = wibox.widget.imagebox\n           },\n           widget = wibox.container.place\n       },\n       widget = wibox.container.background\n   }\nend\n"],
            "args":"(scaling_quality)",
            "type":"property",
            "lineno":799
          },{
            "inferred":true,
            "subparams":[],
            "parameter":"field",
            "params":{
              "1":"image",
              "2":"resize_allowed",
              "3":"clip_shape",
              "map":{
                "resize_allowed":" If `false`, the image will be\n   clipped, else it will be resized to fit into the available space.",
                "clip_shape":" A `gears.shape` compatible function.",
                "image":" The image to display (may be `nil`)."
              }
            },
            "summary":"Returns a new `wibox.widget.imagebox` instance.",
            "name":"wibox.widget.imagebox",
            "modifiers":{
              "return":[{
                  "type":"wibox.widget.imagebox"
                }],
              "param":{
                "1":{
                  "optchain":true,
                  "type":"image",
                  "opt":true
                },
                "2":{
                  "optchain":true,
                  "type":"boolean",
                  "opt":true
                },
                "3":{
                  "optchain":true,
                  "type":"function",
                  "opt":true
                },
                "resize_allowed":{
                  "optchain":true,
                  "type":"boolean",
                  "opt":true
                },
                "clip_shape":{
                  "optchain":true,
                  "type":"function",
                  "opt":true
                },
                "image":{
                  "optchain":true,
                  "type":"image",
                  "opt":true
                }
              },
              "field":{
                "1":{
                  "optchain":true,
                  "type":"image",
                  "opt":true
                },
                "2":{
                  "optchain":true,
                  "type":"boolean",
                  "opt":true
                },
                "3":{
                  "optchain":true,
                  "type":"function",
                  "opt":true
                },
                "resize_allowed":{
                  "optchain":true,
                  "type":"boolean",
                  "opt":true
                },
                "clip_shape":{
                  "optchain":true,
                  "type":"function",
                  "opt":true
                },
                "image":{
                  "optchain":true,
                  "type":"image",
                  "opt":true
                }
              }
            },
            "description":"\n\n This is the constructor of `wibox.widget.imagebox`. It creates a new\n instance of imagebox widget.\n\n Alternatively, the declarative layout syntax can handle\n `wibox.widget.imagebox` instanciation.\n\n The image can be a file, a cairo image surface, or an rsvg handle object\n (see the [image property](#image)).\n\n Any additional arguments will be passed to the clip shape function.",
            "type":"constructorfct",
            "section":"constructorfct",
            "kind":"constructors",
            "args":"([image[, resize_allowed[, clip_shape]]])",
            "tags":[],
            "lineno":850
          }],
        "type":"widgetmod",
        "file":"/home/cji/portless/awesome/build/lib/wibox/widget/imagebox.lua",
        "package":"",
        "tags":{
          "author":["Uli Schlachter"],
          "copyright":"2010 Uli Schlachter",
          "supermodule":["wibox.widget.base"]
        },
        "lineno":40
      },
      "name":""
    }],
  "usage":["local notif = naughty.notification {\n    title   = &#34A notification&#34,\n    message = &#34This notification has actions!&#34,\n    icon    = beautiful.awesome_icon,\n}\n\nwibox.widget {\n    notification = notif,\n    widget       = naughty.widget.icon,\n}\n"],
  "file":"/home/cji/portless/awesome/build/lib/naughty/widget/icon.lua",
  "package":"",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"notification",
        "map":{
          "notification":""
        }
      },
      "summary":"The attached notification.",
      "name":"notification",
      "modifiers":{
        "param":{
          "1":{
            "type":"naughty.notification"
          },
          "notification":{
            "type":"naughty.notification"
          }
        },
        "return":[],
        "propemits":[[]],
        "field":{
          "1":{
            "type":"naughty.notification"
          },
          "notification":{
            "type":"naughty.notification"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(notification)",
      "tags":{
        "propemits":["true false"]
      },
      "lineno":99
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"resize_strategy",
        "map":{
          "resize_strategy":""
        }
      },
      "summary":"How small icons are handled.",
      "name":"resize_strategy",
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "resize_strategy":{
            "type":"string"
          }
        },
        "usebeautiful":[[],[]],
        "return":[],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "resize_strategy":{
            "type":"string"
          }
        }
      },
      "description":"\n\n Valid values are:\n\n * **scale**: Scale the icon up to the optimal size.\n * **center**: Keep the icon size and draw it in the center\n * **resize**: Change the size of the widget itself (*default*).\n\n Note that the size upper bound is defined by\n `beautiful.notification_icon_size`.\n\n\n\n![Usage example](../images/AUTOGEN_wibox_nwidget_icon_strategy.svg)\n\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(resize_strategy)",
      "tags":{
        "usebeautiful":["beautiful.notification_icon_resize_strategy The fallback when\n  there is no specified strategy.","beautiful.notification_icon_size  The size upper bound."],
        "propemits":["true false"]
      },
      "lineno":150
    },{
      "inferred":true,
      "subparams":{
        "args":["args.notification"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.notification":" The notification.",
          "args":""
        }
      },
      "summary":"Create a new naughty.widget.icon.",
      "name":"naughty.widget.icon",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"naughty.notification"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"naughty.notification"
          },
          "args.notification":{
            "type":"naughty.notification"
          },
          "args":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"(args)",
      "tags":[],
      "lineno":171
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get or set the children elements.",
      "name":"children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":213
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"children",
        "map":{
          "children":" The children."
        }
      },
      "summary":"Get all direct and indirect children widgets.",
      "name":"all_children",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "children":{
            "type":"table"
          }
        }
      },
      "description":"\n This will scan all containers recursively to find widgets\n Warning: This method it prone to stack overflow id the widget, or any of its\n children, contain (directly or indirectly) itself.",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(children)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":221
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":227
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":" The height (`nil` for automatic)"
        }
      },
      "summary":"Force a widget height.",
      "name":"forced_height",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "height":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":232
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":" The width (`nil` for automatic)"
        }
      },
      "summary":"Force a widget width.",
      "name":"forced_width",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        },
        "field":{
          "1":{
            "type":"number|nil"
          },
          "width":{
            "type":"number|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":237
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" The opacity (between 0 and 1)"
        }
      },
      "summary":"The widget opacity (transparency).",
      "name":"opacity",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        },
        "field":{
          "1":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          },
          "opacity":{
            "optchain":"1",
            "type":"number",
            "opt":"1"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"([opacity=1])",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":242
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"The widget visibility.",
      "name":"visible",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":247
    },{
      "parameter":"field",
      "params":{
        "1":"table",
        "map":{
          "table":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "table":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "table":[]
        },
        "return":[]
      },
      "description":"\n\n The table contains a list of `awful.button` objects.\n",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The widget buttons.",
      "name":"buttons",
      "type":"property",
      "args":"(table)",
      "kind":"object properties",
      "lineno":256
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button to add."
        }
      },
      "summary":"Add a new `awful.button` to this widget.",
      "name":"add_button",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(button)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":261
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"signal_name",
        "2":"...",
        "map":{
          "signal_name":"",
          "...":" Other arguments"
        }
      },
      "summary":"Emit a signal and ensure all parent widgets in the hierarchies also\n forward the signal.",
      "name":"emit_signal_recursive",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "signal_name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":" This is useful to track signals when there is a dynamic\n set of containers and layouts wrapping the widget.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(signal_name, ...)",
      "tags":{
        "baseclass":["wibox.widget"]
      },
      "lineno":269
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the previous results of `:layout()` and `:fit()`\n are no longer valid.  Unless this signal is emitted, `:layout()` and `:fit()`\n must return the same result when called with the same arguments.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the layout (size) change.",
      "name":"widget::layout_changed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":277
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "baseclass":[[]],
        "return":[],
        "field":[]
      },
      "description":"\n This signal is emitted when the content of the widget changes. The widget will\n be redrawn, it is not re-layouted. Put differently, it is assumed that\n `:layout()` and `:fit()` would still return the same results as before.",
      "tags":{
        "see":[],
        "baseclass":["wibox.widget"]
      },
      "section":"signal",
      "inferred":true,
      "subparams":[],
      "summary":"When the widget content changed.",
      "name":"widget::redraw_needed",
      "type":"signal",
      "args":"()",
      "kind":"signals",
      "lineno":285
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is pressed over the widget.",
      "name":"button::press",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":316
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"lx",
        "3":"ly",
        "4":"button",
        "5":"mods",
        "6":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "button":" The button number.",
          "lx":" The horizontal position relative to the (0,0) position in\n the widget.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "mods":" The modifiers (mod4, mod1 (alt), Control, Shift)",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "ly":" The vertical position relative to the (0,0) position in the\n widget.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.widget":" The widget being displayed."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"number"
          },
          "3":{
            "type":"number"
          },
          "4":{
            "type":"number"
          },
          "5":{
            "type":"table"
          },
          "6":{
            "type":"table"
          },
          "7":{
            "type":"wibox.drawable"
          },
          "8":{
            "type":"widget"
          },
          "9":{
            "type":"wibox.hierarchy"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "12":{
            "type":"number"
          },
          "13":{
            "type":"number"
          },
          "14":{
            "type":"number"
          },
          "15":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "button":{
            "type":"number"
          },
          "lx":{
            "type":"number"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "mods":{
            "type":"table"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "ly":{
            "type":"number"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When a mouse button is released over the widget.",
      "name":"button::release",
      "type":"signal",
      "args":"(self, lx, ly, button, mods, find_widgets_result)",
      "kind":"signals",
      "lineno":347
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse enter a widget.",
      "name":"mouse::enter",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":372
    },{
      "parameter":"field",
      "params":{
        "1":"self",
        "2":"find_widgets_result",
        "map":{
          "find_widgets_result.drawable":" The drawable containing\n the widget.",
          "find_widgets_result.widget_height":" The exact height of the widget\n in its local coordinate system.",
          "find_widgets_result.widget":" The widget being displayed.",
          "self":" The current object instance itself.",
          "find_widgets_result.y":" An approximation of the Y position that\n the widget is visible at on the surface.",
          "find_widgets_result":" The entry from the result of\n @{wibox.drawable:find_widgets} for the position that the mouse hit.",
          "find_widgets_result.widget_width":" The exact width of the widget\n in its local coordinate system.",
          "find_widgets_result.width":" An approximation of the width that\n the widget is visible at on the surface.",
          "find_widgets_result.hierarchy":" The hierarchy\n managing the widget's geometry.",
          "find_widgets_result.height":" An approximation of the height that\n the widget is visible at on the surface.",
          "find_widgets_result.x":" An approximation of the X position that\n the widget is visible at on the surface."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"table"
          },
          "2":{
            "type":"table"
          },
          "3":{
            "type":"wibox.drawable"
          },
          "4":{
            "type":"widget"
          },
          "5":{
            "type":"wibox.hierarchy"
          },
          "6":{
            "type":"number"
          },
          "7":{
            "type":"number"
          },
          "8":{
            "type":"number"
          },
          "9":{
            "type":"number"
          },
          "10":{
            "type":"number"
          },
          "11":{
            "type":"number"
          },
          "find_widgets_result.drawable":{
            "type":"wibox.drawable"
          },
          "find_widgets_result.widget_height":{
            "type":"number"
          },
          "find_widgets_result.widget":{
            "type":"widget"
          },
          "self":{
            "type":"table"
          },
          "find_widgets_result.y":{
            "type":"number"
          },
          "find_widgets_result":{
            "type":"table"
          },
          "find_widgets_result.widget_width":{
            "type":"number"
          },
          "find_widgets_result.width":{
            "type":"number"
          },
          "find_widgets_result.hierarchy":{
            "type":"wibox.hierarchy"
          },
          "find_widgets_result.height":{
            "type":"number"
          },
          "find_widgets_result.x":{
            "type":"number"
          }
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "baseclass":["wibox.widget"],
        "see":[]
      },
      "section":"signal",
      "inferred":true,
      "subparams":{
        "find_widgets_result":["find_widgets_result.drawable","find_widgets_result.widget","find_widgets_result.hierarchy","find_widgets_result.x","find_widgets_result.y","find_widgets_result.width","find_widgets_result.height","find_widgets_result.widget_width","find_widgets_result.widget_height"]
      },
      "summary":"When the mouse leave a widget.",
      "name":"mouse::leave",
      "type":"signal",
      "args":"(self, find_widgets_result)",
      "kind":"signals",
      "lineno":397
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The name of the signal.",
          "...":" Extra arguments for the callback functions. Each connected\n   function receives the object as first argument and then any extra\n   arguments that are given to emit_signal()."
        }
      },
      "summary":"Emit a signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, ...)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":413
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal.",
      "name":"connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":419
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal.",
          "func":" The callback to call when the signal is emitted."
        }
      },
      "summary":"Connect to a signal weakly.",
      "name":"weak_connect_signal",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"\n\n This allows the callback function to be garbage collected and\n automatically disconnects the signal when that happens.\n\n **Warning:**\n Only use this function if you really, really, really know what you\n are doing.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(name, func)",
      "tags":{
        "baseclass":["gears.object"]
      },
      "lineno":432
    }],
  "lineno":33
}