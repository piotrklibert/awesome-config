{
  "inferred":true,
  "kind":"popups_and_bars",
  "mod_name":"wibox",
  "summary":"",
  "sections":{
    "by_name":[]
  },
  "name":"wibox",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "description":"",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"Border width.",
      "name":"border_width",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":46
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "summary":"Border color.",
      "name":"border_color",
      "modifiers":{
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "string":[]
        },
        "propemits":[[]]
      },
      "description":"\n\n Please note that this property only support string based 24 bit or 32 bit\n colors:\n\n    Red Blue\n     _|  _|\n    #FF00FF\n       T‾\n     Green\n\n\n    Red Blue\n     _|  _|\n    #FF00FF00\n       T‾  ‾T\n    Green   Alpha\n",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(string)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":69
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"On top of other windows.",
      "name":"ontop",
      "modifiers":{
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":76
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The mouse cursor.",
      "name":"cursor",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":84
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"Visibility.",
      "name":"visible",
      "modifiers":{
        "field":{
          "1":[],
          "boolean":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "boolean":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":91
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"opacity",
        "map":{
          "opacity":" (between 0 and 1)"
        }
      },
      "summary":"The opacity of the wibox, between 0 and 1.",
      "name":"opacity",
      "modifiers":{
        "field":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"number"
          },
          "opacity":{
            "type":"number"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(opacity)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":98
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The window type (desktop, normal, dock, ...).",
      "name":"type",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":106
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"The x coordinates.",
      "name":"x",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":113
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"The y coordinates.",
      "name":"y",
      "modifiers":{
        "field":{
          "1":[],
          "integer":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "integer":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(integer)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":120
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"width",
        "map":{
          "width":""
        }
      },
      "summary":"The width of the wibox.",
      "name":"width",
      "modifiers":{
        "field":{
          "1":[],
          "width":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "width":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(width)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":127
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"height",
        "map":{
          "height":""
        }
      },
      "summary":"The height of the wibox.",
      "name":"height",
      "modifiers":{
        "field":{
          "1":[],
          "height":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "height":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(height)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":134
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":""
        }
      },
      "summary":"The wibox screen.",
      "name":"screen",
      "modifiers":{
        "field":{
          "1":[],
          "screen":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "screen":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(screen)",
      "tags":{
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "lineno":141
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"drawable",
        "map":{
          "drawable":""
        }
      },
      "summary":"The wibox's `drawable`.",
      "name":"drawable",
      "modifiers":{
        "field":{
          "1":{
            "type":"drawable"
          },
          "drawable":{
            "type":"drawable"
          }
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":{
            "type":"drawable"
          },
          "drawable":{
            "type":"drawable"
          }
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(drawable)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":148
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"widget",
        "map":{
          "widget":""
        }
      },
      "summary":"The widget that the `wibox` displays.",
      "name":"widget",
      "modifiers":{
        "field":{
          "1":[],
          "widget":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "widget":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(widget)",
      "tags":{
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "lineno":154
    },{
      "parameter":"field",
      "params":{
        "1":"string",
        "map":{
          "string":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "string":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "string":[]
        }
      },
      "description":"",
      "tags":{
        "propemits":["false false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The X window id.",
      "name":"window",
      "type":"property",
      "args":"(string)",
      "kind":"object properties",
      "lineno":162
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n If you want to set a shape, let say some rounded corners, use\n the `shape` property rather than this. If you want something\n very complex, for example, holes, then use this.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's bounding shape as a (native) cairo surface.",
      "name":"shape_bounding",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":174
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n The clip shape is the shape of the window *content* rather\n than the outer window shape.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's clip shape as a (native) cairo surface.",
      "name":"shape_clip",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":185
    },{
      "parameter":"field",
      "params":{
        "map":{
          "surface._native":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "surface._native":[]
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":[],
          "surface._native":[]
        }
      },
      "description":"\n\n The input shape allows to disable clicks and mouse events\n on part of the window. This is how `input_passthrough` is\n implemented.\n",
      "tags":{
        "see":[],
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":{
        "surface":["surface._native"]
      },
      "summary":"The wibox's input shape as a (native) cairo surface.",
      "name":"shape_input",
      "type":"property",
      "args":"()",
      "kind":"object properties",
      "lineno":197
    },{
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"gears.shape"
          },
          "shape":{
            "type":"gears.shape"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "propemits":["true false"],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The wibar's shape.",
      "name":"shape",
      "type":"property",
      "args":"(shape)",
      "kind":"object properties",
      "lineno":205
    },{
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "optchain":"false",
            "opt":"false"
          },
          "boolean":{
            "optchain":"false",
            "opt":"false"
          }
        }
      },
      "description":"\n\n This replace the `shape_input` mask with an empty area. All mouse and\n keyboard events are sent to the object (such as a client) positioned below\n this wibox. When used alongside compositing, it allows, for example, to have\n a subtle transparent wibox on top a fullscreen client to display important\n data such as a low battery warning.\n",
      "tags":{
        "propemits":["true false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Forward the inputs to the client below the wibox.",
      "name":"input_passthrough",
      "type":"property",
      "args":"([boolean=false])",
      "kind":"object properties",
      "lineno":219
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"buttons_table",
        "map":{
          "buttons_table":" A table of buttons objects, or nothing."
        }
      },
      "summary":"Get or set mouse buttons bindings to a wibox.",
      "name":"buttons",
      "modifiers":{
        "field":{
          "1":[],
          "buttons_table":[]
        },
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "buttons_table":[]
        },
        "propemits":[[]]
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(buttons_table)",
      "tags":{
        "propemits":["false false"],
        "baseclass":["wibox"]
      },
      "lineno":226
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"A",
        "map":{
          "A":" table with coordinates to modify."
        }
      },
      "summary":"Get or set wibox geometry.",
      "name":"geometry",
      "modifiers":{
        "field":{
          "1":[],
          "A":[]
        },
        "emits":[[]],
        "return":[[]],
        "baseclass":[[]],
        "param":{
          "1":[],
          "A":[]
        },
        "emitstparam":[[]]
      },
      "description":" That's the same as accessing or setting the x,\n y, width or height properties of a wibox.\n",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(A)",
      "tags":{
        "emits":["property::geometry When the geometry change."],
        "baseclass":["wibox"],
        "emitstparam":["property::geometry table geo The geometry table."]
      },
      "lineno":236
    },{
      "parameter":"field",
      "params":{
        "1":"strut",
        "map":{
          "strut":" A table with new strut, or nothing"
        }
      },
      "modifiers":{
        "see":[[]],
        "emits":[[]],
        "field":{
          "1":[],
          "strut":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "strut":[]
        },
        "return":[[]]
      },
      "description":"\n\n Struts are the area which should be reserved on each side of\n the screen for this wibox. This is used to make bars and\n docked displays. Note that `awful.wibar` implements all the\n required boilerplate code to make bar. Only use this if you\n want special type of bars (like bars not fully attached to\n the side of the screen).\n",
      "tags":{
        "see":[],
        "emits":["property::struts"],
        "baseclass":["wibox"]
      },
      "section":"method",
      "inferred":true,
      "subparams":[],
      "summary":"Get or set wibox struts.",
      "name":"struts",
      "type":"method",
      "args":"(strut)",
      "kind":"object methods ",
      "lineno":252
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "color":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "color":[]
        },
        "return":[]
      },
      "description":"\n\n The background color can be transparent. If there is a\n compositing manager such as compton, then it will be\n real transparency and may include blur (provided by the\n compositor). When there is no compositor, it will take\n a picture of the wallpaper and blend it.\n",
      "tags":{
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default background color.",
      "name":"beautiful.bg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":265
    },{
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":[],
          "color":[]
        },
        "baseclass":[[]],
        "param":{
          "1":[],
          "color":[]
        },
        "return":[]
      },
      "description":"",
      "tags":{
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"beautiful",
      "inferred":true,
      "subparams":[],
      "summary":"The default foreground (text) color.",
      "name":"beautiful.fg_normal",
      "type":"beautiful",
      "args":"(color)",
      "kind":"theme variables",
      "lineno":271
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args":" An array containing the widgets disposition"
        }
      },
      "summary":"Set a declarative widget hierarchy description.",
      "name":"setup",
      "modifiers":{
        "return":[],
        "baseclass":[[]],
        "param":{
          "1":[],
          "args":[]
        },
        "field":{
          "1":[],
          "args":[]
        }
      },
      "description":"\n See [The declarative layout system](../documentation/03-declarative-layout.md.html)",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(args)",
      "tags":{
        "baseclass":["wibox"]
      },
      "lineno":277
    },{
      "parameter":"field",
      "params":{
        "1":"The",
        "map":{
          "The":" background to use. This must either be a cairo pattern object,\n   nil or a string that gears.color() understands."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":{
          "1":{
            "type":"c"
          },
          "The":{
            "type":"c"
          }
        },
        "usebeautiful":[[]],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"c"
          },
          "The":{
            "type":"c"
          }
        }
      },
      "description":"\n\n The background color can be transparent. If there is a\n compositing manager such as compton, then it will be\n real transparency and may include blur (provided by the\n compositor). When there is no compositor, it will take\n a picture of the wallpaper and blend it.\n",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.bg_normal The default (fallback) bg color."],
        "baseclass":["wibox"],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The background of the wibox.",
      "name":"bg",
      "type":"property",
      "args":"(The)",
      "kind":"object properties",
      "lineno":293
    },{
      "parameter":"field",
      "params":{
        "1":"image",
        "map":{
          "image":" A background image or a function."
        }
      },
      "modifiers":{
        "see":[[]],
        "field":{
          "1":{
            "type":"gears.suface|string|function"
          },
          "image":{
            "type":"gears.suface|string|function"
          }
        },
        "return":[],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"gears.suface|string|function"
          },
          "image":{
            "type":"gears.suface|string|function"
          }
        }
      },
      "description":"\n\n If `image` is a function, it will be called with `(context, cr, width, height)`\n as arguments. Any other arguments passed to this method will be appended.\n",
      "tags":{
        "propemits":["true false"],
        "see":[],
        "baseclass":["wibox"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The background image of the drawable.",
      "name":"bgimage",
      "type":"property",
      "args":"(image)",
      "kind":"object properties",
      "lineno":304
    },{
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"color",
        "map":{
          "c":" The foreground to use. This must either be a cairo pattern object,\n   nil or a string that gears.color() understands.",
          "color":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "field":{
          "1":{
            "type":"color"
          },
          "2":[],
          "c":{
            "type":"color"
          },
          "color":[]
        },
        "usebeautiful":[[]],
        "baseclass":[[]],
        "propemits":[[]],
        "param":{
          "1":{
            "type":"color"
          },
          "2":[],
          "c":{
            "type":"color"
          },
          "color":[]
        }
      },
      "description":"",
      "tags":{
        "see":[],
        "usebeautiful":["beautiful.fg_normal The default (fallback) fg color."],
        "baseclass":["wibox"],
        "propemits":["true false"]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"The foreground (text) of the wibox.",
      "name":"fg",
      "type":"property",
      "args":"(c, color)",
      "kind":"object properties",
      "lineno":314
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"x",
        "2":"y",
        "map":{
          "y":" Y coordinate of the point",
          "x":" X coordinate of the point"
        }
      },
      "summary":"Find a widget by a point.",
      "name":"find_widgets",
      "modifiers":{
        "baseclass":[[]],
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        },
        "field":{
          "1":{
            "type":"number"
          },
          "2":{
            "type":"number"
          },
          "y":{
            "type":"number"
          },
          "x":{
            "type":"number"
          }
        }
      },
      "description":"\n The wibox must have drawn itself at least once for this to work.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(x, y)",
      "tags":{
        "baseclass":["wibox"]
      },
      "lineno":324
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Create a widget that reflects the current state of this wibox.",
      "name":"to_widget",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"widget"
          }]
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"()",
      "tags":[],
      "lineno":363
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"path",
        "2":"context",
        "map":{
          "path":" The path.",
          "context":" A widget context."
        }
      },
      "summary":"Save a screenshot of the wibox to `path`.",
      "name":"save_to_svg",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "path":{
            "type":"string"
          },
          "context":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "path":{
            "type":"string"
          },
          "context":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          }
        }
      },
      "description":"",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(path[, context=nil])",
      "tags":[],
      "lineno":387
    },{
      "inferred":true,
      "subparams":{
        "args":["args.border_width","args.border_color","args.ontop","args.cursor","args.visible","args.opacity","args.type","args.x","args.y","args.width","args.height","args.screen","args.widget","args.shape_bounding","args.shape_clip","args.shape_input","args.bg","args.bgimage","args.fg","args.shape","args.input_passthrough"]
      },
      "parameter":"field",
      "params":{
        "1":"args",
        "map":{
          "args.visible":" Visibility.",
          "args.shape_bounding":" The wibox’s bounding shape as a (native) cairo surface.",
          "args.shape_clip":" The wibox’s clip shape as a (native) cairo surface.",
          "args.shape_input":" The wibox’s input shape as a (native) cairo surface.",
          "args.widget":" The widget that the wibox displays.",
          "args.fg":" The foreground (text) color.",
          "args.type":" The window type (desktop, normal, dock, …).",
          "args.border_width":" Border width.",
          "args.input_passthrough":" If the inputs are\n  forward to the element below.",
          "args.shape":" The shape.",
          "args.cursor":" The mouse cursor.",
          "args.x":" The x coordinates.",
          "args.border_color":" Border color.",
          "args.bg":" The background.",
          "args.width":" The width.",
          "args.bgimage":" The background image of the drawable.",
          "args.y":" The y coordinates.",
          "args.ontop":" On top of other windows.",
          "args.height":" The height.",
          "args":"",
          "args.opacity":" The opacity, between 0 and 1.",
          "args.screen":" The wibox screen."
        }
      },
      "summary":"Create a wibox.",
      "name":"wibox",
      "modifiers":{
        "return":[{
            "type":"wibox"
          }],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"string"
          },
          "6":{
            "type":"boolean"
          },
          "7":{
            "type":"number",
            "opt":"1"
          },
          "8":{
            "type":"string"
          },
          "9":{
            "type":"integer"
          },
          "10":{
            "type":"integer"
          },
          "11":{
            "type":"integer"
          },
          "12":{
            "type":"integer"
          },
          "13":{
            "type":"screen"
          },
          "14":{
            "type":"wibox.widget"
          },
          "15":[],
          "16":[],
          "17":[],
          "18":{
            "type":"color"
          },
          "19":{
            "type":"surface"
          },
          "20":{
            "type":"color"
          },
          "21":{
            "type":"gears.shape"
          },
          "22":{
            "type":"boolean",
            "opt":"false"
          },
          "args.visible":{
            "type":"boolean"
          },
          "args.shape_bounding":[],
          "args.shape_clip":[],
          "args.shape_input":[],
          "args.widget":{
            "type":"wibox.widget"
          },
          "args.fg":{
            "type":"color"
          },
          "args.type":{
            "type":"string"
          },
          "args.border_width":{
            "type":"integer"
          },
          "args.input_passthrough":{
            "type":"boolean",
            "opt":"false"
          },
          "args.shape":{
            "type":"gears.shape"
          },
          "args.cursor":{
            "type":"string"
          },
          "args.x":{
            "type":"integer"
          },
          "args.border_color":{
            "type":"string"
          },
          "args.bg":{
            "type":"color"
          },
          "args.width":{
            "type":"integer"
          },
          "args.bgimage":{
            "type":"surface"
          },
          "args.y":{
            "type":"integer"
          },
          "args.ontop":{
            "type":"boolean",
            "opt":"false"
          },
          "args.height":{
            "type":"integer"
          },
          "args":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "args.opacity":{
            "type":"number",
            "opt":"1"
          },
          "args.screen":{
            "type":"screen"
          }
        },
        "field":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "type":"integer"
          },
          "3":{
            "type":"string"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "5":{
            "type":"string"
          },
          "6":{
            "type":"boolean"
          },
          "7":{
            "type":"number",
            "opt":"1"
          },
          "8":{
            "type":"string"
          },
          "9":{
            "type":"integer"
          },
          "10":{
            "type":"integer"
          },
          "11":{
            "type":"integer"
          },
          "12":{
            "type":"integer"
          },
          "13":{
            "type":"screen"
          },
          "14":{
            "type":"wibox.widget"
          },
          "15":[],
          "16":[],
          "17":[],
          "18":{
            "type":"color"
          },
          "19":{
            "type":"surface"
          },
          "20":{
            "type":"color"
          },
          "21":{
            "type":"gears.shape"
          },
          "22":{
            "type":"boolean",
            "opt":"false"
          },
          "args.visible":{
            "type":"boolean"
          },
          "args.shape_bounding":[],
          "args.shape_clip":[],
          "args.shape_input":[],
          "args.widget":{
            "type":"wibox.widget"
          },
          "args.fg":{
            "type":"color"
          },
          "args.type":{
            "type":"string"
          },
          "args.border_width":{
            "type":"integer"
          },
          "args.input_passthrough":{
            "type":"boolean",
            "opt":"false"
          },
          "args.shape":{
            "type":"gears.shape"
          },
          "args.cursor":{
            "type":"string"
          },
          "args.x":{
            "type":"integer"
          },
          "args.border_color":{
            "type":"string"
          },
          "args.bg":{
            "type":"color"
          },
          "args.width":{
            "type":"integer"
          },
          "args.bgimage":{
            "type":"surface"
          },
          "args.y":{
            "type":"integer"
          },
          "args.ontop":{
            "type":"boolean",
            "opt":"false"
          },
          "args.height":{
            "type":"integer"
          },
          "args":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "args.opacity":{
            "type":"number",
            "opt":"1"
          },
          "args.screen":{
            "type":"screen"
          }
        }
      },
      "description":"",
      "type":"constructorfct",
      "section":"constructorfct",
      "kind":"constructors",
      "args":"([args=nil])",
      "tags":[],
      "lineno":595
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"wibox",
        "map":{
          "wibox":""
        }
      },
      "summary":"Redraw a wibox.",
      "name":"draw",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "wibox":[]
        },
        "field":{
          "1":[],
          "wibox":[]
        }
      },
      "description":" You should never have to call this explicitely because it is\n automatically called when needed.",
      "type":"method",
      "section":"method",
      "kind":"object methods ",
      "args":"(wibox)",
      "tags":[],
      "lineno":710
    },{
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal",
          "func":" The function to attach"
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "usage":[[]]
      },
      "description":"\n\n Functions connected to this signal source will be executed when any\n wibox object emits the signal.\n\n It is also used for some generic wibox signals such as\n `request::geometry`.\n",
      "tags":[],
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Connect a global signal on the wibox class.",
      "name":"connect_signal",
      "kind":"static module functions",
      "usage":["wibox.connect_signal(\"added\", function(notif)\n   -- do something\nend)\n"],
      "args":"(name, func)",
      "type":"staticfct",
      "lineno":725
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"...",
        "map":{
          "name":" The signal name.",
          "...":" The signal callback arguments"
        }
      },
      "summary":"Emit a wibox signal.",
      "name":"emit_signal",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":[],
          "name":{
            "type":"string"
          },
          "...":[]
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, ...)",
      "tags":[],
      "lineno":730
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"name",
        "2":"func",
        "map":{
          "name":" The name of the signal",
          "func":" The attached function"
        }
      },
      "summary":"Disconnect a signal from a source.",
      "name":"disconnect_signal",
      "modifiers":{
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"string"
          },
          "2":{
            "type":"function"
          },
          "name":{
            "type":"string"
          },
          "func":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(name, func)",
      "tags":[],
      "lineno":736
    }],
  "type":"popupmod",
  "file":"/home/cji/portless/awesome/build/lib/wibox/init.lua",
  "package":"",
  "tags":{
    "author":["Uli Schlachter"],
    "copyright":"2010 Uli Schlachter"
  },
  "lineno":7
}