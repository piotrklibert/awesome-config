{
  "inferred":true,
  "kind":"input_handling",
  "description":"\n\n The mouse buttons are represented as index. The common ones are:\n\n ![Client geometry](../images/mouse.svg)\n\n It is possible to be notified of mouse events by connecting to various\n `client`, `widget`s and `wibox` signals:\n\n  * `mouse::enter`\n  * `mouse::leave`\n  * `mouse::press`\n  * `mouse::release`\n  * `mouse::move`\n\n It is also possible to add generic mouse button callbacks for `client`s,\n `wiboxe`s and the `root` window. Those are set in the default `rc.lua` as such:\n\n **root**:\n\n    root.buttons(awful.util.table.join(\n        awful.button({ }, 3, function () mymainmenu:toggle() end),\n        awful.button({ }, 4, awful.tag.viewnext),\n        awful.button({ }, 5, awful.tag.viewprev)\n    ))\n\n **client**:\n\n    clientbuttons = awful.util.table.join(\n        awful.button({ }, 1, function (c) client.focus = c; c:raise() end),\n        awful.button({ modkey }, 1, awful.mouse.client.move),\n        awful.button({ modkey }, 3, awful.mouse.client.resize)\n    )\n\n See also `mousegrabber`\n",
  "summary":"awesome mouse API.",
  "sections":{
    "by_name":[]
  },
  "name":"mouse",
  "modifiers":{
    "copyright":[],
    "author":[[]]
  },
  "tags":{
    "author":["Julien Danjou &lt;julien@danjou.info&gt;"],
    "copyright":"2008-2009 Julien Danjou"
  },
  "type":"inputmodule",
  "package":"",
  "file":"/home/cji/portless/awesome/build/mouse.c",
  "mod_name":"mouse",
  "items":[{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"screen",
        "map":{
          "screen":""
        }
      },
      "summary":"The `screen` under the cursor",
      "name":"screen",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "screen":[]
        },
        "field":{
          "1":[],
          "screen":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(screen)",
      "tags":[],
      "lineno":80
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "map":[]
      },
      "summary":"Get the client or any object which is under the pointer.",
      "name":"object_under_pointer",
      "modifiers":{
        "field":[],
        "return":[{
            "type":"client.object|nil"
          }]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"()",
      "tags":[],
      "lineno":270
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"snap",
        "3":"finished_cb",
        "map":{
          "snap":" The pixel to snap clients.",
          "c":" The client to move, or the focused one if nil.",
          "finished_cb":" Deprecated, do not use."
        }
      },
      "summary":"Move a client.",
      "name":"awful.mouse.client.move",
      "modifiers":{
        "field":{
          "1":[],
          "2":[],
          "3":[],
          "snap":[],
          "c":[],
          "finished_cb":[]
        },
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "3":[],
          "snap":[],
          "c":[],
          "finished_cb":[]
        },
        "request":[[]]
      },
      "description":"",
      "type":"staticfct",
      "section":"lib.awful.mouse.client Functions",
      "kind":"lib.awful.mouse.client functions",
      "args":"(c, snap, finished_cb)",
      "tags":{
        "within":"lib.awful.mouse.client Functions",
        "request":["client geometry mouse.move granted When `awful.mouse.client.move` is\n  called."]
      },
      "lineno":21
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "map":{
          "c":" The client to move"
        }
      },
      "summary":"Move a client to a tag by dragging it onto the left / right side of the screen.",
      "name":"awful.mouse.client.dragtotag.border",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "c":[]
        },
        "field":{
          "1":[],
          "c":[]
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"lib.awful.mouse.client Functions",
      "kind":"lib.awful.mouse.client functions",
      "args":"(c)",
      "tags":{
        "within":"lib.awful.mouse.client Functions"
      },
      "lineno":59
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"corner",
        "map":{
          "c":" The client to get corner from, focused one by default.",
          "corner":" The corner to use: auto, top_left, top_right, bottom_left,\n bottom_right, left, right, top bottom. Default is auto, and auto find the\n nearest corner."
        }
      },
      "summary":"Get a client corner coordinates.",
      "name":"awful.mouse.client.corner",
      "modifiers":{
        "return":[{
            "type":"string"
          },{
            "type":"number"
          },{
            "type":"number"
          }],
        "param":{
          "1":{
            "type":"client",
            "opt":"client.focus"
          },
          "2":{
            "type":"string"
          },
          "c":{
            "type":"client",
            "opt":"client.focus"
          },
          "corner":{
            "type":"string"
          }
        },
        "field":{
          "1":{
            "type":"client",
            "opt":"client.focus"
          },
          "2":{
            "type":"string"
          },
          "c":{
            "type":"client",
            "opt":"client.focus"
          },
          "corner":{
            "type":"string"
          }
        }
      },
      "description":"",
      "type":"deprecated",
      "section":"lib.awful.mouse.client Functions",
      "kind":"lib.awful.mouse.client functions",
      "args":"([c=client.focus], corner)",
      "tags":{
        "within":"lib.awful.mouse.client Functions"
      },
      "lineno":78
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"c",
        "2":"corner",
        "3":"args",
        "map":{
          "corner":" The corner to grab on resize. Auto detected by default.",
          "args":" A set of `awful.placement` arguments",
          "c":" The client to resize, or the focused one by default."
        }
      },
      "summary":"Resize a client.",
      "name":"awful.mouse.client.resize",
      "modifiers":{
        "field":{
          "1":[],
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "corner":{
            "type":"string"
          },
          "args":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":[]
        },
        "return":[{
            "type":"string"
          }],
        "param":{
          "1":[],
          "2":{
            "type":"string"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "corner":{
            "type":"string"
          },
          "args":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "c":[]
        },
        "request":[[]]
      },
      "description":"",
      "type":"staticfct",
      "section":"lib.awful.mouse.client Functions",
      "kind":"lib.awful.mouse.client functions",
      "args":"(c, corner[, args={}])",
      "tags":{
        "within":"lib.awful.mouse.client Functions",
        "request":["client geometry mouse.resize granted When `awful.mouse.client.resize`\n  is called."]
      },
      "lineno":106
    },{
      "parameter":"field",
      "params":{
        "1":"default_distance",
        "map":{
          "snap.default_distance":"",
          "default_distance":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":[{
            "type":"integer",
            "opt":"8"
          }],
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer",
            "opt":"8"
          },
          "snap.default_distance":{
            "type":"integer"
          },
          "default_distance":{
            "type":"integer",
            "opt":"8"
          }
        }
      },
      "description":"\n\n \n\n![Usage example](../images/AUTOGEN_screen_client_snap.svg)\n\n",
      "tags":{
        "see":[]
      },
      "section":"field",
      "inferred":false,
      "subparams":{
        "snap":["snap.default_distance"]
      },
      "summary":"The default distance before snapping clients together.",
      "name":"snap.default_distance",
      "type":"field",
      "args":"(default_distance)",
      "kind":"fields",
      "lineno":45
    },{
      "parameter":"field",
      "params":{
        "1":"aerosnap_distance",
        "map":{
          "aerosnap_distance":"",
          "snap.aerosnap_distance":""
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":[{
            "type":"integer",
            "opt":"16"
          }],
        "field":{
          "1":{
            "type":"integer"
          },
          "2":{
            "type":"integer",
            "opt":"16"
          },
          "aerosnap_distance":{
            "type":"integer",
            "opt":"16"
          },
          "snap.aerosnap_distance":{
            "type":"integer"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"field",
      "inferred":false,
      "subparams":{
        "snap":["snap.aerosnap_distance"]
      },
      "summary":"The default distance before activating screen edge snap.",
      "name":"snap.aerosnap_distance",
      "type":"field",
      "args":"(aerosnap_distance)",
      "kind":"fields",
      "lineno":50
    },{
      "inferred":false,
      "subparams":{
        "snap":["snap.edge_enabled"]
      },
      "parameter":"field",
      "params":{
        "1":"edge_enabled",
        "map":{
          "edge_enabled":"",
          "snap.edge_enabled":""
        }
      },
      "summary":"Enable screen edges snapping.",
      "name":"snap.edge_enabled",
      "modifiers":{
        "return":[],
        "param":[{
            "type":"boolean"
          }],
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "2":{
            "type":"boolean"
          },
          "edge_enabled":{
            "type":"boolean"
          },
          "snap.edge_enabled":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_awful_placement_aero_snap.svg)\n\n",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"([edge_enabled=true])",
      "tags":[],
      "lineno":60
    },{
      "inferred":false,
      "subparams":{
        "snap":["snap.client_enabled"]
      },
      "parameter":"field",
      "params":{
        "1":"client_enabled",
        "map":{
          "client_enabled":"",
          "snap.client_enabled":""
        }
      },
      "summary":"Enable client to client snapping.",
      "name":"snap.client_enabled",
      "modifiers":{
        "return":[],
        "param":[{
            "type":"boolean"
          }],
        "field":{
          "1":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          },
          "2":{
            "type":"boolean"
          },
          "client_enabled":{
            "type":"boolean"
          },
          "snap.client_enabled":{
            "optchain":"true",
            "type":"boolean",
            "opt":"true"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"([client_enabled=true])",
      "tags":[],
      "lineno":64
    },{
      "inferred":false,
      "subparams":{
        "drag_to_tag":["drag_to_tag.enabled"]
      },
      "parameter":"field",
      "params":{
        "1":"enabled",
        "map":{
          "enabled":"",
          "drag_to_tag.enabled":""
        }
      },
      "summary":"Enable changing tag when a client is dragged to the edge of the screen.",
      "name":"drag_to_tag.enabled",
      "modifiers":{
        "return":[],
        "param":[{
            "type":"boolean"
          }],
        "field":{
          "1":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          },
          "2":{
            "type":"boolean"
          },
          "enabled":{
            "type":"boolean"
          },
          "drag_to_tag.enabled":{
            "optchain":"false",
            "type":"boolean",
            "opt":"false"
          }
        }
      },
      "description":"",
      "type":"field",
      "section":"field",
      "kind":"fields",
      "args":"([enabled=false])",
      "tags":[],
      "lineno":68
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"color",
        "map":{
          "color":""
        }
      },
      "summary":"The snap outline background color.",
      "name":"beautiful.snap_bg",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"color|string|gradient|pattern"
          },
          "color":{
            "type":"color|string|gradient|pattern"
          }
        },
        "field":{
          "1":{
            "type":"color|string|gradient|pattern"
          },
          "color":{
            "type":"color|string|gradient|pattern"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(color)",
      "tags":[],
      "lineno":72
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"integer",
        "map":{
          "integer":""
        }
      },
      "summary":"The snap outline width.",
      "name":"beautiful.snap_border_width",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "integer":[]
        },
        "field":{
          "1":[],
          "integer":[]
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(integer)",
      "tags":[],
      "lineno":76
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"shape",
        "map":{
          "shape":" A `gears.shape` compatible function"
        }
      },
      "summary":"The snap outline shape.",
      "name":"beautiful.snap_shape",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"function"
          },
          "shape":{
            "type":"function"
          }
        },
        "field":{
          "1":{
            "type":"function"
          },
          "shape":{
            "type":"function"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"(shape)",
      "tags":[],
      "lineno":80
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"snapper_gap",
        "map":{
          "snapper_gap":""
        }
      },
      "summary":"The gap between snapped clients.",
      "name":"beautiful.snapper_gap",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "snapper_gap":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        },
        "field":{
          "1":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          },
          "snapper_gap":{
            "optchain":"0",
            "type":"number",
            "opt":"0"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"beautiful",
      "kind":"theme variables",
      "args":"([snapper_gap=0])",
      "tags":[],
      "lineno":84
    },{
      "parameter":"field",
      "params":{
        "map":[]
      },
      "modifiers":{
        "see":[[]],
        "return":[[]],
        "field":[]
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"deprecated",
      "inferred":true,
      "subparams":[],
      "summary":"Get the client object under the pointer.",
      "name":"awful.mouse.client_under_pointer",
      "type":"deprecated",
      "args":"()",
      "kind":"deprecated functions",
      "lineno":88
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"The",
        "map":{
          "The":" client"
        }
      },
      "summary":"Get the client currently under the mouse cursor.",
      "name":"current_client",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client|nil"
          },
          "The":{
            "type":"client|nil"
          }
        },
        "field":{
          "1":{
            "type":"client|nil"
          },
          "The":{
            "type":"client|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(The)",
      "tags":[],
      "lineno":119
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"The",
        "map":{
          "The":" wibox"
        }
      },
      "summary":"Get the wibox currently under the mouse cursor.",
      "name":"current_wibox",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"wibox|nil"
          },
          "The":{
            "type":"wibox|nil"
          }
        },
        "field":{
          "1":{
            "type":"wibox|nil"
          },
          "The":{
            "type":"wibox|nil"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(The)",
      "tags":[],
      "lineno":130
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"list",
        "map":{
          "list":" The widget list"
        }
      },
      "summary":"Get the widgets currently under the mouse cursor.",
      "name":"current_widgets",
      "modifiers":{
        "return":[{
            "type":"table"
          }],
        "param":{
          "1":{
            "type":"nil|table"
          },
          "list":{
            "type":"nil|table"
          }
        },
        "field":{
          "1":{
            "type":"nil|table"
          },
          "list":{
            "type":"nil|table"
          }
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(list)",
      "tags":[],
      "lineno":145
    },{
      "parameter":"field",
      "params":{
        "1":"widget",
        "map":{
          "widget":" The widget"
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"?widget"
          }],
        "param":{
          "1":{
            "type":"widget|nil"
          },
          "widget":{
            "type":"widget|nil"
          }
        },
        "field":{
          "1":{
            "type":"widget|nil"
          },
          "widget":{
            "type":"widget|nil"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Get the topmost widget currently under the mouse cursor.",
      "name":"current_widget",
      "type":"property",
      "args":"(widget)",
      "kind":"object properties",
      "lineno":169
    },{
      "parameter":"field",
      "params":{
        "1":"The",
        "map":{
          "The":" geometry."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"?table"
          },
          "The":{
            "type":"?table"
          }
        },
        "field":{
          "1":{
            "type":"?table"
          },
          "The":{
            "type":"?table"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Get the current widget geometry.",
      "name":"current_widget_geometry",
      "type":"property",
      "args":"(The)",
      "kind":"object properties",
      "lineno":182
    },{
      "parameter":"field",
      "params":{
        "1":"A",
        "map":{
          "A":" list of geometry tables."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"?table"
          },
          "A":{
            "type":"?table"
          }
        },
        "field":{
          "1":{
            "type":"?table"
          },
          "A":{
            "type":"?table"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"property",
      "inferred":true,
      "subparams":[],
      "summary":"Get the current widget geometries.",
      "name":"current_widget_geometries",
      "type":"property",
      "args":"(A)",
      "kind":"object properties",
      "lineno":193
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"w",
        "map":{
          "w":" The wibox to move, or none to use that under the pointer"
        }
      },
      "summary":"Move the wibox under the cursor.",
      "name":"awful.mouse.wibox.move",
      "modifiers":{
        "field":{
          "1":{
            "type":"wibox"
          },
          "w":{
            "type":"wibox"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"wibox"
          },
          "w":{
            "type":"wibox"
          }
        },
        "request":[[]]
      },
      "description":"",
      "type":"staticfct",
      "section":"staticfct",
      "kind":"static module functions",
      "args":"(w)",
      "tags":{
        "request":["wibox geometry mouse.move granted Requests to move the wibox."]
      },
      "lineno":203
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"True if the left mouse button is pressed.",
      "name":"is_left_mouse_button_pressed",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":[],
      "lineno":233
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"True if the right mouse button is pressed.",
      "name":"is_right_mouse_button_pressed",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":[],
      "lineno":237
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"boolean",
        "map":{
          "boolean":""
        }
      },
      "summary":"True if the middle mouse button is pressed.",
      "name":"is_middle_mouse_button_pressed",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "boolean":[]
        },
        "field":{
          "1":[],
          "boolean":[]
        }
      },
      "description":"",
      "type":"property",
      "section":"property",
      "kind":"object properties",
      "args":"(boolean)",
      "tags":[],
      "lineno":241
    },{
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button object."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"\n\n A **global** mousebinding is one which is always present, even when there is\n no focused client. If your intent is too add a mousebinding which acts on\n the focused client do **not** use this.\n",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Add an `awful.button` based mousebinding to the global set.",
      "name":"awful.mouse.append_global_mousebinding",
      "type":"staticfct",
      "args":"(button)",
      "kind":"static module functions",
      "lineno":251
    },{
      "parameter":"param",
      "params":{
        "1":"buttons",
        "map":{
          "buttons":" A table of `awful.button` objects. Optionally, it can have\n  a `group` entry. If set, the `group` property will be set on all `awful.buttons`\n  objects."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "buttons":{
            "type":"table"
          }
        }
      },
      "description":"\n\n A **global** mousebinding is one which is always present, even when there is\n no focused client. If your intent is too add a mousebinding which acts on\n the focused client do **not** use this\n",
      "tags":{
        "see":[]
      },
      "section":"function",
      "inferred":true,
      "subparams":[],
      "summary":"Add multiple `awful.button` based mousebindings to the global set.",
      "name":"append_global_mousebindings",
      "kind":"functions",
      "lineno":266,
      "args":"(buttons)",
      "type":"function"
    },{
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button object."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Remove a mousebinding from the global set.",
      "name":"awful.mouse.remove_global_mousebinding",
      "type":"staticfct",
      "args":"(button)",
      "kind":"static module functions",
      "lineno":288
    },{
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button."
        }
      },
      "modifiers":{
        "see":[[],[]],
        "emits":[[]],
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "return":[],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "emitstparam":[[]]
      },
      "description":"",
      "tags":{
        "see":[],
        "emitstparam":["client_mousebinding::added awful.button button The button."],
        "emits":["client_mousebinding::added"]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Add an `awful.button` to the default client buttons.",
      "name":"awful.mouse.append_client_mousebinding",
      "type":"staticfct",
      "args":"(button)",
      "kind":"static module functions",
      "lineno":303
    },{
      "parameter":"field",
      "params":{
        "1":"buttons",
        "map":{
          "buttons":" A table containing `awful.button` objects."
        }
      },
      "modifiers":{
        "see":[[],[],[],[]],
        "return":[],
        "param":{
          "1":{
            "type":"table"
          },
          "buttons":{
            "type":"table"
          }
        },
        "field":{
          "1":{
            "type":"table"
          },
          "buttons":{
            "type":"table"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Add a `awful.button`s to the default client buttons.",
      "name":"awful.mouse.append_client_mousebindings",
      "type":"staticfct",
      "args":"(buttons)",
      "kind":"static module functions",
      "lineno":322
    },{
      "parameter":"field",
      "params":{
        "1":"button",
        "map":{
          "button":" The button."
        }
      },
      "modifiers":{
        "see":[[]],
        "return":[{
            "type":"boolean"
          }],
        "param":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        },
        "field":{
          "1":{
            "type":"awful.button"
          },
          "button":{
            "type":"awful.button"
          }
        }
      },
      "description":"",
      "tags":{
        "see":[]
      },
      "section":"staticfct",
      "inferred":true,
      "subparams":[],
      "summary":"Remove a mousebinding from the default client buttons.",
      "name":"awful.mouse.remove_client_mousebinding",
      "type":"staticfct",
      "args":"(button)",
      "kind":"static module functions",
      "lineno":335
    },{
      "parameter":"field",
      "params":{
        "1":"coords_table",
        "2":"silent",
        "map":{
          "silent":" Disable mouse::enter or mouse::leave events that\n  could be triggered by the pointer when moving.",
          "coords_table":" None or a table with x and y keys as mouse\n  coordinates.",
          "coords_table.x":" The mouse horizontal position",
          "coords_table.y":" The mouse vertical position"
        }
      },
      "modifiers":{
        "field":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "optchain":"nil",
            "type":"integer",
            "opt":"nil"
          },
          "3":{
            "type":"integer",
            "opt":"nil"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "silent":{
            "type":"boolean",
            "opt":"false"
          },
          "coords_table":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "coords_table.x":{
            "optchain":"nil",
            "type":"integer",
            "opt":"nil"
          },
          "coords_table.y":{
            "type":"integer",
            "opt":"nil"
          }
        },
        "return":[{
            "type":"integer"
          },{
            "type":"integer"
          },{
            "type":"table"
          }],
        "param":{
          "1":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "2":{
            "optchain":"nil",
            "type":"integer",
            "opt":"nil"
          },
          "3":{
            "type":"integer",
            "opt":"nil"
          },
          "4":{
            "type":"boolean",
            "opt":"false"
          },
          "silent":{
            "type":"boolean",
            "opt":"false"
          },
          "coords_table":{
            "optchain":"nil",
            "type":"table",
            "opt":"nil"
          },
          "coords_table.x":{
            "optchain":"nil",
            "type":"integer",
            "opt":"nil"
          },
          "coords_table.y":{
            "type":"integer",
            "opt":"nil"
          }
        },
        "usage":[[]]
      },
      "description":"\n\n\n\n![Usage example](../images/AUTOGEN_awful_mouse_coords.svg)\n\n**Usage example output**:\n\n\n",
      "tags":[],
      "section":"staticfct",
      "inferred":true,
      "subparams":{
        "coords_table":["coords_table.x","coords_table.y"]
      },
      "summary":"Get or set the mouse coords.",
      "name":"coords",
      "kind":"static module functions",
      "usage":["-- Get the position\nprint(mouse.coords().x)\n-- Change the position\nmouse.coords {\n    x = 185,\n    y = 10\n}\n"],
      "args":"([coords_table=nil[, silent=nil]])",
      "type":"staticfct",
      "lineno":417
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"cursor",
        "map":{
          "cursor":""
        }
      },
      "summary":"The resize cursor name.",
      "name":"beautiful.cursor_mouse_resize",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"cross",
            "type":"string",
            "opt":"cross"
          },
          "cursor":{
            "optchain":"cross",
            "type":"string",
            "opt":"cross"
          }
        },
        "field":{
          "1":{
            "optchain":"cross",
            "type":"string",
            "opt":"cross"
          },
          "cursor":{
            "optchain":"cross",
            "type":"string",
            "opt":"cross"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"lib.awful.mouse.resize Functions",
      "kind":"lib.awful.mouse.resize functions",
      "args":"([cursor=cross])",
      "tags":{
        "within":"lib.awful.mouse.resize Functions"
      },
      "lineno":40
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"field",
      "params":{
        "1":"cursor",
        "map":{
          "cursor":""
        }
      },
      "summary":"The move cursor name.",
      "name":"beautiful.cursor_mouse_move",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "optchain":"fleur",
            "type":"string",
            "opt":"fleur"
          },
          "cursor":{
            "optchain":"fleur",
            "type":"string",
            "opt":"fleur"
          }
        },
        "field":{
          "1":{
            "optchain":"fleur",
            "type":"string",
            "opt":"fleur"
          },
          "cursor":{
            "optchain":"fleur",
            "type":"string",
            "opt":"fleur"
          }
        }
      },
      "description":"",
      "type":"beautiful",
      "section":"lib.awful.mouse.resize Functions",
      "kind":"lib.awful.mouse.resize functions",
      "args":"([cursor=fleur])",
      "tags":{
        "within":"lib.awful.mouse.resize Functions"
      },
      "lineno":44
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"m",
        "map":{
          "m":" The mode"
        }
      },
      "summary":"Set the resize mode.",
      "name":"awful.mouse.resize.set_mode",
      "modifiers":{
        "param":{
          "1":{
            "type":"string"
          },
          "m":{
            "type":"string"
          }
        },
        "return":[]
      },
      "description":"\n The available modes are:\n\n * **live**: Resize the layout everytime the mouse moves.\n * **after**: Resize the layout only when the mouse is released.\n\n Some clients, such as XTerm, may lose information if resized too often.\n",
      "type":"function",
      "section":"lib.awful.mouse.resize Functions",
      "kind":"lib.awful.mouse.resize functions",
      "args":"(m)",
      "tags":{
        "within":"lib.awful.mouse.resize Functions"
      },
      "lineno":54
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"cb",
        "2":"context",
        "map":{
          "context":" The callback context",
          "cb":" The callback (or nil)"
        }
      },
      "summary":"Add an initialization callback.",
      "name":"awful.mouse.resize.add_enter_callback",
      "modifiers":{
        "param":{
          "1":{
            "type":"function"
          },
          "2":{
            "type":"string",
            "default":"other"
          },
          "context":{
            "type":"string",
            "default":"other"
          },
          "cb":{
            "type":"function"
          }
        },
        "return":[]
      },
      "description":"\n This callback will be executed before the mouse grabbing starts.",
      "type":"function",
      "section":"lib.awful.mouse.resize Functions",
      "kind":"lib.awful.mouse.resize functions",
      "args":"(cb, context)",
      "tags":{
        "within":"lib.awful.mouse.resize Functions"
      },
      "lineno":64
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"cb",
        "2":"context",
        "map":{
          "context":" The callback context",
          "cb":" The callback (or nil)"
        }
      },
      "summary":"Add a \"move\" callback.",
      "name":"awful.mouse.resize.add_move_callback",
      "modifiers":{
        "param":{
          "1":{
            "type":"function"
          },
          "2":{
            "type":"string",
            "default":"other"
          },
          "context":{
            "type":"string",
            "default":"other"
          },
          "cb":{
            "type":"function"
          }
        },
        "return":[]
      },
      "description":"\n This callback is executed in \"after\" mode (see `set_mode`) instead of\n applying the operation.",
      "type":"function",
      "section":"lib.awful.mouse.resize Functions",
      "kind":"lib.awful.mouse.resize functions",
      "args":"(cb, context)",
      "tags":{
        "within":"lib.awful.mouse.resize Functions"
      },
      "lineno":76
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"cb",
        "2":"context",
        "map":{
          "context":" The callback context",
          "cb":" The callback (or nil)"
        }
      },
      "summary":"Add a \"leave\" callback\n This callback is executed just before the `mousegrabber` stop",
      "name":"awful.mouse.resize.add_leave_callback",
      "modifiers":{
        "param":{
          "1":{
            "type":"function"
          },
          "2":{
            "type":"string",
            "default":"other"
          },
          "context":{
            "type":"string",
            "default":"other"
          },
          "cb":{
            "type":"function"
          }
        },
        "return":[]
      },
      "description":"",
      "type":"function",
      "section":"lib.awful.mouse.resize Functions",
      "kind":"lib.awful.mouse.resize functions",
      "args":"(cb, context)",
      "tags":{
        "within":"lib.awful.mouse.resize Functions"
      },
      "lineno":87
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"client",
        "2":"context",
        "3":"args",
        "map":{
          "args":" A set of `awful.placement` arguments.",
          "client":" A client.",
          "context":" The resizing context."
        }
      },
      "summary":"Resize the drawable.",
      "name":"awful.mouse.resize",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"client"
          },
          "2":{
            "type":"string",
            "default":"mouse.resize"
          },
          "3":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "args":{
            "optchain":"{}",
            "type":"table",
            "opt":"{}"
          },
          "client":{
            "type":"client"
          },
          "context":{
            "type":"string",
            "default":"mouse.resize"
          }
        },
        "request":[[]]
      },
      "description":"\n\n Valid `args` are:\n\n * *enter_callback*: A function called before the `mousegrabber` starts.\n * *move_callback*: A function called when the mouse moves.\n * *leave_callback*: A function called before the `mousegrabber` is released.\n * *mode*: The resize mode.\n",
      "type":"function",
      "section":"lib.awful.mouse.resize Functions",
      "kind":"lib.awful.mouse.resize functions",
      "args":"(client, context[, args={}])",
      "tags":{
        "within":"lib.awful.mouse.resize Functions",
        "request":["wibox geometry mouse.resize granted Requests to resize the wibox."]
      },
      "lineno":107
    },{
      "inferred":true,
      "subparams":[],
      "parameter":"param",
      "params":{
        "1":"c",
        "2":"snap",
        "3":"x",
        "4":"y",
        "5":"fixed_x",
        "6":"fixed_y",
        "map":{
          "snap":" The pixel to snap clients.",
          "c":" The client to snap.",
          "y":" The client y coordinate.",
          "fixed_y":" True if the client isn't allowed to move in the y direction.",
          "fixed_x":" True if the client isn't allowed to move in the x direction.",
          "x":" The client x coordinate."
        }
      },
      "summary":"Snap a client to the closest client or screen edge.",
      "name":"awful.mouse.snap",
      "modifiers":{
        "param":{
          "1":[],
          "2":[],
          "3":[],
          "4":[],
          "5":[],
          "6":[],
          "snap":[],
          "c":[],
          "y":[],
          "fixed_y":[],
          "fixed_x":[],
          "x":[]
        },
        "return":[]
      },
      "description":"",
      "type":"function",
      "section":"lib.awful.mouse.snap Functions",
      "kind":"lib.awful.mouse.snap functions",
      "args":"(c, snap, x, y, fixed_x, fixed_y)",
      "tags":{
        "within":"lib.awful.mouse.snap Functions"
      },
      "lineno":201
    }],
  "lineno":63
}