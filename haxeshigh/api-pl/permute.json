{
  "kind":"libraries",
  "name":"pl.permute",
  "mod_name":"permute",
  "inferred":true,
  "description":"\n\n Dependencies: `pl.utils`, `pl.tablex`",
  "file":"/home/cji/portless/Penlight/lua/pl/permute.lua",
  "summary":"Permutation operations.",
  "sections":{
    "by_name":[]
  },
  "tags":[],
  "lineno":5,
  "package":"pl",
  "items":[{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "a":[]
        }
      },
      "summary":"an iterator over all order-permutations of the elements of a list.",
      "lineno":19,
      "retgroups":[{
          "1":{
            "text":"an iterator which provides the next permutation as a list",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(a)",
      "type":"function",
      "name":"order_iter",
      "parameter":"param",
      "params":{
        "map":{
          "a":" list-like table"
        },
        "1":"a"
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"\n Please note that the same list is returned each time, so do not keep references!",
      "ret":["an iterator which provides the next permutation as a list"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "usage":[[]],
        "param":{
          "1":[],
          "a":[]
        },
        "return":[[]]
      },
      "summary":"construct a table containing all the order-permutations of a list.",
      "lineno":72,
      "retgroups":[{
          "1":{
            "text":"a table of tables",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(a)",
      "usage":["permute.order_table {1,2,3} --> {{2,3,1},{3,2,1},{3,1,2},{1,3,2},{2,1,3},{1,2,3}}\n"],
      "type":"function",
      "name":"order_table",
      "parameter":"param",
      "params":{
        "map":{
          "a":" list-like table"
        },
        "1":"a"
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["a table of tables"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "usage":[[]],
        "param":{
          "1":[],
          "...":[]
        },
        "return":[[]]
      },
      "summary":"an iterator over all permutations of the elements of the given lists.",
      "lineno":97,
      "retgroups":[{
          "1":{
            "text":"an iterator which provides the next permutation as return values in the same order as the provided lists, preceeded by an index",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(...)",
      "usage":["local strs = utils.pack(\"one\", nil, \"three\")  -- adds an 'n' field for nil-safety\nlocal bools = utils.pack(true, false)\nlocal iter = permute.list_iter(strs, bools)\n\nprint(iter())    --> 1, one, true\nprint(iter())    --> 2, nil, true\nprint(iter())    --> 3, three, true\nprint(iter())    --> 4, one, false\nprint(iter())    --> 5, nil, false\nprint(iter())    --> 6, three, false\n"],
      "type":"function",
      "name":"list_iter",
      "parameter":"param",
      "params":{
        "map":{
          "...":" list-like tables, they are nil-safe if a length-field `n` is provided (see `utils.pack`)"
        },
        "1":"..."
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["an iterator which provides the next permutation as return values in the same order as the provided lists, preceeded by an index"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "usage":[[]],
        "param":{
          "1":[],
          "...":[]
        },
        "return":[[]]
      },
      "summary":"construct a table containing all the permutations of a set of lists.",
      "lineno":151,
      "retgroups":[{
          "1":{
            "text":"a list of lists, the sub-lists have an 'n' field for nil-safety",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(...)",
      "usage":["local strs = utils.pack(\"one\", nil, \"three\")  -- adds an 'n' field for nil-safety\nlocal bools = utils.pack(true, false)\nlocal results = permute.list_table(strs, bools)\n-- results = {\n--   { \"one, true, n = 2 }\n--   { nil, true, n = 2 },\n--   { \"three, true, n = 2 },\n--   { \"one, false, n = 2 },\n--   { nil, false, n = 2 },\n--   { \"three\", false, n = 2 },\n-- }\n"],
      "type":"function",
      "name":"list_table",
      "parameter":"param",
      "params":{
        "map":{
          "...":" list-like tables, they are nil-safe if a length-field `n` is provided"
        },
        "1":"..."
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["a list of lists, the sub-lists have an 'n' field for nil-safety"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":{
          "1":[],
          "...":[]
        },
        "return":[],
        "see":[[]]
      },
      "summary":"deprecated.",
      "lineno":171,
      "args":"(...)",
      "section":"function",
      "name":"iter",
      "params":{
        "map":{
          "...":""
        },
        "1":"..."
      },
      "tags":{
        "see":[]
      },
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":{
          "1":[],
          "...":[]
        },
        "return":[],
        "see":[[]]
      },
      "summary":"deprecated.",
      "lineno":185,
      "args":"(...)",
      "section":"function",
      "name":"table",
      "params":{
        "map":{
          "...":""
        },
        "1":"..."
      },
      "tags":{
        "see":[]
      },
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    }],
  "type":"module",
  "modifiers":[]
}