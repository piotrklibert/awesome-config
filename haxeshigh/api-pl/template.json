{
  "kind":"libraries",
  "name":"pl.template",
  "mod_name":"template",
  "inferred":true,
  "description":"\n Originally by [Ricki Lake](http://lua-users.org/wiki/SlightlyLessSimpleLuaPreprocessor)\n\n There are two rules:\n\n  * lines starting with # are Lua\n  * otherwise, `$(expr)` is the result of evaluating `expr`\n\n Example:\n\n    #  for i = 1,3 do\n       $(i) Hello, Word!\n    #  end\n    ===>\n    1 Hello, Word!\n    2 Hello, Word!\n    3 Hello, Word!\n\n Other escape characters can be used, when the defaults conflict\n with the output language.\n\n    > for _,n in pairs{'one','two','three'} do\n    static int l_${n} (luaState *state);\n    > end\n\n See  @{03-strings.md.Another_Style_of_Template|the Guide}.\n\n Dependencies: `pl.utils`",
  "file":"/home/cji/portless/Penlight/lua/pl/template.lua",
  "summary":"A template preprocessor.",
  "sections":{
    "by_name":[]
  },
  "tags":[],
  "lineno":31,
  "package":"pl",
  "items":[{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "opt":true,
            "type":"tab",
            "optchain":true
          },
          "env":{
            "opt":true,
            "type":"tab",
            "optchain":true
          },
          "str":{
            "type":"string"
          }
        }
      },
      "summary":"expand the template using the specified environment.",
      "lineno":107,
      "retgroups":[{
          "1":{
            "text":"`rendered template + nil + source_code`, or `nil + error + source_code`. The last\n return value (`source_code`) is only returned if the debug option is used.",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(str[, env])",
      "type":"function",
      "name":"substitute",
      "parameter":"param",
      "params":{
        "1":"str",
        "2":"env",
        "map":{
          "env":" the environment",
          "str":" the template string"
        }
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"\n This function will compile and render the template. For more performant\n recurring usage use the two step approach by using `compile` and `ct:render`.\n There are six special fields in the environment table `env`\n\n   * `_parent`: continue looking up in this table (e.g. `_parent=_G`).\n   * `_brackets`: bracket pair that wraps inline Lua expressions,  default is '()'.\n   * `_escape`: character marking Lua lines, default is '#'\n   * `_inline_escape`: character marking inline Lua expression, default is '$'.\n   * `_chunk_name`: chunk name for loaded templates, used if there\n     is an error in Lua code. Default is 'TMP'.\n   * `_debug`: if truthy, the generated code will be printed upon a render error\n",
      "ret":["`rendered template + nil + source_code`, or `nil + error + source_code`. The last\n return value (`source_code`) is only returned if the debug option is used."]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "usage":[[]],
        "param":{
          "1":{
            "opt":true,
            "type":"tab",
            "optchain":true
          },
          "2":{
            "opt":true,
            "type":"tab",
            "optchain":true
          },
          "3":{
            "opt":true,
            "type":"bool",
            "optchain":true
          },
          "db":{
            "opt":true,
            "type":"bool",
            "optchain":true
          },
          "env":{
            "opt":true,
            "type":"tab",
            "optchain":true
          },
          "parent":{
            "opt":true,
            "type":"tab",
            "optchain":true
          }
        },
        "return":[[]]
      },
      "summary":"executes the previously compiled template and renders it.",
      "lineno":133,
      "retgroups":[{
          "1":{
            "text":"`rendered template + nil + source_code`, or `nil + error + source_code`. The last return value\n (`source_code`) is only returned if the template was compiled with the debug option.",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"([env[, parent[, db]]])",
      "usage":["local ct, err = template.compile(my_template)\nlocal rendered , err = ct:render(my_env, parent)\n"],
      "type":"function",
      "name":"ct:render",
      "params":{
        "1":"env",
        "2":"parent",
        "map":{
          "db":" if thruthy, it will print the code upon a render error\n (provided the template was compiled with the debug option).",
          "env":" the environment.",
          "parent":" continue looking up in this table (e.g. `parent=_G`)."
        },
        "3":"db"
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["`rendered template + nil + source_code`, or `nil + error + source_code`. The last return value\n (`source_code`) is only returned if the template was compiled with the debug option."],
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "usage":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "2":{
            "opt":true,
            "type":"tab",
            "optchain":true
          },
          "opts":{
            "opt":true,
            "type":"tab",
            "optchain":true
          },
          "str":{
            "type":"string"
          }
        },
        "return":[[]]
      },
      "summary":"compiles the template.",
      "lineno":167,
      "retgroups":[{
          "1":{
            "text":"template object, or `nil + error + source_code`",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(str[, opts])",
      "usage":["local ct, err = template.compile(my_template)\nlocal rendered , err = ct:render(my_env, parent)\n"],
      "type":"function",
      "name":"compile",
      "parameter":"param",
      "params":{
        "1":"str",
        "2":"opts",
        "map":{
          "opts":" the compilation options to use",
          "str":" the template string"
        }
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"\n Returns an object that can repeatedly be rendered without parsing/compiling\n the template again.\n The options passed in the `opts` table support the following options:\n\n   * `chunk_name`: chunk name for loaded templates, used if there\n     is an error in Lua code. Default is 'TMP'.\n   * `escape`: character marking Lua lines, default is '#'\n   * `inline_escape`: character marking inline Lua expression, default is '$'.\n   * `inline_brackets`: bracket pair that wraps inline Lua expressions, default is '()'.\n   * `newline`: string to replace newline characters, default is `nil` (not replacing newlines).\n   * `debug`: if truthy, the generated source code will be retained within the compiled template object, default is `nil`.\n",
      "ret":["template object, or `nil + error + source_code`"]
    }],
  "type":"module",
  "modifiers":[]
}