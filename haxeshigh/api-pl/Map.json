{
  "name":"pl.Map",
  "kind":"classes",
  "inferred":true,
  "description":"\n\n    > Map = require 'pl.Map'\n    > m = Map{one=1,two=2}\n    > m:update {three=3,four=4,two=20}\n    > = m == M{one=1,two=20,three=3,four=4}\n    true\n\n Dependencies: `pl.utils`, `pl.class`, `pl.tablex`, `pl.pretty`",
  "modifiers":[],
  "summary":"A Map class.",
  "sections":{
    "by_name":[]
  },
  "mod_name":"Map",
  "lineno":12,
  "tags":[],
  "package":"pl",
  "items":[{
      "name":"pl.Map.keys",
      "section":"field",
      "inferred":true,
      "description":"",
      "kind":"fields",
      "summary":"list of keys.",
      "params":{
        "map":[]
      },
      "tags":[],
      "lineno":41,
      "subparams":[],
      "args":"()",
      "parameter":"field",
      "type":"field",
      "modifiers":{
        "field":[],
        "return":[]
      }
    },{
      "name":"pl.Map.values",
      "section":"field",
      "inferred":true,
      "description":"",
      "kind":"fields",
      "summary":"list of values.",
      "params":{
        "map":[]
      },
      "tags":[],
      "lineno":44,
      "subparams":[],
      "args":"()",
      "parameter":"field",
      "type":"field",
      "modifiers":{
        "field":[],
        "return":[]
      }
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"return an iterator over all key-value pairs.",
      "lineno":47,
      "args":"()",
      "section":"Methods",
      "name":"pl.Map:iter",
      "params":{
        "map":[]
      },
      "tags":{
        "within":"Methods"
      },
      "kind":"methods",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"return a List of all key-value pairs, sorted by the keys.",
      "lineno":52,
      "args":"()",
      "section":"Methods",
      "name":"pl.Map:items",
      "params":{
        "map":[]
      },
      "tags":{
        "within":"Methods"
      },
      "kind":"methods",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "2":[],
          "key":[],
          "default":[]
        }
      },
      "summary":"set a value in the map if it doesn't exist yet.",
      "lineno":62,
      "retgroups":[{
          "1":{
            "text":"the value stored in the map (existing value, or the new value)",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(key, default)",
      "type":"function",
      "name":"pl.Map:setdefault",
      "parameter":"param",
      "params":{
        "1":"key",
        "2":"default",
        "map":{
          "key":" the key",
          "default":" value to set"
        }
      },
      "tags":{
        "within":"Methods"
      },
      "kind":"methods",
      "section":"Methods",
      "description":"",
      "ret":["the value stored in the map (existing value, or the new value)"]
    },{
      "name":"pl.Map:len",
      "description":"\n note: this is a relatively expensive operation!",
      "inferred":true,
      "subparams":[],
      "kind":"methods",
      "params":{
        "map":[]
      },
      "type":"function",
      "tags":{
        "within":"Methods"
      },
      "lineno":75,
      "summary":"size of map.",
      "args":"()",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "section":"Methods",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "key":[],
          "val":[]
        }
      },
      "summary":"put a value into the map.",
      "lineno":81,
      "args":"(key, val)",
      "section":"Methods",
      "name":"pl.Map:set",
      "params":{
        "1":"key",
        "2":"val",
        "map":{
          "key":" the key",
          "val":" the value"
        }
      },
      "tags":{
        "within":"Methods"
      },
      "kind":"methods",
      "description":"\n This will remove the key if the value is `nil`",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "key":[]
        }
      },
      "summary":"get a value from the map.",
      "lineno":88,
      "retgroups":[{
          "1":{
            "text":"the value, or nil if not found.",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(key)",
      "type":"function",
      "name":"pl.Map:get",
      "parameter":"param",
      "params":{
        "map":{
          "key":" the key"
        },
        "1":"key"
      },
      "tags":{
        "within":"Methods"
      },
      "kind":"methods",
      "section":"Methods",
      "description":"",
      "ret":["the value, or nil if not found."]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "keys":[]
        }
      },
      "summary":"get a list of values indexed by a list of keys.",
      "lineno":97,
      "retgroups":[{
          "1":{
            "text":"a new list",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(keys)",
      "type":"function",
      "name":"pl.Map:getvalues",
      "parameter":"param",
      "params":{
        "map":{
          "keys":" a list-like table of keys"
        },
        "1":"keys"
      },
      "tags":{
        "within":"Methods"
      },
      "kind":"methods",
      "section":"Methods",
      "description":"",
      "ret":["a new list"]
    },{
      "name":"pl.Map:update",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"methods",
      "params":{
        "map":{
          "table":""
        },
        "1":"table"
      },
      "type":"function",
      "tags":{
        "within":"Methods"
      },
      "lineno":104,
      "summary":"update the map using key/value pairs from another table.",
      "args":"(table)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"tab"
          },
          "table":{
            "type":"tab"
          }
        }
      },
      "section":"Methods",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "within":[],
        "param":{
          "1":{
            "type":"Map"
          },
          "m":{
            "type":"Map"
          }
        },
        "return":[]
      },
      "summary":"equality between maps.",
      "lineno":109,
      "args":"(m)",
      "section":"Metamethods",
      "name":"pl.Map:__eq",
      "params":{
        "map":{
          "m":" another map."
        },
        "1":"m"
      },
      "tags":{
        "within":"Metamethods"
      },
      "kind":"metamethods",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "within":[],
        "return":[],
        "param":[]
      },
      "summary":"string representation of a map.",
      "lineno":116,
      "args":"()",
      "section":"Metamethods",
      "name":"pl.Map:__tostring",
      "params":{
        "map":[]
      },
      "tags":{
        "within":"Metamethods"
      },
      "kind":"metamethods",
      "description":"",
      "type":"function",
      "parameter":"param"
    }],
  "type":"classmod",
  "file":"/home/cji/portless/Penlight/lua/pl/Map.lua"
}