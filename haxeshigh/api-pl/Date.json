{
  "kind":"classes",
  "name":"pl.Date",
  "modifiers":{
    "pragma":[]
  },
  "description":"\n See  @{05-dates.md|the Guide}.\n\n NOTE: the date module is deprecated! see\n https://github.com/lunarmodules/Penlight/issues/285\n\n Dependencies: `pl.class`, `pl.stringx`, `pl.utils`",
  "file":"/home/cji/portless/Penlight/lua/pl/Date.lua",
  "summary":"Date and Date Format classes.",
  "sections":{
    "by_name":[]
  },
  "mod_name":"Date",
  "lineno":11,
  "tags":{
    "pragma":"nostrip"
  },
  "items":[{
      "name":"pl.Date:Date",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"methods",
      "params":{
        "1":"t",
        "2":"...",
        "map":{
          "t":" this can be either\n\n   * `nil` or empty - use current date and time\n   * number - seconds since epoch (as returned by `os.time`). Resulting time is UTC\n   * `Date` - make a copy of this date\n   * table - table containing year, month, etc as for `os.time`. You may leave out year, month or day,\n in which case current values will be used.\n   * year (will be followed by month, day etc)\n",
          "...":"  true if  Universal Coordinated Time, or two to five numbers: month,day,hour,min,sec"
        }
      },
      "type":"function",
      "tags":{
        "within":"Methods"
      },
      "lineno":41,
      "summary":"Date constructor.",
      "args":"(t, ...)",
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "2":[],
          "t":[],
          "...":[]
        }
      },
      "section":"Methods",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "t":{
            "type":"int"
          }
        }
      },
      "summary":"set the current time of this Date object.",
      "lineno":93,
      "args":"(t)",
      "section":"function",
      "name":"Date:set",
      "params":{
        "map":{
          "t":" seconds since epoch"
        },
        "1":"t"
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "ts":{
            "type":"int"
          }
        }
      },
      "summary":"get the time zone offset from UTC.",
      "lineno":104,
      "args":"(ts)",
      "section":"function",
      "name":"Date.tzone",
      "params":{
        "map":{
          "ts":" seconds ahead of UTC"
        },
        "1":"ts"
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"convert this date to UTC.",
      "lineno":121,
      "args":"()",
      "section":"function",
      "name":"Date:toUTC",
      "params":{
        "map":[]
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"convert this UTC date to local.",
      "lineno":131,
      "args":"()",
      "section":"function",
      "name":"Date:toLocal",
      "params":{
        "map":[]
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "name":"Date:year",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":{
          "y":" Four-digit year"
        },
        "1":"y"
      },
      "type":"function",
      "tags":[],
      "lineno":146,
      "summary":"set the year.",
      "args":"(y)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "y":{
            "type":"int"
          }
        }
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:month",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":{
          "m":" month"
        },
        "1":"m"
      },
      "type":"function",
      "tags":[],
      "lineno":151,
      "summary":"set the month.",
      "args":"(m)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "m":{
            "type":"int"
          }
        }
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:day",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":{
          "d":" day"
        },
        "1":"d"
      },
      "type":"function",
      "tags":[],
      "lineno":156,
      "summary":"set the day.",
      "args":"(d)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "d":{
            "type":"int"
          }
        }
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:hour",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":{
          "h":" hour"
        },
        "1":"h"
      },
      "type":"function",
      "tags":[],
      "lineno":161,
      "summary":"set the hour.",
      "args":"(h)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "h":{
            "type":"int"
          }
        }
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:min",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":{
          "min":" minutes"
        },
        "1":"min"
      },
      "type":"function",
      "tags":[],
      "lineno":166,
      "summary":"set the minutes.",
      "args":"(min)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "min":{
            "type":"int"
          }
        }
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:sec",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":{
          "sec":" seconds"
        },
        "1":"sec"
      },
      "type":"function",
      "tags":[],
      "lineno":171,
      "summary":"set the seconds.",
      "args":"(sec)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "sec":{
            "type":"int"
          }
        }
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:yday",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":{
          "yday":" day of year"
        },
        "1":"yday"
      },
      "type":"function",
      "tags":[],
      "lineno":176,
      "summary":"set the day of year.",
      "args":"(yday)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "yday":{
            "type":"int"
          }
        }
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:year",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":{
          "y":" Four-digit year"
        },
        "1":"y"
      },
      "type":"function",
      "tags":[],
      "lineno":181,
      "summary":"get the year.",
      "args":"(y)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "y":{
            "type":"int"
          }
        }
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:month",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":[]
      },
      "type":"function",
      "tags":[],
      "lineno":185,
      "summary":"get the month.",
      "args":"()",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:day",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":[]
      },
      "type":"function",
      "tags":[],
      "lineno":189,
      "summary":"get the day.",
      "args":"()",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:hour",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":[]
      },
      "type":"function",
      "tags":[],
      "lineno":193,
      "summary":"get the hour.",
      "args":"()",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:min",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":[]
      },
      "type":"function",
      "tags":[],
      "lineno":197,
      "summary":"get the minutes.",
      "args":"()",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:sec",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":[]
      },
      "type":"function",
      "tags":[],
      "lineno":201,
      "summary":"get the seconds.",
      "args":"()",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "section":"function",
      "parameter":"param"
    },{
      "name":"Date:yday",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":[]
      },
      "type":"function",
      "tags":[],
      "lineno":206,
      "summary":"get the day of year.",
      "args":"()",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "section":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[{
            "type":"string"
          }],
        "param":{
          "1":{
            "type":"bool"
          },
          "full":{
            "type":"bool"
          }
        }
      },
      "summary":"name of day of week.",
      "lineno":222,
      "retgroups":[{
          "1":{
            "text":"name",
            "type":"string",
            "mods":{
              "type":"string"
            }
          },
          "g":0
        }],
      "args":"(full)",
      "type":"function",
      "name":"Date:weekday_name",
      "parameter":"param",
      "params":{
        "map":{
          "full":" abbreviated if true, full otherwise."
        },
        "1":"full"
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["name"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[{
            "type":"string"
          }],
        "param":{
          "1":{
            "type":"int"
          },
          "full":{
            "type":"int"
          }
        }
      },
      "summary":"name of month.",
      "lineno":229,
      "retgroups":[{
          "1":{
            "text":"name",
            "type":"string",
            "mods":{
              "type":"string"
            }
          },
          "g":0
        }],
      "args":"(full)",
      "type":"function",
      "name":"Date:month_name",
      "parameter":"param",
      "params":{
        "map":{
          "full":" abbreviated if true, full otherwise."
        },
        "1":"full"
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["name"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"is this day on a weekend?.",
      "lineno":234,
      "args":"()",
      "section":"function",
      "name":"Date:is_weekend",
      "params":{
        "map":[]
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "t":[]
        }
      },
      "summary":"add to a date object.",
      "lineno":242,
      "retgroups":[{
          "1":{
            "text":"this date",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(t)",
      "type":"function",
      "name":"Date:add",
      "parameter":"param",
      "params":{
        "map":{
          "t":" a table containing one of the following keys and a value:\n one of `year`,`month`,`day`,`hour`,`min`,`sec`"
        },
        "1":"t"
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["this date"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[[]]
      },
      "summary":"last day of the month.",
      "lineno":256,
      "retgroups":[{
          "1":{
            "text":"int day",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"()",
      "type":"function",
      "name":"Date:last_day",
      "parameter":"param",
      "params":{
        "map":[]
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["int day"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[{
            "type":"Date.Interval"
          }],
        "param":{
          "1":{
            "type":"Date"
          },
          "other":{
            "type":"Date"
          }
        }
      },
      "summary":"difference between two Date objects.",
      "lineno":270,
      "retgroups":[{
          "1":{
            "text":"object",
            "type":"Date.Interval",
            "mods":{
              "type":"Date.Interval"
            }
          },
          "g":0
        }],
      "args":"(other)",
      "type":"function",
      "name":"Date:diff",
      "parameter":"param",
      "params":{
        "map":{
          "other":" Date object"
        },
        "1":"other"
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["object"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"long numerical ISO data format version of this date.",
      "lineno":277,
      "args":"()",
      "section":"function",
      "name":"Date:__tostring",
      "params":{
        "map":[]
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"equality between Date objects.",
      "lineno":302,
      "args":"(other)",
      "section":"function",
      "name":"Date:__eq",
      "params":{
        "map":{
          "other":""
        },
        "1":"other"
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"ordering between Date objects.",
      "lineno":307,
      "args":"(other)",
      "section":"function",
      "name":"Date:__lt",
      "params":{
        "map":{
          "other":""
        },
        "1":"other"
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "name":"Date:__sub",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":[]
      },
      "type":"function",
      "tags":[],
      "lineno":313,
      "summary":"difference between Date objects.",
      "args":"()",
      "modifiers":{
        "param":[],
        "return":[]
      },
      "section":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[],
        "param":{
          "1":[],
          "other":[]
        }
      },
      "summary":"add a date and an interval.",
      "lineno":318,
      "args":"(other)",
      "section":"function",
      "name":"Date:__add",
      "params":{
        "map":{
          "other":" either a `Date.Interval` object or a table such as\n passed to `Date:add`"
        },
        "1":"other"
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "name":"Date.Interval",
      "description":"",
      "inferred":true,
      "subparams":[],
      "kind":"functions",
      "params":{
        "map":{
          "t":" an interval in seconds"
        },
        "1":"t"
      },
      "type":"function",
      "tags":[],
      "lineno":332,
      "summary":"Date.Interval constructor",
      "args":"(t)",
      "modifiers":{
        "return":[],
        "param":{
          "1":{
            "type":"int"
          },
          "t":{
            "type":"int"
          }
        }
      },
      "section":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"If it's an interval then the format is '2 hours 29 sec' etc.",
      "lineno":348,
      "args":"()",
      "section":"function",
      "name":"Date.Interval:__tostring",
      "params":{
        "map":[]
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":{
          "1":{
            "type":"string"
          },
          "fmt.":{
            "type":"string"
          }
        },
        "return":[],
        "usage":[[]]
      },
      "summary":"Date.Format constructor.",
      "lineno":400,
      "args":"(fmt.)",
      "usage":["df = Date.Format(\"yyyy-mm-dd HH:MM:SS\")\n"],
      "section":"function",
      "name":"Date.Format",
      "parameter":"param",
      "params":{
        "map":{
          "fmt.":" A string where the following fields are significant:\n\n   * d day (either d or dd)\n   * y year (either yy or yyy)\n   * m month (either m or mm)\n   * H hour (either H or HH)\n   * M minute (either M or MM)\n   * S second (either S or SS)\n\n Alternatively, if fmt is nil then this returns a flexible date parser\n that tries various date/time schemes in turn:\n\n  * [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601), like `2010-05-10 12:35:23Z` or `2008-10-03T14:30+02`\n  * times like 15:30 or 8.05pm  (assumed to be today's date)\n  * dates like 28/10/02 (European order!) or 5 Feb 2012\n  * month name like march or Mar (case-insensitive, first 3 letters); here the\n day will be 1 and the year this current year\n\n A date in format 3 can be optionally followed by a time in format 2.\n Please see test-date.lua in the tests folder for more examples."
        },
        "1":"fmt."
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function"
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[[]],
        "param":{
          "1":{
            "type":"string"
          },
          "str":{
            "type":"string"
          }
        }
      },
      "summary":"parse a string into a Date object.",
      "lineno":453,
      "retgroups":[{
          "1":{
            "text":"date object",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(str)",
      "type":"function",
      "name":"Date.Format:parse",
      "parameter":"param",
      "params":{
        "map":{
          "str":" a date string"
        },
        "1":"str"
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["date object"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "return":[[]],
        "param":{
          "1":[],
          "d":[]
        }
      },
      "summary":"convert a Date object into a string.",
      "lineno":485,
      "retgroups":[{
          "1":{
            "text":"string",
            "type":"",
            "mods":[]
          },
          "g":0
        }],
      "args":"(d)",
      "type":"function",
      "name":"Date.Format:tostring",
      "parameter":"param",
      "params":{
        "map":{
          "d":" a date object, or a time value as returned by @{os.time}"
        },
        "1":"d"
      },
      "tags":[],
      "kind":"functions",
      "section":"function",
      "description":"",
      "ret":["string"]
    },{
      "inferred":true,
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "summary":"force US order in dates like 9/11/2001",
      "lineno":500,
      "args":"(yesno)",
      "section":"function",
      "name":"Date.Format:US_order",
      "params":{
        "map":{
          "yesno":""
        },
        "1":"yesno"
      },
      "tags":[],
      "kind":"functions",
      "description":"",
      "type":"function",
      "parameter":"param"
    }],
  "package":"pl",
  "type":"classmod",
  "inferred":true
}