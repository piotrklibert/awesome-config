{
  "kind":"manual",
  "name":"01-introduction.md",
  "display_name":"Introduction",
  "postprocess":"<type 'function' is not supported by JSON.>",
  "tags":[],
  "file":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
  "section":{
    "display_name":"Simplifying Object-Oriented Programming in Lua",
    "name":"Simplifying_Object_Oriented_Programming_in_Lua",
    "lineno":1,
    "tags":[],
    "modifiers":[],
    "file":{
      "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
      "items":["<reference cycle>",{
          "display_name":"Purpose",
          "name":"Purpose",
          "lineno":1,
          "tags":[],
          "modifiers":[],
          "file":"<reference cycle>",
          "type":"section",
          "summary":""
        },{
          "name":"dumbo",
          "kind":"purpose ",
          "subparams":[],
          "modifiers":{
            "param":[],
            "return":[]
          },
          "params":{
            "map":[]
          },
          "tags":[],
          "lineno":1,
          "section":"Purpose",
          "args":"()",
          "parameter":"param",
          "type":"function"
        },{
          "display_name":"To Inject or not to Inject?",
          "name":"To_Inject_or_not_to_Inject_",
          "lineno":1,
          "tags":[],
          "modifiers":[],
          "file":"<reference cycle>",
          "type":"section",
          "summary":""
        },{
          "name":"dumbo",
          "kind":"to inject or not to inject? ",
          "subparams":[],
          "modifiers":{
            "param":[],
            "return":[]
          },
          "params":{
            "map":[]
          },
          "tags":[],
          "lineno":1,
          "section":"To Inject or not to Inject?",
          "args":"()",
          "parameter":"param",
          "type":"function"
        },{
          "display_name":"What are function arguments in Penlight?",
          "name":"What_are_function_arguments_in_Penlight_",
          "lineno":1,
          "tags":[],
          "modifiers":[],
          "file":"<reference cycle>",
          "type":"section",
          "summary":""
        },{
          "name":"dumbo",
          "kind":"what are function arguments in penlight? ",
          "subparams":[],
          "modifiers":{
            "param":[],
            "return":[]
          },
          "params":{
            "map":[]
          },
          "tags":[],
          "lineno":1,
          "section":"What are function arguments in Penlight?",
          "args":"()",
          "parameter":"param",
          "type":"function"
        },{
          "display_name":"Pros and Cons of Loopless Programming",
          "name":"Pros_and_Cons_of_Loopless_Programming",
          "lineno":1,
          "tags":[],
          "modifiers":[],
          "file":"<reference cycle>",
          "type":"section",
          "summary":""
        },{
          "name":"dumbo",
          "kind":"pros and cons of loopless programming ",
          "subparams":[],
          "modifiers":{
            "param":[],
            "return":[]
          },
          "params":{
            "map":[]
          },
          "tags":[],
          "lineno":1,
          "section":"Pros and Cons of Loopless Programming",
          "args":"()",
          "parameter":"param",
          "type":"function"
        },{
          "display_name":"Generally useful functions",
          "name":"Generally_useful_functions_",
          "lineno":1,
          "tags":[],
          "modifiers":[],
          "file":"<reference cycle>",
          "type":"section",
          "summary":""
        },{
          "name":"dumbo",
          "kind":"generally useful functions ",
          "subparams":[],
          "modifiers":{
            "param":[],
            "return":[]
          },
          "params":{
            "map":[]
          },
          "tags":[],
          "lineno":1,
          "section":"Generally useful functions",
          "args":"()",
          "parameter":"param",
          "type":"function"
        },{
          "display_name":"Application Support",
          "name":"Application_Support",
          "lineno":1,
          "tags":[],
          "modifiers":[],
          "file":"<reference cycle>",
          "type":"section",
          "summary":""
        },{
          "name":"dumbo",
          "kind":"application support ",
          "subparams":[],
          "modifiers":{
            "param":[],
            "return":[]
          },
          "params":{
            "map":[]
          },
          "tags":[],
          "lineno":1,
          "section":"Application Support",
          "args":"()",
          "parameter":"param",
          "type":"function"
        },"<reference cycle>",{
          "name":"dumbo",
          "kind":"simplifying object-oriented programming in lua ",
          "subparams":[],
          "modifiers":{
            "param":[],
            "return":[]
          },
          "params":{
            "map":[]
          },
          "tags":[],
          "lineno":1,
          "section":"Simplifying Object-Oriented Programming in Lua",
          "args":"()",
          "parameter":"param",
          "type":"function"
        }],
      "modules":["<reference cycle>"],
      "args":[],
      "display_name":"Introduction",
      "sections":{
        "261":"Generally_useful_functions_",
        "50":"To_Inject_or_not_to_Inject_",
        "3":"Purpose",
        "380":"Simplifying_Object_Oriented_Programming_in_Lua",
        "329":"Application_Support",
        "189":"What_are_function_arguments_in_Penlight_",
        "221":"Pros_and_Cons_of_Loopless_Programming"
      }
    },
    "type":"section",
    "summary":""
  },
  "sections":{
    "1":{
      "display_name":"Purpose",
      "name":"Purpose",
      "lineno":1,
      "tags":[],
      "modifiers":[],
      "file":{
        "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
        "items":["<reference cycle>","<reference cycle>",{
            "name":"dumbo",
            "kind":"purpose ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Purpose",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"To Inject or not to Inject?",
            "name":"To_Inject_or_not_to_Inject_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"to inject or not to inject? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"To Inject or not to Inject?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"What are function arguments in Penlight?",
            "name":"What_are_function_arguments_in_Penlight_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"what are function arguments in penlight? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"What are function arguments in Penlight?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Pros and Cons of Loopless Programming",
            "name":"Pros_and_Cons_of_Loopless_Programming",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"pros and cons of loopless programming ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Pros and Cons of Loopless Programming",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Generally useful functions",
            "name":"Generally_useful_functions_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"generally useful functions ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Generally useful functions",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Application Support",
            "name":"Application_Support",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"application support ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Application Support",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Simplifying Object-Oriented Programming in Lua",
            "name":"Simplifying_Object_Oriented_Programming_in_Lua",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"simplifying object-oriented programming in lua ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Simplifying Object-Oriented Programming in Lua",
            "args":"()",
            "parameter":"param",
            "type":"function"
          }],
        "modules":["<reference cycle>"],
        "args":[],
        "display_name":"Introduction",
        "sections":{
          "261":"Generally_useful_functions_",
          "50":"To_Inject_or_not_to_Inject_",
          "3":"Purpose",
          "380":"Simplifying_Object_Oriented_Programming_in_Lua",
          "329":"Application_Support",
          "189":"What_are_function_arguments_in_Penlight_",
          "221":"Pros_and_Cons_of_Loopless_Programming"
        }
      },
      "type":"section",
      "summary":""
    },
    "2":{
      "display_name":"To Inject or not to Inject?",
      "name":"To_Inject_or_not_to_Inject_",
      "lineno":1,
      "tags":[],
      "modifiers":[],
      "file":{
        "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
        "items":["<reference cycle>",{
            "display_name":"Purpose",
            "name":"Purpose",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"purpose ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Purpose",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },"<reference cycle>",{
            "name":"dumbo",
            "kind":"to inject or not to inject? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"To Inject or not to Inject?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"What are function arguments in Penlight?",
            "name":"What_are_function_arguments_in_Penlight_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"what are function arguments in penlight? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"What are function arguments in Penlight?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Pros and Cons of Loopless Programming",
            "name":"Pros_and_Cons_of_Loopless_Programming",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"pros and cons of loopless programming ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Pros and Cons of Loopless Programming",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Generally useful functions",
            "name":"Generally_useful_functions_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"generally useful functions ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Generally useful functions",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Application Support",
            "name":"Application_Support",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"application support ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Application Support",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Simplifying Object-Oriented Programming in Lua",
            "name":"Simplifying_Object_Oriented_Programming_in_Lua",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"simplifying object-oriented programming in lua ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Simplifying Object-Oriented Programming in Lua",
            "args":"()",
            "parameter":"param",
            "type":"function"
          }],
        "modules":["<reference cycle>"],
        "args":[],
        "display_name":"Introduction",
        "sections":{
          "261":"Generally_useful_functions_",
          "50":"To_Inject_or_not_to_Inject_",
          "3":"Purpose",
          "380":"Simplifying_Object_Oriented_Programming_in_Lua",
          "329":"Application_Support",
          "189":"What_are_function_arguments_in_Penlight_",
          "221":"Pros_and_Cons_of_Loopless_Programming"
        }
      },
      "type":"section",
      "summary":""
    },
    "3":{
      "display_name":"What are function arguments in Penlight?",
      "name":"What_are_function_arguments_in_Penlight_",
      "lineno":1,
      "tags":[],
      "modifiers":[],
      "file":{
        "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
        "items":["<reference cycle>",{
            "display_name":"Purpose",
            "name":"Purpose",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"purpose ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Purpose",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"To Inject or not to Inject?",
            "name":"To_Inject_or_not_to_Inject_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"to inject or not to inject? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"To Inject or not to Inject?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },"<reference cycle>",{
            "name":"dumbo",
            "kind":"what are function arguments in penlight? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"What are function arguments in Penlight?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Pros and Cons of Loopless Programming",
            "name":"Pros_and_Cons_of_Loopless_Programming",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"pros and cons of loopless programming ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Pros and Cons of Loopless Programming",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Generally useful functions",
            "name":"Generally_useful_functions_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"generally useful functions ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Generally useful functions",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Application Support",
            "name":"Application_Support",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"application support ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Application Support",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Simplifying Object-Oriented Programming in Lua",
            "name":"Simplifying_Object_Oriented_Programming_in_Lua",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"simplifying object-oriented programming in lua ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Simplifying Object-Oriented Programming in Lua",
            "args":"()",
            "parameter":"param",
            "type":"function"
          }],
        "modules":["<reference cycle>"],
        "args":[],
        "display_name":"Introduction",
        "sections":{
          "261":"Generally_useful_functions_",
          "50":"To_Inject_or_not_to_Inject_",
          "3":"Purpose",
          "380":"Simplifying_Object_Oriented_Programming_in_Lua",
          "329":"Application_Support",
          "189":"What_are_function_arguments_in_Penlight_",
          "221":"Pros_and_Cons_of_Loopless_Programming"
        }
      },
      "type":"section",
      "summary":""
    },
    "4":{
      "display_name":"Pros and Cons of Loopless Programming",
      "name":"Pros_and_Cons_of_Loopless_Programming",
      "lineno":1,
      "tags":[],
      "modifiers":[],
      "file":{
        "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
        "items":["<reference cycle>",{
            "display_name":"Purpose",
            "name":"Purpose",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"purpose ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Purpose",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"To Inject or not to Inject?",
            "name":"To_Inject_or_not_to_Inject_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"to inject or not to inject? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"To Inject or not to Inject?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"What are function arguments in Penlight?",
            "name":"What_are_function_arguments_in_Penlight_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"what are function arguments in penlight? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"What are function arguments in Penlight?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },"<reference cycle>",{
            "name":"dumbo",
            "kind":"pros and cons of loopless programming ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Pros and Cons of Loopless Programming",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Generally useful functions",
            "name":"Generally_useful_functions_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"generally useful functions ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Generally useful functions",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Application Support",
            "name":"Application_Support",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"application support ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Application Support",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Simplifying Object-Oriented Programming in Lua",
            "name":"Simplifying_Object_Oriented_Programming_in_Lua",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"simplifying object-oriented programming in lua ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Simplifying Object-Oriented Programming in Lua",
            "args":"()",
            "parameter":"param",
            "type":"function"
          }],
        "modules":["<reference cycle>"],
        "args":[],
        "display_name":"Introduction",
        "sections":{
          "261":"Generally_useful_functions_",
          "50":"To_Inject_or_not_to_Inject_",
          "3":"Purpose",
          "380":"Simplifying_Object_Oriented_Programming_in_Lua",
          "329":"Application_Support",
          "189":"What_are_function_arguments_in_Penlight_",
          "221":"Pros_and_Cons_of_Loopless_Programming"
        }
      },
      "type":"section",
      "summary":""
    },
    "5":{
      "display_name":"Generally useful functions",
      "name":"Generally_useful_functions_",
      "lineno":1,
      "tags":[],
      "modifiers":[],
      "file":{
        "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
        "items":["<reference cycle>",{
            "display_name":"Purpose",
            "name":"Purpose",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"purpose ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Purpose",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"To Inject or not to Inject?",
            "name":"To_Inject_or_not_to_Inject_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"to inject or not to inject? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"To Inject or not to Inject?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"What are function arguments in Penlight?",
            "name":"What_are_function_arguments_in_Penlight_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"what are function arguments in penlight? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"What are function arguments in Penlight?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Pros and Cons of Loopless Programming",
            "name":"Pros_and_Cons_of_Loopless_Programming",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"pros and cons of loopless programming ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Pros and Cons of Loopless Programming",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },"<reference cycle>",{
            "name":"dumbo",
            "kind":"generally useful functions ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Generally useful functions",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Application Support",
            "name":"Application_Support",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"application support ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Application Support",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Simplifying Object-Oriented Programming in Lua",
            "name":"Simplifying_Object_Oriented_Programming_in_Lua",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"simplifying object-oriented programming in lua ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Simplifying Object-Oriented Programming in Lua",
            "args":"()",
            "parameter":"param",
            "type":"function"
          }],
        "modules":["<reference cycle>"],
        "args":[],
        "display_name":"Introduction",
        "sections":{
          "261":"Generally_useful_functions_",
          "50":"To_Inject_or_not_to_Inject_",
          "3":"Purpose",
          "380":"Simplifying_Object_Oriented_Programming_in_Lua",
          "329":"Application_Support",
          "189":"What_are_function_arguments_in_Penlight_",
          "221":"Pros_and_Cons_of_Loopless_Programming"
        }
      },
      "type":"section",
      "summary":""
    },
    "6":{
      "display_name":"Application Support",
      "name":"Application_Support",
      "lineno":1,
      "tags":[],
      "modifiers":[],
      "file":{
        "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
        "items":["<reference cycle>",{
            "display_name":"Purpose",
            "name":"Purpose",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"purpose ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Purpose",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"To Inject or not to Inject?",
            "name":"To_Inject_or_not_to_Inject_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"to inject or not to inject? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"To Inject or not to Inject?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"What are function arguments in Penlight?",
            "name":"What_are_function_arguments_in_Penlight_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"what are function arguments in penlight? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"What are function arguments in Penlight?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Pros and Cons of Loopless Programming",
            "name":"Pros_and_Cons_of_Loopless_Programming",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"pros and cons of loopless programming ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Pros and Cons of Loopless Programming",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Generally useful functions",
            "name":"Generally_useful_functions_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"generally useful functions ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Generally useful functions",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },"<reference cycle>",{
            "name":"dumbo",
            "kind":"application support ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Application Support",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Simplifying Object-Oriented Programming in Lua",
            "name":"Simplifying_Object_Oriented_Programming_in_Lua",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"simplifying object-oriented programming in lua ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Simplifying Object-Oriented Programming in Lua",
            "args":"()",
            "parameter":"param",
            "type":"function"
          }],
        "modules":["<reference cycle>"],
        "args":[],
        "display_name":"Introduction",
        "sections":{
          "261":"Generally_useful_functions_",
          "50":"To_Inject_or_not_to_Inject_",
          "3":"Purpose",
          "380":"Simplifying_Object_Oriented_Programming_in_Lua",
          "329":"Application_Support",
          "189":"What_are_function_arguments_in_Penlight_",
          "221":"Pros_and_Cons_of_Loopless_Programming"
        }
      },
      "type":"section",
      "summary":""
    },
    "7":{
      "display_name":"Simplifying Object-Oriented Programming in Lua",
      "name":"Simplifying_Object_Oriented_Programming_in_Lua",
      "lineno":1,
      "tags":[],
      "modifiers":[],
      "file":{
        "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
        "items":["<reference cycle>",{
            "display_name":"Purpose",
            "name":"Purpose",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"purpose ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Purpose",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"To Inject or not to Inject?",
            "name":"To_Inject_or_not_to_Inject_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"to inject or not to inject? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"To Inject or not to Inject?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"What are function arguments in Penlight?",
            "name":"What_are_function_arguments_in_Penlight_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"what are function arguments in penlight? ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"What are function arguments in Penlight?",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Pros and Cons of Loopless Programming",
            "name":"Pros_and_Cons_of_Loopless_Programming",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"pros and cons of loopless programming ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Pros and Cons of Loopless Programming",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Generally useful functions",
            "name":"Generally_useful_functions_",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"generally useful functions ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Generally useful functions",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },{
            "display_name":"Application Support",
            "name":"Application_Support",
            "lineno":1,
            "tags":[],
            "modifiers":[],
            "file":"<reference cycle>",
            "type":"section",
            "summary":""
          },{
            "name":"dumbo",
            "kind":"application support ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Application Support",
            "args":"()",
            "parameter":"param",
            "type":"function"
          },"<reference cycle>",{
            "name":"dumbo",
            "kind":"simplifying object-oriented programming in lua ",
            "subparams":[],
            "modifiers":{
              "param":[],
              "return":[]
            },
            "params":{
              "map":[]
            },
            "tags":[],
            "lineno":1,
            "section":"Simplifying Object-Oriented Programming in Lua",
            "args":"()",
            "parameter":"param",
            "type":"function"
          }],
        "modules":["<reference cycle>"],
        "args":[],
        "display_name":"Introduction",
        "sections":{
          "261":"Generally_useful_functions_",
          "50":"To_Inject_or_not_to_Inject_",
          "3":"Purpose",
          "380":"Simplifying_Object_Oriented_Programming_in_Lua",
          "329":"Application_Support",
          "189":"What_are_function_arguments_in_Penlight_",
          "221":"Pros_and_Cons_of_Loopless_Programming"
        }
      },
      "type":"section",
      "summary":""
    },
    "by_name":{
      "Purpose":{
        "display_name":"Purpose",
        "name":"Purpose",
        "lineno":1,
        "tags":[],
        "modifiers":[],
        "file":{
          "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
          "items":["<reference cycle>","<reference cycle>",{
              "name":"dumbo",
              "kind":"purpose ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Purpose",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"To Inject or not to Inject?",
              "name":"To_Inject_or_not_to_Inject_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"to inject or not to inject? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"To Inject or not to Inject?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"What are function arguments in Penlight?",
              "name":"What_are_function_arguments_in_Penlight_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"what are function arguments in penlight? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"What are function arguments in Penlight?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Pros and Cons of Loopless Programming",
              "name":"Pros_and_Cons_of_Loopless_Programming",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"pros and cons of loopless programming ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Pros and Cons of Loopless Programming",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Generally useful functions",
              "name":"Generally_useful_functions_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"generally useful functions ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Generally useful functions",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Application Support",
              "name":"Application_Support",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"application support ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Application Support",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Simplifying Object-Oriented Programming in Lua",
              "name":"Simplifying_Object_Oriented_Programming_in_Lua",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"simplifying object-oriented programming in lua ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Simplifying Object-Oriented Programming in Lua",
              "args":"()",
              "parameter":"param",
              "type":"function"
            }],
          "modules":["<reference cycle>"],
          "args":[],
          "display_name":"Introduction",
          "sections":{
            "261":"Generally_useful_functions_",
            "50":"To_Inject_or_not_to_Inject_",
            "3":"Purpose",
            "380":"Simplifying_Object_Oriented_Programming_in_Lua",
            "329":"Application_Support",
            "189":"What_are_function_arguments_in_Penlight_",
            "221":"Pros_and_Cons_of_Loopless_Programming"
          }
        },
        "type":"section",
        "summary":""
      },
      "Pros_and_Cons_of_Loopless_Programming":{
        "display_name":"Pros and Cons of Loopless Programming",
        "name":"Pros_and_Cons_of_Loopless_Programming",
        "lineno":1,
        "tags":[],
        "modifiers":[],
        "file":{
          "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
          "items":["<reference cycle>",{
              "display_name":"Purpose",
              "name":"Purpose",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"purpose ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Purpose",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"To Inject or not to Inject?",
              "name":"To_Inject_or_not_to_Inject_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"to inject or not to inject? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"To Inject or not to Inject?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"What are function arguments in Penlight?",
              "name":"What_are_function_arguments_in_Penlight_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"what are function arguments in penlight? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"What are function arguments in Penlight?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },"<reference cycle>",{
              "name":"dumbo",
              "kind":"pros and cons of loopless programming ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Pros and Cons of Loopless Programming",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Generally useful functions",
              "name":"Generally_useful_functions_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"generally useful functions ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Generally useful functions",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Application Support",
              "name":"Application_Support",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"application support ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Application Support",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Simplifying Object-Oriented Programming in Lua",
              "name":"Simplifying_Object_Oriented_Programming_in_Lua",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"simplifying object-oriented programming in lua ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Simplifying Object-Oriented Programming in Lua",
              "args":"()",
              "parameter":"param",
              "type":"function"
            }],
          "modules":["<reference cycle>"],
          "args":[],
          "display_name":"Introduction",
          "sections":{
            "261":"Generally_useful_functions_",
            "50":"To_Inject_or_not_to_Inject_",
            "3":"Purpose",
            "380":"Simplifying_Object_Oriented_Programming_in_Lua",
            "329":"Application_Support",
            "189":"What_are_function_arguments_in_Penlight_",
            "221":"Pros_and_Cons_of_Loopless_Programming"
          }
        },
        "type":"section",
        "summary":""
      },
      "Generally_useful_functions":{
        "display_name":"Generally useful functions",
        "name":"Generally_useful_functions_",
        "lineno":1,
        "tags":[],
        "modifiers":[],
        "file":{
          "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
          "items":["<reference cycle>",{
              "display_name":"Purpose",
              "name":"Purpose",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"purpose ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Purpose",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"To Inject or not to Inject?",
              "name":"To_Inject_or_not_to_Inject_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"to inject or not to inject? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"To Inject or not to Inject?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"What are function arguments in Penlight?",
              "name":"What_are_function_arguments_in_Penlight_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"what are function arguments in penlight? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"What are function arguments in Penlight?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Pros and Cons of Loopless Programming",
              "name":"Pros_and_Cons_of_Loopless_Programming",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"pros and cons of loopless programming ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Pros and Cons of Loopless Programming",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },"<reference cycle>",{
              "name":"dumbo",
              "kind":"generally useful functions ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Generally useful functions",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Application Support",
              "name":"Application_Support",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"application support ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Application Support",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Simplifying Object-Oriented Programming in Lua",
              "name":"Simplifying_Object_Oriented_Programming_in_Lua",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"simplifying object-oriented programming in lua ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Simplifying Object-Oriented Programming in Lua",
              "args":"()",
              "parameter":"param",
              "type":"function"
            }],
          "modules":["<reference cycle>"],
          "args":[],
          "display_name":"Introduction",
          "sections":{
            "261":"Generally_useful_functions_",
            "50":"To_Inject_or_not_to_Inject_",
            "3":"Purpose",
            "380":"Simplifying_Object_Oriented_Programming_in_Lua",
            "329":"Application_Support",
            "189":"What_are_function_arguments_in_Penlight_",
            "221":"Pros_and_Cons_of_Loopless_Programming"
          }
        },
        "type":"section",
        "summary":""
      },
      "Simplifying_Object_Oriented_Programming_in_Lua":{
        "display_name":"Simplifying Object-Oriented Programming in Lua",
        "name":"Simplifying_Object_Oriented_Programming_in_Lua",
        "lineno":1,
        "tags":[],
        "modifiers":[],
        "file":{
          "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
          "items":["<reference cycle>",{
              "display_name":"Purpose",
              "name":"Purpose",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"purpose ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Purpose",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"To Inject or not to Inject?",
              "name":"To_Inject_or_not_to_Inject_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"to inject or not to inject? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"To Inject or not to Inject?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"What are function arguments in Penlight?",
              "name":"What_are_function_arguments_in_Penlight_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"what are function arguments in penlight? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"What are function arguments in Penlight?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Pros and Cons of Loopless Programming",
              "name":"Pros_and_Cons_of_Loopless_Programming",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"pros and cons of loopless programming ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Pros and Cons of Loopless Programming",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Generally useful functions",
              "name":"Generally_useful_functions_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"generally useful functions ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Generally useful functions",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Application Support",
              "name":"Application_Support",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"application support ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Application Support",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },"<reference cycle>",{
              "name":"dumbo",
              "kind":"simplifying object-oriented programming in lua ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Simplifying Object-Oriented Programming in Lua",
              "args":"()",
              "parameter":"param",
              "type":"function"
            }],
          "modules":["<reference cycle>"],
          "args":[],
          "display_name":"Introduction",
          "sections":{
            "261":"Generally_useful_functions_",
            "50":"To_Inject_or_not_to_Inject_",
            "3":"Purpose",
            "380":"Simplifying_Object_Oriented_Programming_in_Lua",
            "329":"Application_Support",
            "189":"What_are_function_arguments_in_Penlight_",
            "221":"Pros_and_Cons_of_Loopless_Programming"
          }
        },
        "type":"section",
        "summary":""
      },
      "To_Inject_or_not_to_Inject_":{
        "display_name":"To Inject or not to Inject?",
        "name":"To_Inject_or_not_to_Inject_",
        "lineno":1,
        "tags":[],
        "modifiers":[],
        "file":{
          "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
          "items":["<reference cycle>",{
              "display_name":"Purpose",
              "name":"Purpose",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"purpose ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Purpose",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },"<reference cycle>",{
              "name":"dumbo",
              "kind":"to inject or not to inject? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"To Inject or not to Inject?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"What are function arguments in Penlight?",
              "name":"What_are_function_arguments_in_Penlight_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"what are function arguments in penlight? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"What are function arguments in Penlight?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Pros and Cons of Loopless Programming",
              "name":"Pros_and_Cons_of_Loopless_Programming",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"pros and cons of loopless programming ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Pros and Cons of Loopless Programming",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Generally useful functions",
              "name":"Generally_useful_functions_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"generally useful functions ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Generally useful functions",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Application Support",
              "name":"Application_Support",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"application support ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Application Support",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Simplifying Object-Oriented Programming in Lua",
              "name":"Simplifying_Object_Oriented_Programming_in_Lua",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"simplifying object-oriented programming in lua ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Simplifying Object-Oriented Programming in Lua",
              "args":"()",
              "parameter":"param",
              "type":"function"
            }],
          "modules":["<reference cycle>"],
          "args":[],
          "display_name":"Introduction",
          "sections":{
            "261":"Generally_useful_functions_",
            "50":"To_Inject_or_not_to_Inject_",
            "3":"Purpose",
            "380":"Simplifying_Object_Oriented_Programming_in_Lua",
            "329":"Application_Support",
            "189":"What_are_function_arguments_in_Penlight_",
            "221":"Pros_and_Cons_of_Loopless_Programming"
          }
        },
        "type":"section",
        "summary":""
      },
      "Application_Support":{
        "display_name":"Application Support",
        "name":"Application_Support",
        "lineno":1,
        "tags":[],
        "modifiers":[],
        "file":{
          "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
          "items":["<reference cycle>",{
              "display_name":"Purpose",
              "name":"Purpose",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"purpose ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Purpose",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"To Inject or not to Inject?",
              "name":"To_Inject_or_not_to_Inject_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"to inject or not to inject? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"To Inject or not to Inject?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"What are function arguments in Penlight?",
              "name":"What_are_function_arguments_in_Penlight_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"what are function arguments in penlight? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"What are function arguments in Penlight?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Pros and Cons of Loopless Programming",
              "name":"Pros_and_Cons_of_Loopless_Programming",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"pros and cons of loopless programming ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Pros and Cons of Loopless Programming",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Generally useful functions",
              "name":"Generally_useful_functions_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"generally useful functions ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Generally useful functions",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },"<reference cycle>",{
              "name":"dumbo",
              "kind":"application support ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Application Support",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Simplifying Object-Oriented Programming in Lua",
              "name":"Simplifying_Object_Oriented_Programming_in_Lua",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"simplifying object-oriented programming in lua ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Simplifying Object-Oriented Programming in Lua",
              "args":"()",
              "parameter":"param",
              "type":"function"
            }],
          "modules":["<reference cycle>"],
          "args":[],
          "display_name":"Introduction",
          "sections":{
            "261":"Generally_useful_functions_",
            "50":"To_Inject_or_not_to_Inject_",
            "3":"Purpose",
            "380":"Simplifying_Object_Oriented_Programming_in_Lua",
            "329":"Application_Support",
            "189":"What_are_function_arguments_in_Penlight_",
            "221":"Pros_and_Cons_of_Loopless_Programming"
          }
        },
        "type":"section",
        "summary":""
      },
      "What_are_function_arguments_in_Penlight_":{
        "display_name":"What are function arguments in Penlight?",
        "name":"What_are_function_arguments_in_Penlight_",
        "lineno":1,
        "tags":[],
        "modifiers":[],
        "file":{
          "filename":"/home/cji/portless/Penlight/docs_topics/01-introduction.md",
          "items":["<reference cycle>",{
              "display_name":"Purpose",
              "name":"Purpose",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"purpose ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Purpose",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"To Inject or not to Inject?",
              "name":"To_Inject_or_not_to_Inject_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"to inject or not to inject? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"To Inject or not to Inject?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },"<reference cycle>",{
              "name":"dumbo",
              "kind":"what are function arguments in penlight? ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"What are function arguments in Penlight?",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Pros and Cons of Loopless Programming",
              "name":"Pros_and_Cons_of_Loopless_Programming",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"pros and cons of loopless programming ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Pros and Cons of Loopless Programming",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Generally useful functions",
              "name":"Generally_useful_functions_",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"generally useful functions ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Generally useful functions",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Application Support",
              "name":"Application_Support",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"application support ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Application Support",
              "args":"()",
              "parameter":"param",
              "type":"function"
            },{
              "display_name":"Simplifying Object-Oriented Programming in Lua",
              "name":"Simplifying_Object_Oriented_Programming_in_Lua",
              "lineno":1,
              "tags":[],
              "modifiers":[],
              "file":"<reference cycle>",
              "type":"section",
              "summary":""
            },{
              "name":"dumbo",
              "kind":"simplifying object-oriented programming in lua ",
              "subparams":[],
              "modifiers":{
                "param":[],
                "return":[]
              },
              "params":{
                "map":[]
              },
              "tags":[],
              "lineno":1,
              "section":"Simplifying Object-Oriented Programming in Lua",
              "args":"()",
              "parameter":"param",
              "type":"function"
            }],
          "modules":["<reference cycle>"],
          "args":[],
          "display_name":"Introduction",
          "sections":{
            "261":"Generally_useful_functions_",
            "50":"To_Inject_or_not_to_Inject_",
            "3":"Purpose",
            "380":"Simplifying_Object_Oriented_Programming_in_Lua",
            "329":"Application_Support",
            "189":"What_are_function_arguments_in_Penlight_",
            "221":"Pros_and_Cons_of_Loopless_Programming"
          }
        },
        "type":"section",
        "summary":""
      }
    }
  },
  "items":[{
      "name":"dumbo",
      "kind":"purpose ",
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "params":{
        "map":[]
      },
      "tags":[],
      "lineno":1,
      "section":"Purpose",
      "args":"()",
      "parameter":"param",
      "type":"function"
    },{
      "name":"dumbo",
      "kind":"to inject or not to inject? ",
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "params":{
        "map":[]
      },
      "tags":[],
      "lineno":1,
      "section":"To Inject or not to Inject?",
      "args":"()",
      "parameter":"param",
      "type":"function"
    },{
      "name":"dumbo",
      "kind":"what are function arguments in penlight? ",
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "params":{
        "map":[]
      },
      "tags":[],
      "lineno":1,
      "section":"What are function arguments in Penlight?",
      "args":"()",
      "parameter":"param",
      "type":"function"
    },{
      "name":"dumbo",
      "kind":"pros and cons of loopless programming ",
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "params":{
        "map":[]
      },
      "tags":[],
      "lineno":1,
      "section":"Pros and Cons of Loopless Programming",
      "args":"()",
      "parameter":"param",
      "type":"function"
    },{
      "name":"dumbo",
      "kind":"generally useful functions ",
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "params":{
        "map":[]
      },
      "tags":[],
      "lineno":1,
      "section":"Generally useful functions",
      "args":"()",
      "parameter":"param",
      "type":"function"
    },{
      "name":"dumbo",
      "kind":"application support ",
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "params":{
        "map":[]
      },
      "tags":[],
      "lineno":1,
      "section":"Application Support",
      "args":"()",
      "parameter":"param",
      "type":"function"
    },{
      "name":"dumbo",
      "kind":"simplifying object-oriented programming in lua ",
      "subparams":[],
      "modifiers":{
        "param":[],
        "return":[]
      },
      "params":{
        "map":[]
      },
      "tags":[],
      "lineno":1,
      "section":"Simplifying Object-Oriented Programming in Lua",
      "args":"()",
      "parameter":"param",
      "type":"function"
    }],
  "lineno":1,
  "mod_name":"01-introduction.md",
  "package":"",
  "modifiers":[],
  "type":"topic",
  "body":"## Introduction\n\n### Purpose\n\nIt is often said of Lua that it does not include batteries. That is because the\ngoal of Lua is to produce a lean expressive language that will be used on all\nsorts of machines, (some of which don't even have hierarchical filesystems). The\nLua language is the equivalent of an operating system kernel; the creators of Lua\ndo not see it as their responsibility to create a full software ecosystem around\nthe language. That is the role of the community.\n\nA principle of software design is to recognize common patterns and reuse them. If\nyou find yourself writing things like `io.write(string.format('the answer is %d\n',42))` more than a number of times then it becomes useful just to define a\nfunction `printf`. This is good, not just because repeated code is harder to\nmaintain, but because such code is easier to read, once people understand your\nlibraries.\n\nPenlight captures many such code patterns, so that the intent of your code\nbecomes clearer. For instance, a Lua idiom to copy a table is `{unpack(t)}`, but\nthis will only work for 'small' tables (for a given value of 'small') so it is\nnot very robust. Also, the intent is not clear. So `tablex.deepcopy` is provided,\nwhich will also copy nested tables and and associated metatables, so it can be\nused to clone complex objects.\n\nThe default error handling policy follows that of the Lua standard libraries: if\na argument is the wrong type, then an error will be thrown, but otherwise we\nreturn `nil,message` if there is a problem. There are some exceptions; functions\nlike `input.fields` default to shutting down the program immediately with a\nuseful message. This is more appropriate behaviour for a _script_ than providing\na stack trace. (However, this default can be changed.) The lexer functions always\nthrow errors, to simplify coding, and so should be wrapped in `pcall`.\n\nIf you are used to Python conventions, please note that all indices consistently\nstart at 1.\n\nThe Lua function `table.foreach` has been deprecated in favour of the `for in`\nstatement, but such an operation becomes particularly useful with the\nhigher-order function support in Penlight. Note that `tablex.foreach` reverses\nthe order, so that the function is passed the value and then the key. Although\nperverse, this matches the intended use better.\n\nThe only important external dependence of Penlight is\n[LuaFileSystem](http://keplerproject.github.com/luafilesystem/manual.html)\n(`lfs`), and if you want `dir.copyfile` to work cleanly on Windows, you will need\neither [alien](http://alien.luaforge.net/) or be using\n[LuaJIT](http://luajit.org) as well. (The fallback is to call the equivalent\nshell commands.)\n\n### To Inject or not to Inject?\n\nIt was realized a long time ago that large programs needed a way to keep names\ndistinct by putting them into tables (Lua), namespaces (C++) or modules\n(Python).  It is obviously impossible to run a company where everyone is called\n'Bruce', except in Monty Python skits. These 'namespace clashes' are more of a\nproblem in a simple language like Lua than in C++, because C++ does more\ncomplicated lookup over 'injected namespaces'.  However, in a small group of\nfriends, 'Bruce' is usually unique, so in particular situations it's useful to\ndrop the formality and not use last names. It depends entirely on what kind of\nprogram you are writing, whether it is a ten line script or a ten thousand line\nprogram.\n\nSo the Penlight library provides the formal way and the informal way, without\nimposing any preference. You can do it formally like:\n\n    local utils = require 'pl.utils'\n    utils.printf(\"%s\\n\",\"hello, world!\")\n\nor informally like:\n\n    require 'pl'\n    utils.printf(\"%s\\n\",\"That feels better\")\n\n`require 'pl'` makes all the separate Penlight modules available, without needing\nto require them each individually.\n\nGenerally, the formal way is better when writing modules, since then there are no\nglobal side-effects and the dependencies of your module are made explicit.\n\nAndrew Starks has contributed another way, which balances nicely between the\nformal need to keep the global table uncluttered and the informal need for\nconvenience. `require'pl.import_into'` returns a function, which accepts a table\nfor injecting Penlight into, or if no table is given, it passes back a new one.\n\n    local pl = require'pl.import_into'()\n\nThe table `pl` is a 'lazy table' which loads modules as needed, so we can then\nuse `pl.utils.printf` and so forth, without an explicit `require' or harming any\nglobals.\n\nIf you are using `_ENV` with Lua 5.2 to define modules, then here is a way to\nmake Penlight available within a module:\n\n    local _ENV,M = require 'pl.import_into' ()\n\n    function answer ()\n        -- all the Penlight modules are available!\n        return pretty.write(utils.split '10 20  30', '')\n    end\n\n    return M\n\nThe default is to put Penlight into `\\_ENV`, which has the unintended effect of\nmaking it available from the module (much as `module(...,package.seeall)` does).\nTo satisfy both convenience and safety, you may pass `true` to this function, and\nthen the _module_ `M` is not the same as `\\_ENV`, but only contains the exported\nfunctions.\n\nOtherwise, Penlight will _not_ bring in functions into the global table, or\nclobber standard tables like 'io'.  require('pl') will bring tables like\n'utils','tablex',etc into the global table _if they are used_. This\n'load-on-demand' strategy ensures that the whole kitchen sink is not loaded up\nfront,  so this method is as efficient as explicitly loading required modules.\n\nYou have an option to bring the `pl.stringx` methods into the standard string\ntable. All strings have a metatable that allows for automatic lookup in `string`,\nso we can say `s:upper()`. Importing `stringx` allows for its functions to also\nbe called as methods: `s:strip()`,etc:\n\n    require 'pl'\n    stringx.import()\n\nor, more explicitly:\n\n    require('pl.stringx').import()\n\nA more delicate operation is importing tables into the local environment. This is\nconvenient when the context makes the meaning of a name very clear:\n\n    > require 'pl'\n    > utils.import(math)\n    > = sin(1.2)\n    0.93203908596723\n\n`utils.import` can also be passed a module name as a string, which is first\nrequired and then imported. If used in a module, `import` will bring the symbols\ninto the module context.\n\nKeeping the global scope simple is very necessary with dynamic languages. Using\nglobal variables in a big program is always asking for trouble, especially since\nyou do  not have the spell-checking provided by a compiler. The `pl.strict`\nmodule enforces a simple rule: globals must be 'declared'.  This means that they\nmust be assigned before use; assigning to `nil` is sufficient.\n\n    > require 'pl.strict'\n    > print(x)\n    stdin:1: variable 'x' is not declared\n    > x = nil\n    > print(x)\n    nil\n\nThe `strict` module provided by Penlight is compatible with the 'load-on-demand'\nscheme used by `require 'pl`.\n\n`strict` also disallows assignment to global variables, except in the main\nprogram. Generally, modules have no business messing with global scope; if you\nmust do it, then use a call to `rawset`. Similarly, if you have to check for the\nexistence of a global, use `rawget`.\n\nIf you wish to enforce strictness globally, then just add `require 'pl.strict'`\nat the end of `pl/init.lua`, otherwise call it from your main program.\n\nAs from 1.1.0, this module provides a `strict.module` function which creates (or\nmodifies) modules so that accessing an unknown function or field causes an error.\n\nFor example,\n\n    -- mymod.lua\n    local strict = require 'pl.strict'\n    local M = strict.module (...)\n\n    function M.answer ()\n        return 42\n    end\n\n    return M\n\nIf you were to accidently type `mymod.Answer()`, then you would get a runtime\nerror: \"variable 'Answer' is not declared in 'mymod'\".\n\nThis can be applied to existing modules. You may desire to have the same level\nof checking for the Lua standard libraries:\n\n    strict.make_all_strict(_G)\n\nThereafter a typo such as `math.cosine` will give you an explicit error, rather\nthan merely returning a `nil` that will cause problems later.\n\n### What are function arguments in Penlight?\n\nMany functions in Penlight themselves take function arguments, like `map` which\napplies a function to a list, element by element.  You can use existing\nfunctions, like `math.max`, anonymous functions (like `function(x,y) return x > y\nend` ), or operations by name (e.g '*' or '..').  The module `pl.operator` exports\nall the standard Lua operations, like the Python module of the same name.\nPenlight allows these to be referred to by name, so `operator.gt` can be more\nconcisely expressed as '>'.\n\nNote that the `map` functions pass any extra arguments to the function, so we can\nhave `ls:filter('>',0)`, which is a shortcut for\n`ls:filter(function(x) return x > 0 end)`.\n\nFinally, `pl.func` supports _placeholder expressions_ in the Boost lambda style,\nso that an anonymous function to multiply the two arguments can be expressed as\n`\\_1*\\_2`.\n\nTo use them directly, note that _all_ function arguments in Penlight go through\n`utils.function_arg`. `pl.func` registers itself with this function, so that you\ncan directly use placeholder expressions with standard methods:\n\n    > _1 = func._1\n    > = List{10,20,30}:map(_1+1)\n    {11,21,31}\n\nAnother option for short anonymous functions is provided by\n`utils.string_lambda`; this is invoked automatically:\n\n    > = List{10,20,30}:map '|x| x + 1'\n    {11,21,31}\n\n### Pros and Cons of Loopless Programming\n\nThe standard loops-and-ifs 'imperative' style of programming is dominant, and\noften seems to be the 'natural' way of telling a machine what to do. It is in\nfact very much how the machine does things, but we need to take a step back and\nfind ways of expressing solutions in a higher-level way.  For instance, applying\na function to all elements of a list is a common operation:\n\n    local res = {}\n    for i = 1,#ls do\n        res[i] = fun(ls[i])\n    end\n\nThis can be efficiently and succintly expressed as `ls:map(fun)`. Not only is\nthere less typing but the intention of the code is clearer. If readers of your\ncode spend too much time trying to guess your intention by analyzing your loops,\nthen you have failed to express yourself clearly. Similarly, `ls:filter('>',0)`\nwill give you all the values in a list greater than zero. (Of course, if you\ndon't feel like using `List`, or have non-list-like tables, then `pl.tablex`\noffers the same facilities. In fact, the `List` methods are implemented using\n`tablex` functions.)\n\nA common observation is that loopless programming is less efficient, particularly\nin the way it uses memory. `ls1:map2('*',ls2):reduce '+'` will give you the dot\nproduct of two lists, but an unnecessary temporary list is created.  But\nefficiency is relative to the actual situation, it may turn out to be _fast\nenough_, or may not appear in any crucial inner loops, etc.\n\nWriting loops is 'error-prone and tedious', as Stroustrup says. But any\nhalf-decent editor can be taught to do much of that typing for you. The question\nshould actually be: is it tedious to _read_ loops?  As with natural language,\nprogrammers tend to read chunks at a time. A for-loop causes no surprise, and\nprobably little brain activity. One argument for loopless programming is the\nloops that you _do_ write stand out more, and signal 'something different\nhappening here'.  It should not be an all-or-nothing thing, since most programs\nrequire a mixture of idioms that suit the problem.  Some languages (like APL) do\nnearly everything with map and reduce operations on arrays, and so solutions can\nsometimes seem forced. Wisdom is knowing when a particular idiom makes a\nparticular problem easy to _solve_ and the solution easy to _explain_ afterwards.\n\n### Generally useful functions.\n\nThe function `printf` discussed earlier is included in `pl.utils` because it\nmakes properly formatted output easier. (There is an equivalent `fprintf` which\nalso takes a file object parameter, just like the C function.)\n\nSplitting a string using a delimiter is a fairly common operation, hence `split`.\n\nUtility functions like `is_type` help with identifying what\nkind of animal you are dealing with.\nThe Lua `type` function handles the basic types, but can't distinguish between\ndifferent kinds of objects, which are all tables. So `is_type` handles both\ncases, like `is_type(s,\"string\")` and `is_type(ls,List)`.\n\nA common pattern when working with Lua varargs is capturing all the arguments in\na table:\n\n    function t(...)\n        local args = {...}\n        ...\n    end\n\nBut this will bite you someday when `nil` is one of the arguments, since this\nwill put a 'hole' in your table. In particular, `#ls` will only give you the size\nupto the `nil` value.  Hence the need for `table.pack` - this is a new Lua 5.2\nfunction which Penlight defines also for Lua 5.1.\n\n    function t(...)\n        local args,n = table.pack(...)\n        for i = 1,n do\n          ...\n        end\n    end\n\nThe 'memoize' pattern occurs when you have a function which is expensive to call,\nbut will always return the same value subsequently. `utils.memoize` is given a\nfunction, and returns another function. This calls the function the first time,\nsaves the value for that argument, and thereafter for that argument returns the\nsaved value.  This is a more flexible alternative to building a table of values\nupfront, since in general you won't know what values are needed.\n\n    sum = utils.memoize(function(n)\n        local sum = 0\n        for i = 1,n do sum = sum + i end\n        return sum\n    end)\n    ...\n    s = sum(1e8) --takes time!\n    ...\n    s = sum(1e8) --returned saved value!\n\nPenlight is fully compatible with Lua 5.1, 5.2 and LuaJIT 2. To ensure this,\n`utils` also defines the global Lua 5.2\n[load](http://www.lua.org/work/doc/manual.html#pdf-load) function as `utils.load`\n\n * the input (either a string or a function)\n * the source name used in debug information\n * the mode is a string that can have either or both of 'b' or 't', depending on\nwhether the source is a binary chunk or text code (default is 'bt')\n * the environment for the compiled chunk\n\nUsing `utils.load` should reduce the need to call the deprecated function `setfenv`,\nand make your Lua 5.1 code 5.2-friendly.\n\nThe `utils` module exports `getfenv` and `setfenv` for\nLua 5.2 as well, based on code by Sergey Rozhenko.  Note that these functions can fail\nfor functions which don't access any globals.\n\n### Application Support\n\n`app.parse_args` is a simple command-line argument parser. If called without any\narguments, it tries to use the global `arg` array.  It returns the _flags_\n(options begining with '-') as a table of name/value pairs, and the _arguments_\nas an array.  It knows about long GNU-style flag names, e.g. `--value`, and\ngroups of short flags are understood, so that `-ab` is short for `-a -b`. The\nflags result would then look like `{value=true,a=true,b=true}`.\n\nFlags may take values. The command-line `--value=open -n10` would result in\n`{value='open',n='10'}`; generally you can use '=' or ':' to separate the flag\nfrom its value, except in the special case where a short flag is followed by an\ninteger.  Or you may specify upfront that some flags have associated values, and\nthen the values will follow the flag.\n\n\t> require 'pl'\n\t> flags,args = app.parse_args({'-o','fred','-n10','fred.txt'},{o=true})\n\t> pretty.dump(flags)\n\t{o='fred',n='10'}\n\n`parse_args` is not intelligent or psychic; it will not convert any flag values\nor arguments for you, or raise errors. For that, have a look at\n@{08-additional.md.Command_line_Programs_with_Lapp|Lapp}.\n\nAn application which consists of several files usually cannot use `require` to\nload files in the same directory as the main script.  `app.require_here()`\nensures that the Lua module path is modified so that files found locally are\nfound first. In the `examples` directory, `test-symbols.lua` uses this function\nto ensure that it can find `symbols.lua` even if it is not run from this directory.\n\n`app.appfile` will create a filename that your application can use to store its\nprivate data, based on the script name. For example, `app.appfile \"test.txt\"`\nfrom a script called `testapp.lua` produces the following file on my Windows\nmachine:\n\n    @plain\n\tC:\\Documents and Settings\\SJDonova\\.testapp\\test.txt\n\nand the equivalent on my Linux machine:\n\n    @plain\n\t/home/sdonovan/.testapp/test.txt\n\nIf `.testapp` does not exist, it will be created.\n\nPenlight makes it convenient to save application data in Lua format. You can use\n`pretty.dump(t,file)` to write a Lua table in a human-readable form to a file,\nand `pretty.read(file.read(file))` to generate the table again, using the\n`pretty` module.\n\n\n### Simplifying Object-Oriented Programming in Lua\n\nLua is similar to JavaScript in that the concept of class is not directly\nsupported by the language. In fact, Lua has a very general mechanism for\nextending the behaviour of tables which makes it straightforward to implement\nclasses. A table's behaviour is controlled by its metatable. If that metatable\nhas a `\\_\\_index` function or table, this will handle looking up anything which is\nnot found in the original table. A class is just a table with an `__index` key\npointing to itself. Creating an object involves making a table and setting its\nmetatable to the class; then when handling `obj.fun`, Lua first looks up `fun` in\nthe table `obj`, and if not found it looks it up in the class. `obj:fun(a)` is\njust short for `obj.fun(obj,a)`. So with the metatable mechanism and this bit of\nsyntactic sugar, it is straightforward to implement classic object orientation.\n\n    -- animal.lua\n\n    class = require 'pl.class'\n\n    class.Animal()\n\n    function Animal:_init(name)\n        self.name = name\n    end\n\n    function Animal:__tostring()\n      return self.name..': '..self:speak()\n    end\n\n    class.Dog(Animal)\n\n    function Dog:speak()\n      return 'bark'\n    end\n\n    class.Cat(Animal)\n\n    function Cat:_init(name,breed)\n        self:super(name)  -- must init base!\n        self.breed = breed\n    end\n\n    function Cat:speak()\n      return 'meow'\n    end\n\n    class.Lion(Cat)\n\n    function Lion:speak()\n      return 'roar'\n    end\n\n    fido = Dog('Fido')\n    felix = Cat('Felix','Tabby')\n    leo = Lion('Leo','African')\n\n    $ lua -i animal.lua\n    > = fido,felix,leo\n    Fido: bark      Felix: meow     Leo: roar\n    > = leo:is_a(Animal)\n    true\n    > = leo:is_a(Dog)\n    false\n    > = leo:is_a(Cat)\n    true\n\nAll Animal does is define `\\_\\_tostring`, which Lua will use whenever a string\nrepresentation is needed of the object. In turn, this relies on `speak`, which is\nnot defined. So it's what C++ people would call an abstract base class; the\nspecific derived classes like Dog define `speak`. Please note that _if_ derived\nclasses have their own constructors, they must explicitly call the base\nconstructor for their base class; this is conveniently available as the `super`\nmethod.\n\nNote that (as always) there are multiple ways to implement OOP in Lua; this method\nuses the classic 'a class is the __index of its objects' but does 'fat inheritance';\nmethods from the base class are copied into the new class. The advantage of this is\nthat you are not penalized for long inheritance chains, for the price of larger classes,\nbut generally objects outnumber classes! (If not, something odd is going on with your design.)\n\nAll such objects will have a `is_a` method, which looks up the inheritance chain\nto find a match.  Another form is `class_of`, which can be safely called on all\nobjects, so instead of `leo:is_a(Animal)` one can say `Animal:class_of(leo)`.\n\nThere are two ways to define a class, either `class.Name()` or `Name = class()`;\nboth work identically, except that the first form will always put the class in\nthe current environment (whether global or module); the second form provides more\nflexibility about where to store the class. The first form does _name_ the class\nby setting the `_name` field, which can be useful in identifying the objects of\nthis type later. This session illustrates the usefulness of having named classes,\nif no `__tostring` method is explicitly defined.\n\n    > class.Fred()\n    > a = Fred()\n    > = a\n    Fred: 00459330\n    > Alice = class()\n    > b = Alice()\n    > = b\n    table: 00459AE8\n    > Alice._name = 'Alice'\n    > = b\n    Alice: 00459AE8\n\nSo `Alice = class(); Alice._name = 'Alice'` is exactly the same as `class.Alice()`.\n\nThis useful notation is borrowed from Hugo Etchegoyen's\n[classlib](http://lua-users.org/wiki/MultipleInheritanceClasses) which further\nextends this concept to allow for multiple inheritance. Notice that the\nmore convenient form puts the class name in the _current environment_! That is,\nyou may use it safely within modules using the old-fashioned `module()`\nor the new `_ENV` mechanism.\n\nThere is always more than one way of doing things in Lua; some may prefer this\nstyle for creating classes:\n\n    local class = require 'pl.class'\n\n    class.Named {\n        _init = function(self,name)\n            self.name = name\n        end;\n\n        __tostring = function(self)\n            return 'boo '..self.name\n        end;\n    }\n\n    b = Named 'dog'\n    print(b)\n    --> boo dog\n\nNote that you have to explicitly declare `self` and end each function definition\nwith a semi-colon or comma, since this is a Lua table. To inherit from a base class,\nset the special field `_base` to the class in this table.\n\nPenlight provides a number of useful classes; there is `List`, which is a Lua\nclone of the standard Python list object, and `Set` which represents sets. There\nare three kinds of _map_ defined: `Map`, `MultiMap` (where a key may have\nmultiple values) and `OrderedMap` (where the order of insertion is remembered.).\nThere is nothing special about these classes and you may inherit from them.\n\nA powerful thing about dynamic languages is that you can redefine existing classes\nand functions, which is often called 'monkey patching' It's entertaining and convenient,\nbut ultimately anti-social; you may modify `List` but then any other modules using\nthis _shared_ resource can no longer be sure about its behaviour. (This is why you\nmust say `stringx.import()` explicitly if you want the extended string methods - it\nwould be a bad default.)  Lua is particularly open to modification but the\ncommunity is not as tolerant of monkey-patching as the Ruby community, say. You may\nwish to add some new methods to `List`? Cool, but that's what subclassing is for.\n\n    class.Strings(List)\n\n    function Strings:my_method()\n    ...\n    end\n\nIt's definitely more useful to define exactly how your objects behave\nin _unknown_ conditions. All classes have a `catch` method you can use to set\na handler for unknown lookups; the function you pass looks exactly like the\n`__index` metamethod.\n\n    Strings:catch(function(self,name)\n        return function() error(\"no such method \"..name,2) end\n    end)\n\nIn this case we're just customizing the error message, but\ncreative things can be done. Consider this code from `test-vector.lua`:\n\n    Strings:catch(List.default_map_with(string))\n\n    ls = Strings{'one','two','three'}\n    asserteq(ls:upper(),{'ONE','TWO','THREE'})\n    asserteq(ls:sub(1,2),{'on','tw','th'})\n\nSo we've converted a unknown method invocation into a map using the function of\nthat name found in `string`.  So for a `Vector` (which is a specialization of `List`\nfor numbers) it makes sense to make `math` the default map so that `v:sin()` makes\nsense.\n\nNote that `map` operations return a object of the same type - this is often called\n_covariance_. So `ls:upper()` itself returns a `Strings` object.\n\nThis is not _always_ what you want, but objects can always be cast to the desired type.\n(`cast` doesn't create a new object, but returns the object passed.)\n\n    local sizes = ls:map '#'\n    asserteq(sizes, {3,3,5})\n    asserteq(utils.type(sizes),'Strings')\n    asserteq(sizes:is_a(Strings),true)\n    sizes = Vector:cast(sizes)\n    asserteq(utils.type(sizes),'Vector')\n    asserteq(sizes+1,{4,4,6})\n\nAbout `utils.type`: it can only return a string for a class type if that class does\nin fact have a `_name` field.\n\n\n_Properties_ are a useful object-oriented pattern. We wish to control access to a\nfield, but don't wish to force the user of the class to say `obj:get_field()`\netc. This excerpt from `tests/test-class.lua` shows how it is done:\n\n\n    local MyProps = class(class.properties)\n    local setted_a, got_b\n\n    function MyProps:_init ()\n        self._a = 1\n        self._b = 2\n    end\n\n    function MyProps:set_a (v)\n        setted_a = true\n        self._a = v\n    end\n\n    function MyProps:get_b ()\n        got_b = true\n        return self._b\n    end\n\n    local mp = MyProps()\n\n    mp.a = 10\n\n    asserteq(mp.a,10)\n    asserteq(mp.b,2)\n    asserteq(setted_a and got_b, true)\n\nThe convention is that the internal field name is prefixed with an underscore;\nwhen reading `mp.a`, first a check for an explicit _getter_ `get_a` and then only\nlook for `_a`. Simularly, writing `mp.a` causes the _setter_ `set_a` to be used.\n\nThis is cool behaviour, but like much Lua metaprogramming, it is not free. Method\nlookup on such objects goes through `\\_\\_index` as before, but now `\\_\\_index` is a\nfunction which has to explicitly look up methods in the class, before doing any\nproperty indexing, which is not going to be as fast as field lookup. If however,\nyour accessors actually do non-trivial things, then the extra overhead could be\nworth it.\n\nThis is not really intended for _access control_ because external code can write\nto `mp._a` directly. It is possible to have this kind of control in Lua, but it\nagain comes with run-time costs.\n"
}