-- Generated by Haxe 4.0.5
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local _hx_exports = _hx_exports or {}
_hx_exports["app"] = _hx_exports["app"] or _hx_e()
local Array = _hx_e()
local Date = _hx_e()
local DateTools = _hx_e()
__lua_lib_luautf8_Utf8 = _G.require("lua-utf8")
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringTools = _hx_e()
local Sys = _hx_e()
__haxe_ds_Option = _hx_e()
__app_TaglistManager = _hx_e()
__app_Taglist = _hx_e()
__app_TaglistAnimator = _hx_e()
__app_Timers = _hx_e()
__awful_Screen = _G.require("awful.screen")
__awful_Timer = _G.require("gears.timer")
__awful_Wibox = _G.require("wibox")
__awful_Widget = _G.require("awful.widget")
__haxe_EntryPoint = _hx_e()
__haxe_MainEvent = _hx_e()
__haxe_MainLoop = _hx_e()
__haxe_io_Bytes = _hx_e()
__haxe_io_Encoding = _hx_e()
__haxe_io_Error = _hx_e()
__haxe_io_Output = _hx_e()
__lib_Inspect = _G.require("inspect")
__lua_Boot = _hx_e()
__lua_Thread = _hx_e()
__lua_UserData = _hx_e()
__lua_lib_luasocket_Socket = _G.require("socket")
__sys_io_File = _hx_e()
__sys_io_FileOutput = _hx_e()
__utils_Common = _hx_e()
__utils_FileLogger = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.prototype = _hx_a();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g3 = 0;
  while (_g3 < a.length) do 
    local i1 = a[_g3];
    _g3 = _g3 + 1;
    _g:push(i1);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _gthis = self;
  local cur_length = 0;
  local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end});
  while (i:hasNext()) do 
    _G.table.insert(tbl, Std.string(i:next()));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g2 = pos + len;
  local _g3 = self.length;
  while (_g2 < _g3) do 
    _g2 = _g2 + 1;
    local i1 = _g2 - 1;
    self[i1] = self[i1 + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g2 = i;
      local _g11 = self.length - 1;
      while (_g2 < _g11) do 
        _g2 = _g2 + 1;
        local j = _g2 - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  local _gthis = self;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

Date.new = function(year,month,day,hour,min,sec) 
  local self = _hx_new(Date.prototype)
  Date.super(self,year,month,day,hour,min,sec)
  return self
end
Date.super = function(self,year,month,day,hour,min,sec) 
  self.t = _G.os.time(_hx_o({__fields__={year=true,month=true,day=true,hour=true,min=true,sec=true},year=year,month=month + 1,day=day,hour=hour,min=min,sec=sec}));
  self.d = _G.os.date("*t", self.t);
  self.dUTC = _G.os.date("!*t", self.t);
end
Date.prototype = _hx_a();
Date.prototype.getTime = function(self) 
  do return self.t * 1000 end
end
Date.prototype.getHours = function(self) 
  do return self.d.hour end
end
Date.prototype.getMinutes = function(self) 
  do return self.d.min end
end
Date.prototype.getSeconds = function(self) 
  do return self.d.sec end
end
Date.prototype.getFullYear = function(self) 
  do return self.d.year end
end
Date.prototype.getMonth = function(self) 
  do return self.d.month - 1 end
end
Date.prototype.getDate = function(self) 
  do return self.d.day end
end
Date.prototype.getDay = function(self) 
  do return self.d.wday - 1 end
end

DateTools.new = {}
DateTools.__format_get = function(d,e) 
  local e1 = e;
  if (e1) == "%" then 
    do return "%" end;
  elseif (e1) == "A" then 
    do return DateTools.DAY_NAMES[d:getDay()] end;
  elseif (e1) == "B" then 
    do return DateTools.MONTH_NAMES[d:getMonth()] end;
  elseif (e1) == "C" then 
    do return StringTools.lpad(Std.string(Std.int(d:getFullYear() / 100)), "0", 2) end;
  elseif (e1) == "D" then 
    do return DateTools.__format(d, "%m/%d/%y") end;
  elseif (e1) == "F" then 
    do return DateTools.__format(d, "%Y-%m-%d") end;
  elseif (e1) == "I" or (e1) == "l" then 
    local hour = _G.math.fmod(d:getHours(), 12);
    do return StringTools.lpad(Std.string((function() 
      local _hx_1
      if (hour == 0) then 
      _hx_1 = 12; else 
      _hx_1 = hour; end
      return _hx_1
    end )()), (function() 
      local _hx_2
      if (e == "I") then 
      _hx_2 = "0"; else 
      _hx_2 = " "; end
      return _hx_2
    end )(), 2) end;
  elseif (e1) == "M" then 
    do return StringTools.lpad(Std.string(d:getMinutes()), "0", 2) end;
  elseif (e1) == "R" then 
    do return DateTools.__format(d, "%H:%M") end;
  elseif (e1) == "S" then 
    do return StringTools.lpad(Std.string(d:getSeconds()), "0", 2) end;
  elseif (e1) == "T" then 
    do return DateTools.__format(d, "%H:%M:%S") end;
  elseif (e1) == "Y" then 
    do return Std.string(d:getFullYear()) end;
  elseif (e1) == "a" then 
    do return DateTools.DAY_SHORT_NAMES[d:getDay()] end;
  elseif (e1) == "b" or (e1) == "h" then 
    do return DateTools.MONTH_SHORT_NAMES[d:getMonth()] end;
  elseif (e1) == "d" then 
    do return StringTools.lpad(Std.string(d:getDate()), "0", 2) end;
  elseif (e1) == "e" then 
    do return Std.string(d:getDate()) end;
  elseif (e1) == "H" or (e1) == "k" then 
    do return StringTools.lpad(Std.string(d:getHours()), (function() 
      local _hx_3
      if (e == "H") then 
      _hx_3 = "0"; else 
      _hx_3 = " "; end
      return _hx_3
    end )(), 2) end;
  elseif (e1) == "m" then 
    do return StringTools.lpad(Std.string(d:getMonth() + 1), "0", 2) end;
  elseif (e1) == "n" then 
    do return "\n" end;
  elseif (e1) == "p" then 
    if (d:getHours() > 11) then 
      do return "PM" end;
    else
      do return "AM" end;
    end;
  elseif (e1) == "r" then 
    do return DateTools.__format(d, "%I:%M:%S %p") end;
  elseif (e1) == "s" then 
    do return Std.string(Std.int(d:getTime() / 1000)) end;
  elseif (e1) == "t" then 
    do return "\t" end;
  elseif (e1) == "u" then 
    local t = d:getDay();
    if (t == 0) then 
      do return "7" end;
    else
      do return Std.string(t) end;
    end;
  elseif (e1) == "w" then 
    do return Std.string(d:getDay()) end;
  elseif (e1) == "y" then 
    do return StringTools.lpad(Std.string(_G.math.fmod(d:getFullYear(), 100)), "0", 2) end;else
  _G.error(Std.string(Std.string("Date.format %") .. Std.string(e)) .. Std.string("- not implemented yet."),0); end;
end
DateTools.__format = function(d,f) 
  local r_b = ({});
  local p = 0;
  while (true) do 
    local startIndex = p;
    if (startIndex == nil) then 
      startIndex = 1;
    else
      startIndex = startIndex + 1;
    end;
    local r = __lua_lib_luautf8_Utf8.find(f, "%", startIndex, true);
    local np = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if (np < 0) then 
      break;
    end;
    local len = np - p;
    local part;
    if (len == nil) then 
      local pos = p;
      local len1 = nil;
      len1 = __lua_lib_luautf8_Utf8.len(f);
      if (pos < 0) then 
        pos = __lua_lib_luautf8_Utf8.len(f) + pos;
      end;
      if (pos < 0) then 
        pos = 0;
      end;
      part = __lua_lib_luautf8_Utf8.sub(f, pos + 1, pos + len1);
    else
      local pos1 = p;
      local len2 = len;
      if ((len == nil) or (len > (pos1 + __lua_lib_luautf8_Utf8.len(f)))) then 
        len2 = __lua_lib_luautf8_Utf8.len(f);
      else
        if (len < 0) then 
          len2 = __lua_lib_luautf8_Utf8.len(f) + len;
        end;
      end;
      if (pos1 < 0) then 
        pos1 = __lua_lib_luautf8_Utf8.len(f) + pos1;
      end;
      if (pos1 < 0) then 
        pos1 = 0;
      end;
      part = __lua_lib_luautf8_Utf8.sub(f, pos1 + 1, pos1 + len2);
    end;
    _G.table.insert(r_b, part);
    local pos2 = np + 1;
    local len3 = 1;
    if (1 > (pos2 + __lua_lib_luautf8_Utf8.len(f))) then 
      len3 = __lua_lib_luautf8_Utf8.len(f);
    end;
    if (pos2 < 0) then 
      pos2 = __lua_lib_luautf8_Utf8.len(f) + pos2;
    end;
    if (pos2 < 0) then 
      pos2 = 0;
    end;
    _G.table.insert(r_b, Std.string(DateTools.__format_get(d, __lua_lib_luautf8_Utf8.sub(f, pos2 + 1, pos2 + len3))));
    p = np + 2;
  end;
  local len4 = __lua_lib_luautf8_Utf8.len(f) - p;
  local part1;
  if (len4 == nil) then 
    local pos3 = p;
    local len5 = nil;
    len5 = __lua_lib_luautf8_Utf8.len(f);
    if (pos3 < 0) then 
      pos3 = __lua_lib_luautf8_Utf8.len(f) + pos3;
    end;
    if (pos3 < 0) then 
      pos3 = 0;
    end;
    part1 = __lua_lib_luautf8_Utf8.sub(f, pos3 + 1, pos3 + len5);
  else
    local pos4 = p;
    local len6 = len4;
    if ((len4 == nil) or (len4 > (pos4 + __lua_lib_luautf8_Utf8.len(f)))) then 
      len6 = __lua_lib_luautf8_Utf8.len(f);
    else
      if (len4 < 0) then 
        len6 = __lua_lib_luautf8_Utf8.len(f) + len4;
      end;
    end;
    if (pos4 < 0) then 
      pos4 = __lua_lib_luautf8_Utf8.len(f) + pos4;
    end;
    if (pos4 < 0) then 
      pos4 = 0;
    end;
    part1 = __lua_lib_luautf8_Utf8.sub(f, pos4 + 1, pos4 + len6);
  end;
  _G.table.insert(r_b, part1);
  do return _G.table.concat(r_b) end;
end
DateTools.format = function(d,f) 
  do return DateTools.__format(d, f) end;
end

Math.new = {}
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.fields = function(o) 
  if (_G.type(o) == "string") then 
    do return Reflect.fields(String.prototype) end;
  else
    local _g = _hx_tab_array({}, 0);
    local f = __lua_Boot.fieldIterator(o);
    while (f:hasNext()) do 
      local f1 = f:next();
      _g:push(f1);
    end;
    do return _g end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__index = function(s,k) 
  if (k == "length") then 
    do return __lua_lib_luautf8_Utf8.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return __lua_lib_luautf8_Utf8.char(code) end;
end
String.prototype = _hx_a();
String.prototype.toUpperCase = function(self) 
  do return __lua_lib_luautf8_Utf8.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return __lua_lib_luautf8_Utf8.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex1, true);
    local p = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if ((p == -1) or (p > startIndex)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(delimiter) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(self, delimiter, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(self)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, newidx - 1));
      idx = newidx + __lua_lib_luautf8_Utf8.len(delimiter);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, __lua_lib_luautf8_Utf8.len(self)));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return __lua_lib_luautf8_Utf8.sub(self, endIndex + 1, startIndex) end;
  else
    do return __lua_lib_luautf8_Utf8.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(self)))) then 
    len = __lua_lib_luautf8_Utf8.len(self);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(self) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(self) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return __lua_lib_luautf8_Utf8.sub(self, pos + 1, pos + len) end
end

Std.new = {}
Std.string = function(s) 
  do return __lua_Boot.__string_rec(s) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

StringTools.new = {}
StringTools.lpad = function(s,c,l) 
  if (__lua_lib_luautf8_Utf8.len(c) <= 0) then 
    do return s end;
  end;
  local buf_b = ({});
  local buf_length = 0;
  l = l - __lua_lib_luautf8_Utf8.len(s);
  while (buf_length < l) do 
    local str = Std.string(c);
    _G.table.insert(buf_b, str);
    buf_length = buf_length + __lua_lib_luautf8_Utf8.len(str);
  end;
  _G.table.insert(buf_b, Std.string(s));
  do return _G.table.concat(buf_b) end;
end

Sys.new = {}
Sys.time = function() 
  do return __lua_lib_luasocket_Socket.gettime() end;
end

__haxe_ds_Option.Some = function(v) local _x = _hx_tab_array({[0]="Some",0,v,__enum__=__haxe_ds_Option}, 3); return _x; end 
__haxe_ds_Option.None = _hx_tab_array({[0]="None",1,__enum__ = __haxe_ds_Option},2)


__app_TaglistManager.new = {}
_hx_exports["app"]["TaglistManager"] = __app_TaglistManager
__app_TaglistManager.enable = function() 
  local _g = __app_TaglistManager.taglist;
  local tmp = _g[1];
  if (tmp) == 0 then 
    __app_TaglistManager.taglist = __haxe_ds_Option.Some(_g[2]:enable());
  elseif (tmp) == 1 then 
    __app_TaglistManager.taglist = __haxe_ds_Option.Some(__app_Taglist.new():enable()); end;
  do return __app_TaglistManager.taglist end;
end
__app_TaglistManager.disable = function() 
  local _g = __app_TaglistManager.taglist;
  local tmp = _g[1];
  if (tmp) == 0 then 
    _g[2]:disable();
    __app_TaglistManager.taglist = __haxe_ds_Option.None;
  elseif (tmp) == 1 then 
    _G.error("TaglistManager: Tried to call .disable(), but .enable() was not called before",0); end;
end

__app_Taglist.new = function() 
  local self = _hx_new(__app_Taglist.prototype)
  __app_Taglist.super(self)
  return self
end
__app_Taglist.super = function(self) 
  self.my_wibox = __haxe_ds_Option.None;
end
_hx_exports["app"]["Taglist"] = __app_Taglist
__app_Taglist.mkWibox = function() 
  do return __awful_Wibox(__app_Taglist.wibox_config) end;
end
__app_Taglist.mkWidget = function(s) 
  __utils_FileLogger.log("mkWidget");
  local makeTaglist = function(screen,filter) 
    local tbl = __utils_Common.mkLua();
    tbl.screen = screen;
    tbl.filter = filter;
    do return tbl end;
  end;
  local keyFunc = function(x) 
    do return x.name end;
  end;
  local ret = __utils_Common.mkLua();
  local x1 = makeTaglist(s, __utils_Common.filterIn(_hx_tab_array({[0]="1", "2", "3"}, 3), keyFunc));
  ret[1] = __awful_Widget.taglist(x1);
  local x2 = makeTaglist(s, __utils_Common.filterIn(_hx_tab_array({[0]="4", "5", "6"}, 3), keyFunc));
  ret[2] = __awful_Widget.taglist(x2);
  local x3 = makeTaglist(s, __utils_Common.filterIn(_hx_tab_array({[0]="7", "8", "9"}, 3), keyFunc));
  ret[3] = __awful_Widget.taglist(x3);
  ret.spacing = 6;
  ret.id = "grid";
  ret.layout = __awful_Wibox.layout.fixed.vertical;
  do return __awful_Wibox.widget(ret) end;
end
__app_Taglist.prototype = _hx_a();
__app_Taglist.prototype.enable = function(self) 
  if (self.my_wibox == __haxe_ds_Option.None) then 
    self.my_wibox = __haxe_ds_Option.Some(__app_Taglist.mkWibox());
  end;
  local value = self.my_wibox;
  local tmp;
  local tmp1 = value[1];
  if (tmp1) == 0 then 
    tmp = value[2];
  elseif (tmp1) == 1 then 
    _G.error("None in OptionTools.sure() call",0); end;
  self:setup(tmp, __app_Taglist.mkWidget(__awful_Screen.focused()));
  do return self end
end
__app_Taglist.prototype.disable = function(self) 
  local value = self.my_wibox;
  local wb;
  local wb1 = value[1];
  if (wb1) == 0 then 
    wb = value[2];
  elseif (wb1) == 1 then 
    _G.error("None in OptionTools.sure() call",0); end;
  wb.visible = false;
  self.my_wibox = __haxe_ds_Option.None;
  do return self end
end
__app_Taglist.prototype.setup = function(self,wibox,widget) 
  local widgetTable = __utils_Common.structToTable(_hx_o({__fields__={margins=true,layout=true},margins=15,layout=__awful_Wibox.container.margin}));
  widgetTable[1] = widget;
  local setupTable = __utils_Common.structToTable(_hx_o({__fields__={id=true,border_color=true,border_width=true,border_strategy=true,widget=true},id="bg",border_color="#919191",border_width=1,border_strategy="inner",widget=__awful_Wibox.container.background}));
  setupTable[1] = widgetTable;
  local anim = __app_TaglistAnimator.new(self);
  wibox:setup(setupTable);
  wibox:connect_signal("mouse::enter", function() 
    anim:slide("in");
    do return end;
  end);
  wibox:connect_signal("mouse::leave", function() 
    anim:slide("out");
    do return end;
  end);
  wibox.visible = true;
  do return wibox end
end

__app_TaglistAnimator.new = function(t) 
  local self = _hx_new(__app_TaglistAnimator.prototype)
  __app_TaglistAnimator.super(self,t)
  return self
end
__app_TaglistAnimator.super = function(self,t) 
  self.timers = __app_Timers.new();
  local _g = t.my_wibox;
  local tmp = _g[1];
  if (tmp) == 0 then 
    self.my_wibox = _g[2];
  elseif (tmp) == 1 then 
    _G.error("Cannot animate nonexistent widget",0); end;
end
__app_TaglistAnimator.prototype = _hx_a();
__app_TaglistAnimator.prototype.slideOut = function(self,timer) 
  local start = self.my_wibox.x;
  local iterator_x_cur = 0;
  local iterator_x_max = _G.math.ceil((__app_TaglistAnimator.slideConf.last - start) / 2);
  while (iterator_x_cur < iterator_x_max) do 
    iterator_x_cur = iterator_x_cur + 1;
    self.my_wibox:geometry(_hx_o({__fields__={x=true},x=start + ((iterator_x_cur - 1) * 2)}));
    _G.coroutine.yield();
  end;
  timer:stop();
end
__app_TaglistAnimator.prototype.slideIn = function(self,timer) 
  local _end = __app_TaglistAnimator.slideConf.init;
  local iterator_x_cur = _G.math.ceil((self.my_wibox.x - _end) / 2);
  while (iterator_x_cur > 0) do 
    iterator_x_cur = iterator_x_cur - 1;
    self.my_wibox:geometry(_hx_o({__fields__={x=true},x=_end + (iterator_x_cur * 2)}));
    _G.coroutine.yield();
  end;
  timer:stop();
end
__app_TaglistAnimator.prototype.slide = function(self,arg) 
  local _gthis = self;
  if (self.timers.slide_timer ~= __haxe_ds_Option.None) then 
    local value = self.timers.slide_timer;
    local tmp;
    local tmp1 = value[1];
    if (tmp1) == 0 then 
      tmp = value[2];
    elseif (tmp1) == 1 then 
      _G.error("None in OptionTools.sure() call",0); end;
    tmp:stop();
    self.timers.slide_timer = __haxe_ds_Option.None;
  end;
  self.generator = _G.coroutine.wrap((function() 
    local _hx_1
    if (arg == "in") then 
    _hx_1 = _hx_bind(self,self.slideIn); else 
    _hx_1 = _hx_bind(self,self.slideOut); end
    return _hx_1
  end )());
  local tmp2 = __awful_Timer.new(_hx_o({__fields__={timeout=true,callback=true,autostart=true,single_shot=true},timeout=__app_TaglistAnimator.slideConf.step_time,callback=function(t) 
    local _gthis1 = _gthis.generator;
    local value1 = _gthis.timers.slide_timer;
    local tmp3;
    local tmp4 = value1[1];
    if (tmp4) == 0 then 
      tmp3 = value1[2];
    elseif (tmp4) == 1 then 
      _G.error("None in OptionTools.sure() call",0); end;
    _gthis1(tmp3);
  end,autostart=true,single_shot=false}));
  self.timers.slide_timer = __haxe_ds_Option.Some(tmp2);
end

__app_Timers.new = function() 
  local self = _hx_new()
  __app_Timers.super(self)
  return self
end
__app_Timers.super = function(self) 
  self.slide_timer = __haxe_ds_Option.None;
end

__haxe_EntryPoint.new = {}
__haxe_EntryPoint.processEvents = function() 
  while (true) do 
    local f = __haxe_EntryPoint.pending:shift();
    if (f == nil) then 
      break;
    end;
    f();
  end;
  local time = __haxe_MainLoop.tick();
  if (not __haxe_MainLoop.hasEvents() and (__haxe_EntryPoint.threadCount == 0)) then 
    do return -1 end;
  end;
  do return time end;
end
__haxe_EntryPoint.run = function() 
  while (not (__haxe_EntryPoint.processEvents() < 0)) do 
  end;
end

__haxe_MainEvent.new = function(f,p) 
  local self = _hx_new()
  __haxe_MainEvent.super(self,f,p)
  return self
end
__haxe_MainEvent.super = function(self,f,p) 
  self.isBlocking = true;
  self.f = _hx_funcToField(f);
  self.priority = p;
  self.nextRun = -_G.math.huge;
end

__haxe_MainLoop.new = {}
__haxe_MainLoop.hasEvents = function() 
  local p = __haxe_MainLoop.pending;
  while (p ~= nil) do 
    if (p.isBlocking) then 
      do return true end;
    end;
    p = p.next;
  end;
  do return false end;
end
__haxe_MainLoop.sortEvents = function() 
  local list = __haxe_MainLoop.pending;
  if (list == nil) then 
    do return end;
  end;
  local insize = 1;
  local nmerges;
  local psize = 0;
  local qsize = 0;
  local p;
  local q;
  local e;
  local tail;
  while (true) do 
    p = list;
    list = nil;
    tail = nil;
    nmerges = 0;
    while (p ~= nil) do 
      nmerges = nmerges + 1;
      q = p;
      psize = 0;
      local _g = 0;
      local _g1 = insize;
      while (_g < _g1) do 
        _g = _g + 1;
        psize = psize + 1;
        q = q.next;
        if (q == nil) then 
          break;
        end;
      end;
      qsize = insize;
      while ((psize > 0) or ((qsize > 0) and (q ~= nil))) do 
        if (psize == 0) then 
          e = q;
          q = q.next;
          qsize = qsize - 1;
        else
          if (((qsize == 0) or (q == nil)) or ((p.priority > q.priority) or ((p.priority == q.priority) and (p.nextRun <= q.nextRun)))) then 
            e = p;
            p = p.next;
            psize = psize - 1;
          else
            e = q;
            q = q.next;
            qsize = qsize - 1;
          end;
        end;
        if (tail ~= nil) then 
          tail.next = e;
        else
          list = e;
        end;
        e.prev = tail;
        tail = e;
      end;
      p = q;
    end;
    tail.next = nil;
    if (nmerges <= 1) then 
      break;
    end;
    insize = insize * 2;
  end;
  list.prev = nil;
  __haxe_MainLoop.pending = list;
end
__haxe_MainLoop.tick = function() 
  __haxe_MainLoop.sortEvents();
  local e = __haxe_MainLoop.pending;
  local now = Sys.time();
  local wait = 1e9;
  while (e ~= nil) do 
    local next = e.next;
    local wt = e.nextRun - now;
    if (wt <= 0) then 
      wait = 0;
      if (e.f ~= nil) then 
        e:f();
      end;
    else
      if (wait > wt) then 
        wait = wt;
      end;
    end;
    e = next;
  end;
  do return wait end;
end

__haxe_io_Bytes.new = function(length,b) 
  local self = _hx_new(__haxe_io_Bytes.prototype)
  __haxe_io_Bytes.super(self,length,b)
  return self
end
__haxe_io_Bytes.super = function(self,length,b) 
  self.length = length;
  self.b = b;
end
__haxe_io_Bytes.ofString = function(s,encoding) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = _G.string.len(s);
  while (_g1 < _g2) do 
    _g1 = _g1 + 1;
    _g:push(_G.string.byte(s, (_g1 - 1) + 1));
  end;
  do return __haxe_io_Bytes.new(_g.length, _g) end;
end
__haxe_io_Bytes.prototype = _hx_a();
__haxe_io_Bytes.prototype.getString = function(self,pos,len,encoding) 
  local tmp = encoding == nil;
  if (((pos < 0) or (len < 0)) or ((pos + len) > self.length)) then 
    _G.error(__haxe_io_Error.OutsideBounds,0);
  end;
  if ((self.b.length - pos) <= __lua_Boot.MAXSTACKSIZE) then 
    local _end = Math.min(self.b.length, pos + len) - 1;
    do return _G.string.char(_hx_table.unpack(self.b, pos, _end)) end;
  else
    local tbl = ({});
    local _g = pos;
    local _g1 = pos + len;
    while (_g < _g1) do 
      _g = _g + 1;
      local idx = _g - 1;
      _G.table.insert(tbl, _G.string.char(self.b[idx]));
    end;
    do return _G.table.concat(tbl, "") end;
  end;
end

__haxe_io_Encoding.UTF8 = _hx_tab_array({[0]="UTF8",0,__enum__ = __haxe_io_Encoding},2)

__haxe_io_Encoding.RawNative = _hx_tab_array({[0]="RawNative",1,__enum__ = __haxe_io_Encoding},2)


__haxe_io_Error.Blocked = _hx_tab_array({[0]="Blocked",0,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Overflow = _hx_tab_array({[0]="Overflow",1,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.OutsideBounds = _hx_tab_array({[0]="OutsideBounds",2,__enum__ = __haxe_io_Error},2)

__haxe_io_Error.Custom = function(e) local _x = _hx_tab_array({[0]="Custom",3,e,__enum__=__haxe_io_Error}, 3); return _x; end 

__haxe_io_Output.new = {}
__haxe_io_Output.prototype = _hx_a();
__haxe_io_Output.prototype.writeByte = function(self,c) 
  _G.error("Not implemented",0);
end
__haxe_io_Output.prototype.writeBytes = function(self,s,pos,len) 
  if (((pos < 0) or (len < 0)) or ((pos + len) > s.length)) then 
    _G.error(__haxe_io_Error.OutsideBounds,0);
  end;
  local b = s.b;
  local k = len;
  while (k > 0) do 
    self:writeByte(b[pos]);
    pos = pos + 1;
    k = k - 1;
  end;
  do return len end
end
__haxe_io_Output.prototype.writeFullBytes = function(self,s,pos,len) 
  while (len > 0) do 
    local k = self:writeBytes(s, pos, len);
    pos = pos + k;
    len = len - k;
  end;
end
__haxe_io_Output.prototype.writeString = function(self,s,encoding) 
  local b = __haxe_io_Bytes.ofString(s, encoding);
  self:writeFullBytes(b, 0, b.length);
end

__lua_Boot.new = {}
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(Std.string(o[0])) .. Std.string("(");
    s = Std.string(s) .. Std.string("\t");
    local _g = 2;
    local _g1 = o.length;
    while (_g < _g1) do 
      _g = _g + 1;
      local i = _g - 1;
      if (i ~= 2) then 
        str = Std.string(str) .. Std.string((Std.string(",") .. Std.string(__lua_Boot.__string_rec(o[i], s))));
      else
        str = Std.string(str) .. Std.string(__lua_Boot.__string_rec(o[i], s));
      end;
    end;
    do return Std.string(str) .. Std.string(")") end;
  end;
end
__lua_Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = __lua_Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
__lua_Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  if (__lua_lib_luautf8_Utf8.len(s) >= 5) then 
    do return "<...>" end;
  end;
  local _g = type(o);
  if (_g) == "boolean" then 
    do return tostring(o) end;
  elseif (_g) == "function" then 
    do return "<function>" end;
  elseif (_g) == "nil" then 
    do return "null" end;
  elseif (_g) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o == 0) then 
          do return "0" end;
        else
          if (o ~= o) then 
            do return "NaN" end;
          else
            do return tostring(o) end;
          end;
        end;
      end;
    end;
  elseif (_g) == "string" then 
    do return o end;
  elseif (_g) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return __lua_Boot.printEnum(o, s) end;
    else
      if ((_hx_wrap_if_string_field(o,'toString') ~= nil) and not __lua_Boot.isArray(o)) then 
        do return _hx_wrap_if_string_field(o,'toString')(o) end;
      else
        if (__lua_Boot.isArray(o)) then 
          local o2 = o;
          if (__lua_lib_luautf8_Utf8.len(s) > 5) then 
            do return "[...]" end;
          else
            local _g1 = _hx_tab_array({}, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g1:push(__lua_Boot.__string_rec(i, Std.string(s) .. Std.string(1)));
            end;
            do return Std.string(Std.string("[") .. Std.string(_g1:join(","))) .. Std.string("]") end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return Std.string(Std.string("{") .. Std.string(__lua_Boot.printClassRec(o, "", Std.string(s) .. Std.string("\t")))) .. Std.string("}") end;
          else
            local fields = __lua_Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer, "{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer, ", ");
              end;
              _G.table.insert(buffer, Std.string(Std.string(Std.string("") .. Std.string(Std.string(f1))) .. Std.string(" : ")) .. Std.string(__lua_Boot.__string_rec(o[f1], Std.string(s) .. Std.string("\t"))));
            end;
            _G.table.insert(buffer, " }");
            do return _G.table.concat(buffer, "") end;
          end;
        end;
      end;
    end;
  elseif (_g) == "thread" then 
    do return "<thread>" end;
  elseif (_g) == "userdata" then 
    local mt = _G.getmetatable(o);
    if ((mt ~= nil) and (mt.__tostring ~= nil)) then 
      do return _G.tostring(o) end;
    else
      do return "<userdata>" end;
    end;else
  _G.error("Unknown Lua type",0); end;
end
__lua_Boot.fieldIterator = function(o) 
  if (_G.type(o) ~= "table") then 
    do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
      do return nil end;
    end,hasNext=function(self) 
      do return false end;
    end}) end;
  end;
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (__lua_Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1, val);
    end;
    do return val end;
  end;
  local cur_val = next_valid(tbl, cur(tbl, nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl, cur(tbl, cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end

__lua_Thread.new = {}

__lua_UserData.new = {}

__sys_io_File.new = {}
__sys_io_File.append = function(path,binary) 
  if (binary == nil) then 
    binary = true;
  end;
  do return __sys_io_FileOutput.new(_G.io.open(path, "a")) end;
end
__sys_io_File.write = function(path,binary) 
  if (binary == nil) then 
    binary = true;
  end;
  local fh = _G.io.open(path, (function() 
    local _hx_1
    if (binary) then 
    _hx_1 = "wb"; else 
    _hx_1 = "w"; end
    return _hx_1
  end )());
  if (fh == nil) then 
    _G.error(Std.string("Invalid path : ") .. Std.string(path),0);
  end;
  do return __sys_io_FileOutput.new(fh) end;
end

__sys_io_FileOutput.new = function(f) 
  local self = _hx_new(__sys_io_FileOutput.prototype)
  __sys_io_FileOutput.super(self,f)
  return self
end
__sys_io_FileOutput.super = function(self,f) 
  if (f == nil) then 
    _G.error(Std.string("Invalid filehandle : ") .. Std.string(Std.string(f)),0);
  end;
  self.f = f;
end
__sys_io_FileOutput.prototype = _hx_a();
__sys_io_FileOutput.prototype.writeByte = function(self,c) 
  self.f:write(__lua_lib_luautf8_Utf8.char(c));
end
__sys_io_FileOutput.prototype.writeBytes = function(self,s,pos,len) 
  self.f:write(s:getString(pos, len));
  do return s.length end
end
__sys_io_FileOutput.prototype.close = function(self) 
  self.f:close();
end
__sys_io_FileOutput.__super__ = __haxe_io_Output
setmetatable(__sys_io_FileOutput.prototype,{__index=__haxe_io_Output.prototype})

__utils_Common.new = {}
__utils_Common.ident = function(x) 
  do return x end;
end
__utils_Common.filterIn = function(s,t) 
  local tt = (function() 
    local _hx_1
    if (t == nil) then 
    _hx_1 = __utils_Common.ident; else 
    _hx_1 = t; end
    return _hx_1
  end )();
  do return function(x) 
    __utils_FileLogger.log(_G.type(x));
    __utils_FileLogger.log(tt(x));
    local tmp = tt(x);
    do return s:indexOf(tmp) ~= -1 end;
  end end;
end
__utils_Common.mkLua = function() 
  do return {} end;
end
__utils_Common.structToTable = function(s) 
  local obj = __utils_Common.mkLua();
  local _g = 0;
  local _g1 = Reflect.fields(s);
  while (_g < _g1.length) do 
    local i = _g1[_g];
    _g = _g + 1;
    obj[i] = s[i];
  end;
  do return obj end;
end

__utils_FileLogger.new = {}
__utils_FileLogger.log = function(obj) 
  if (__utils_FileLogger.outFile == nil) then 
    __utils_FileLogger.outFile = __sys_io_File.write(__utils_FileLogger.path);
  end;
  local t = _G.os.time() * 1000;
  local d = _hx_e();
  _G.setmetatable(d, _hx_o({__fields__={__index=true},__index=Date.prototype}));
  d.t = t / 1000;
  d.d = _G.os.date("*t", Std.int(d.t));
  d.dUTC = _G.os.date("!*t", Std.int(d.t));
  local timestamp = DateTools.format(d, "%F[%T] ");
  local value = __utils_FileLogger.outFile;
  if (value == nil) then 
    _G.error("null pointer in .sure() call",0);
  end;
  value:writeString(Std.string(Std.string(timestamp) .. Std.string(__lib_Inspect.inspect(obj))) .. Std.string("\n"));
  value:close();
  __utils_FileLogger.outFile = __sys_io_File.append(__utils_FileLogger.path);
end
_hx_bit_clamp = function(v)
  if v <= 2147483647 and v >= -2147483648 then
    if v > 0 then return _G.math.floor(v)
    else return _G.math.ceil(v)
    end
  end
  if v > 2251798999999999 then v = v*2 end;
  if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
  return _hx_bit.band(v, 2147483647 ) - math.abs(_hx_bit.band(v, 2147483648))
end

-- require this for lua 5.1
pcall(require, 'bit')
if bit then
  _hx_bit = bit
else
  local _hx_bit_raw = _G.require('bit32')
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
end

_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  DateTools.DAY_SHORT_NAMES = _hx_tab_array({[0]="Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, 7);
  
  DateTools.DAY_NAMES = _hx_tab_array({[0]="Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, 7);
  
  DateTools.MONTH_SHORT_NAMES = _hx_tab_array({[0]="Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"}, 12);
  
  DateTools.MONTH_NAMES = _hx_tab_array({[0]="January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}, 12);
  
  __app_TaglistManager.taglist = __haxe_ds_Option.None;
  
  __app_Taglist.wibox_config = _hx_o({__fields__={ontop=true,opacity=true,x=true,y=true,height=true,width=true},ontop=true,opacity=0.7,x=1820,y=440,height=115,width=95});
  
  __app_TaglistAnimator.slideConf = _hx_o({__fields__={init=true,last=true,step_time=true},init=1820,last=1895,step_time=0.05});
  
  __haxe_EntryPoint.pending = Array.new();
  
  __haxe_EntryPoint.threadCount = 0;
  
  __lua_Boot.MAXSTACKSIZE = 1000;
  
  __lua_Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  
  __utils_FileLogger.path = "/home/cji/portless/lua/awesome-config/haxeshigh/logs/std.log";
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
return _hx_exports
